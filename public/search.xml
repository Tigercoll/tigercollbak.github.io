<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>进程线程协程的区别</title>
    <url>/2020/05/17/1.%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="1-进程线程协程的区别"><a href="#1-进程线程协程的区别" class="headerlink" title="1.进程线程协程的区别?"></a>1.进程线程协程的区别?</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进程:计算机中资源分配的最小单位.</span><br><span class="line">线程:计算机中CPU调度的最小单位.</span><br><span class="line">协程:又称为&#39;微线程&#39;,在计算机中不是真实存在,而是程序员通过代码伪造出来的.</span><br><span class="line">一个进程中可以有多个线程,一个线程又可以创建多个协程,在cPython中海油一个GIL,全局解释器锁(同一时刻,一个进程中只有一个线程可以被CPU调度),由于GIL的存在,导致Python中:计算密集型用进程,IO密集型用线程(协程)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery 介绍</title>
    <url>/2021/01/18/Celery-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理， 如果你的业务场景中需要用到异步任务，就可以考虑使用celery， 举几个实例场景中可用的例子:</p>
<ul>
<li>异步任务：将耗时的操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音频处理等等</li>
<li>做一个定时任务，比如每天定时执行爬虫爬取指定内容</li>
<li>还可以使用celery实现简单的分布式爬虫系统等等</li>
</ul>
<a id="more"></a>
<h2 id="Celery有以下优点："><a href="#Celery有以下优点：" class="headerlink" title="Celery有以下优点："></a>Celery有以下优点：</h2><ul>
<li>简单：Celery 易于使用和维护，并且它 不需要配置文件 ，并且配置和使用还是比较简单的（后面会讲到配置文件可以有）</li>
<li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li>
<li>快速：单个 Celery 进程每分钟可处理数以百万计的任务，而保持往返延迟在亚毫秒级</li>
<li>灵活： Celery 几乎所有部分都可以扩展或单独使用，各个部分可以自定义。</li>
</ul>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程:"></a>执行流程:</h2><p><img src="/images/Celery-%E4%BB%8B%E7%BB%8D/1.png" alt="1"></p>
<h2 id="组成模块"><a href="#组成模块" class="headerlink" title="组成模块:"></a>组成模块:</h2><ul>
<li>任务模块 Task<ul>
<li>用来创建异步任务,或者定时任务</li>
</ul>
</li>
<li>消息中间件 Broker<ul>
<li>用来调度生产者创建的任务,并将其放入消息队列(celery本身不提供消息队列, 官方推荐RabbitMQ 和 Redis 等)</li>
</ul>
</li>
<li>任务执行单元 Worker<ul>
<li>监控消息队列里的任务并执行。</li>
</ul>
</li>
<li>结果存储 Backend<ul>
<li>用于存储任务执行的结果。</li>
</ul>
</li>
</ul>
<h2 id="初识Celery"><a href="#初识Celery" class="headerlink" title="初识Celery"></a>初识Celery</h2><h3 id="安装Celery"><a href="#安装Celery" class="headerlink" title="安装Celery"></a>安装Celery</h3><p>我们直接通过pip来安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pip install celery</span><br></pre></td></tr></table></figure>
<h3 id="创建tasks"><a href="#创建tasks" class="headerlink" title="创建tasks"></a>创建tasks</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入Celery对象</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="comment"># 配置消息中间件的地址，推荐用redis或者RabbitMQ</span></span><br><span class="line"><span class="comment"># 这里我们用redis</span></span><br><span class="line"><span class="comment"># redis://密码@地址:端口号/db</span></span><br><span class="line">broker=<span class="string">'redis://127.0.0.1:6379/1'</span></span><br><span class="line"><span class="comment"># 配置结果存放地址</span></span><br><span class="line">backend = <span class="string">'redis://127.0.0.1:6379/2'</span></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line"><span class="comment"># 第一个参数为命名，可以随便取</span></span><br><span class="line"><span class="comment"># 第二个参数为broker</span></span><br><span class="line"><span class="comment"># 第三个参数为backend</span></span><br><span class="line">app = Celery(<span class="string">'test'</span>,broker=broker,backend=backend)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个task函数</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure>
<h3 id="运行worker"><a href="#运行worker" class="headerlink" title="运行worker"></a>运行worker</h3><p>在刚才创建的目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行worker</span></span><br><span class="line"></span><br><span class="line">$ celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure>
<p>成功后会输入如下信息</p>
<p><img src="/images/Celery-%E4%BB%8B%E7%BB%8D/image-20210119220136204.png" alt="image-20210119220136204"></p>
<h3 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h3><p>打开<code>ipython</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入任务</span></span><br><span class="line">In[<span class="number">3</span>]: <span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="comment"># 运行任务</span></span><br><span class="line">In[<span class="number">4</span>]: add.delay(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 输出结果ID</span></span><br><span class="line">Out[<span class="number">4</span>]: &lt;AsyncResult: <span class="number">070956</span>a9<span class="number">-0791</span><span class="number">-43</span>c6<span class="number">-9</span>bb6<span class="number">-55</span>af6460cc37&gt;</span><br></pre></td></tr></table></figure>
<p>我们可以看到我们启动的worker已经把结果计算完了</p>
<p><img src="/images/Celery-%E4%BB%8B%E7%BB%8D/image-20210119221336068.png" alt="image-20210119221336068"></p>
<p>我们还可以去<code>redis</code>中查看</p>
<p><img src="/images/Celery-%E4%BB%8B%E7%BB%8D/image-20210119221812325.png" alt="image-20210119221812325"></p>
<h3 id="获取结果"><a href="#获取结果" class="headerlink" title="获取结果"></a>获取结果</h3><p>那么我们如何获取到执行的结果呢？</p>
<p>我们可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line">res=AsyncResult(<span class="string">"070956a9-0791-43c6-9bb6-55af6460cc37"</span>) <span class="comment"># 参数为task id</span></span><br><span class="line">res.result</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>异步消息队列</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 DRF(django rest framework)</title>
    <url>/2020/05/31/DRF(django-rest-framework)/</url>
    <content><![CDATA[<p>drf,是django的一个第三方组件,用来帮助我们快速的实现遵循restful规范的API接口(如果你还不知道什么是restful规范的话请移步<a href="https://tigercoll.top/2020/05/31/RESTful-API%E8%A7%84%E8%8C%83/" target="_blank" rel="noopener">RESTful API规范</a>)</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install djangorestframework</span><br></pre></td></tr></table></figure>
<p>使用drf 需要在app中注册drf组件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'drf.apps.DrfConfig'</span>,</span><br><span class="line">    <span class="comment"># 注册rest_framework</span></span><br><span class="line">    <span class="string">'rest_framework'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h3><p>下面我们来编写一个基于restful规范的视图<code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入rest_framework的APIView 以前我们导入的是from django.views import View</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># 导入rest_framework的Response,以前我们导入的是from django.http import JsonResponse</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'test'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="添加url"><a href="#添加url" class="headerlink" title="添加url"></a>添加url</h3><p>在<code>urls.py</code>中添加url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> drf.views <span class="keyword">import</span> UserInfoView</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/v1/user/'</span>,UserInfoView.as_view() ), <span class="comment">#这里是一样的没有变化,只是url遵循了restful规范</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>我们运行代码查看</p>
<p><img src="/images/DRF之django-rest-framework/1.png" alt=""></p>
<p>页面效果是rest_framework帮我们渲染的一个页面,只对浏览器有效</p>
<h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><p>接下来,我们来发一个post请求看看:</p>
<p>编写视图<code>views.py</code></p>
<p>补充:在rest_framework中,前端一般都是传json格式的,所以我们用<code>request.data</code>来获取数据,<code>request.data</code>是rest_framework帮我们序列化好的了格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入rest_framework的APIView 以前我们导入的是from django.views import View</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># 导入rest_framework的Response,以前我们导入的是from django.http import JsonResponse</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'test'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 我们这里用request.data接收</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'test'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>我们用requests库来模拟post请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://127.0.0.1:8009/api/v1/user/'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=url,data=data)</span><br><span class="line">print(res.json())</span><br><span class="line"><span class="comment"># 我们得到了返回的结果</span></span><br><span class="line">结果:&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>
<p>并且在django的程序里打印了<code>request.data</code>的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'id'</span>: [<span class="string">'1'</span>], <span class="string">'name'</span>: [<span class="string">'test'</span>], <span class="string">'age'</span>: [<span class="string">'18'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="django自带的csrf-token怎么没有起作用"><a href="#django自带的csrf-token怎么没有起作用" class="headerlink" title="django自带的csrf_token怎么没有起作用?"></a>django自带的csrf_token怎么没有起作用?</h4><p>是因为我们在路由的时候调用<code>as_view()</code>方法时,是调用的父类的APIView里的<code>as_view()</code>方法,而在APIView中的<code>as_view()</code>方法帮我们加了装饰器<code>csrf_exempt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">   	<span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># 这里还是继承了django 的View的as_view()方法</span></span><br><span class="line">    view = super().as_view(**initkwargs)</span><br><span class="line">    view.cls = cls</span><br><span class="line">    view.initkwargs = initkwargs</span><br><span class="line">	<span class="comment"># 相当于加了装饰器csrf_exempt,源码中也有解释基于session的会话还是有csrftoken验证其他都豁免了</span></span><br><span class="line">    <span class="comment"># Note: session based authentication is explicitly CSRF validated,</span></span><br><span class="line">    <span class="comment"># all other authentication is CSRF exempt.</span></span><br><span class="line">    <span class="keyword">return</span> csrf_exempt(view)</span><br></pre></td></tr></table></figure>
<h3 id="快速实现drf接口"><a href="#快速实现drf接口" class="headerlink" title="快速实现drf接口"></a>快速实现drf接口</h3><h4 id="获取用户信息列表"><a href="#获取用户信息列表" class="headerlink" title="获取用户信息列表"></a>获取用户信息列表</h4><h5 id="首先编写model-py-随便在数据里手动填一些数据"><a href="#首先编写model-py-随便在数据里手动填一些数据" class="headerlink" title="首先编写model.py,随便在数据里手动填一些数据"></a>首先编写<code>model.py</code>,随便在数据里手动填一些数据</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    用户表</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">'用户名'</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">'密码'</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">'年龄'</span>)</span><br></pre></td></tr></table></figure>
<h5 id="创建一个序列化器serializers-py"><a href="#创建一个序列化器serializers-py" class="headerlink" title="创建一个序列化器serializers.py"></a>创建一个序列化器<code>serializers.py</code></h5><p>这个类似于ModelFrom</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> drf.models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先我们要定义一些序列化程序,让rest_framework帮我们序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>
<h5 id="修改views-py"><a href="#修改views-py" class="headerlink" title="修改views.py"></a>修改<code>views.py</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> drf.models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入序列化器</span></span><br><span class="line"><span class="keyword">from</span> drf.serializers <span class="keyword">import</span>  UserInfoSerializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        user_list = UserInfo.objects.all()</span><br><span class="line">        <span class="comment"># 把获取到的结果丢到序列化器里面,得到实例</span></span><br><span class="line">        ser = UserInfoSerializers(instance=user_list,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 通过ser.data返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<h5 id="在浏览器数据输入网址查看"><a href="#在浏览器数据输入网址查看" class="headerlink" title="在浏览器数据输入网址查看"></a>在浏览器数据输入网址查看</h5><p><img src="/images/DRF之django-rest-framework/2.png" alt=""></p>
<h4 id="获取单条数据"><a href="#获取单条数据" class="headerlink" title="获取单条数据"></a>获取单条数据</h4><h5 id="新增url"><a href="#新增url" class="headerlink" title="新增url"></a>新增url</h5><p>我们需要新增url,在<code>urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> drf.views <span class="keyword">import</span> UserInfoView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">   	path(<span class="string">'api/v1/user/&lt;int:pk&gt;'</span>,UserInfoView.as_view()),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="修改视图views-py"><a href="#修改视图views-py" class="headerlink" title="修改视图views.py"></a>修改视图<code>views.py</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            <span class="comment"># 获取单条数据</span></span><br><span class="line">            userinfo = UserInfo.objects.filter(pk=pk).first()</span><br><span class="line">            <span class="comment"># 获取单条时,修改many=False.</span></span><br><span class="line">            ser = UserInfoSerializers(instance=userinfo, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_list = UserInfo.objects.all()</span><br><span class="line">            <span class="comment"># 把获取到的结果丢到序列化器里面,得到实例</span></span><br><span class="line">            ser = UserInfoSerializers(instance=user_list,many=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 通过ser.data返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<h5 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果:"></a>查看结果:</h5><p><img src="/images/DRF之django-rest-framework/image-20200531231454450.png" alt=""></p>
<h4 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h4><h5 id="在views-py修改post方法"><a href="#在views-py修改post方法" class="headerlink" title="在views.py修改post方法"></a>在<code>views.py</code>修改<code>post</code>方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取请求过来的数据</span></span><br><span class="line">        data = request.data</span><br><span class="line">        <span class="comment"># 将数据放入序列化器</span></span><br><span class="line">        ser = UserInfoSerializers(data=data)</span><br><span class="line">        <span class="comment"># 类似ModelForm的校验</span></span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="comment"># 保存数据</span></span><br><span class="line">            new_obj = ser.save()</span><br><span class="line">            <span class="comment"># 序列化</span></span><br><span class="line">            ser = UserInfoSerializers(instance=new_obj,many=<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># 返回新增的数据</span></span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br></pre></td></tr></table></figure>
<h5 id="模拟请求查看结果"><a href="#模拟请求查看结果" class="headerlink" title="模拟请求查看结果"></a>模拟请求查看结果</h5><p>我们用rest_framework自带的web页面发送post请求</p>
<p><img src="/images/DRF之django-rest-framework/image-20200531234925878.png" alt="image-20200531234925878"></p>
<p><img src="/images/DRF之django-rest-framework/image-20200531234943406.png" alt="image-20200531234943406"></p>
<p>得到返回结果,</p>
<p>如果请求数据有误,还会提示</p>
<p><img src="/images/DRF之django-rest-framework/image-20200531235035222.png" alt="image-20200531235035222"></p>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><h5 id="在view-py中添加delete方法"><a href="#在view-py中添加delete方法" class="headerlink" title="在view.py中添加delete方法"></a>在<code>view.py</code>中添加<code>delete</code>方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">    UserInfo.objects.filter(pk=pk).delete()</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">'删除成功'</span>)</span><br></pre></td></tr></table></figure>
<p>当我们写完时,rest_framework提供给我们的web页面中会新增一个按钮,提供我们删除操作.</p>
<p><img src="/images/DRF之django-rest-framework/image-20200531235843919.png" alt="image-20200531235843919"></p>
<h4 id="更新用户"><a href="#更新用户" class="headerlink" title="更新用户"></a>更新用户</h4><h5 id="在view-py中添加put方法"><a href="#在view-py中添加put方法" class="headerlink" title="在view.py中添加put方法"></a>在<code>view.py</code>中添加<code>put</code>方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">    data = request.data</span><br><span class="line">    user = UserInfo.objects.filter(pk=pk).first()</span><br><span class="line">    ser=UserInfoSerializers(instance=user,data=data)</span><br><span class="line">    <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">        ser.save()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'更新成功'</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(ser.errors)</span><br></pre></td></tr></table></figure>
<h5 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h5><p>在rest_framework提供的网页中 修改,这里的url:要带id的 比如:<code>/api/v1/user/12</code>,</p>
<p>我们把<code>id=12</code>的结果改成如下</p>
<p><img src="/images/DRF之django-rest-framework/image-20200601001948457.png" alt="image-20200601001948457"></p>
<h5 id="查看结果-1"><a href="#查看结果-1" class="headerlink" title="查看结果"></a>查看结果</h5><p>点击put后查看<code>id=12</code>的结果</p>
<p><img src="/images/DRF之django-rest-framework/image-20200601002206497.png" alt="image-20200601002206497"></p>
<p>至此,所有的增删改查我们都已经写完了.</p>
<p>但是我们一点也没有觉得这DRF有什么快速的,一点也不好用,</p>
<p>别急,我们只是写了内部实现的原理,别眨眼,等下就要使用drf真正的快速方法</p>
<h3 id="使用ModelViewSet"><a href="#使用ModelViewSet" class="headerlink" title="使用ModelViewSet."></a>使用ModelViewSet.</h3><h4 id="新增一个视图"><a href="#新增一个视图" class="headerlink" title="新增一个视图,"></a>新增一个视图,</h4><p>还是对原来Userinfo的增删改查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入ModelViewSet</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="comment"># 导入序列化器</span></span><br><span class="line"><span class="keyword">from</span> drf.serializers <span class="keyword">import</span>  UserInfoSerializers</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects</span><br><span class="line">    serializer_class = UserInfoSerializers</span><br></pre></td></tr></table></figure>
<h4 id="添加url-1"><a href="#添加url-1" class="headerlink" title="添加url"></a>添加url</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> drf.views <span class="keyword">import</span> UserInfoModelViewSet</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/v1/user/'</span>,UserInfoView.as_view()),</span><br><span class="line">    path(<span class="string">'api/v1/user/&lt;int:pk&gt;'</span>,UserInfoView.as_view()),</span><br><span class="line">    <span class="comment"># 新增</span></span><br><span class="line">    path(<span class="string">'api/v2/user/'</span>,UserInfoModelViewSet.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span><br><span class="line">    path(<span class="string">'api/v2/user/&lt;int:pk&gt;'</span>,UserInfoModelViewSet.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,<span class="string">'delete'</span>:<span class="string">'destroy'</span>,<span class="string">'put'</span>:<span class="string">'update'</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>只需要这样,我们就实现了上面所有的增删改查,是不是很神奇,其实他们的内部,都是用我们上面的方法实现的.</p>
]]></content>
      <categories>
        <category>django rest_framework</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>DEEPIN 屏幕闪烁问题</title>
    <url>/2020/06/24/DEEPIN-%E5%B1%8F%E5%B9%95%E9%97%AA%E7%83%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>我的系统: <code>deepin 15.11 桌面版</code>,  安装KDE系统设置工具 <code>sudo apt install systemsettings</code>, 然后打开这个软件<code>KED系统设置</code>, 翻到最下面的 <code>显示和配置</code>, 点进去将<code>Redering backend</code> 改为 <code>XRender</code>, 确认应用即可.</p>
<p>参考链接：<a href="https://www.jianshu.com/p/3f6de4a6c393" target="_blank" rel="noopener">https://www.jianshu.com/p/3f6de4a6c393</a></p>
]]></content>
      <categories>
        <category>deepin</category>
      </categories>
      <tags>
        <tag>deepin</tag>
        <tag>linux</tag>
        <tag>显卡</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/2020/06/04/Dockerfile/</url>
    <content><![CDATA[<h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile?"></a>什么是Dockerfile?</h2><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取 Dockerfile 中的指令自动生成映像。</p>
<p>Dockerfile 一般分为四部分：</p>
<ol>
<li>基础镜像信息</li>
<li>维护者信息</li>
<li>镜像操作指令</li>
<li>容器启动时执行指令</li>
</ol>
<p><code>#</code> 为 Dockerfile 中的注释。</p>
<p>Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，<strong>第一条指令必须是FROM</strong>。一个声明以<code>＃</code> 字符开头则被视为注释。可以在Docker文件中使用 <code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code> 等指令。</p>
<a id="more"></a>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="FROM：指定基础镜像，必须为第一个命令"><a href="#FROM：指定基础镜像，必须为第一个命令" class="headerlink" title="FROM：指定基础镜像，必须为第一个命令"></a><code>FROM</code>：指定基础镜像，必须为第一个命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　FROM &lt;image&gt;</span><br><span class="line">　　FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">　　FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class="line">示例：</span><br><span class="line">　　FROM mysql:5.6</span><br><span class="line">注：</span><br><span class="line">tag 或 digest 是可选的，如果不使用这两个值时，会使用 latest 版本的基础镜像</span><br></pre></td></tr></table></figure>
<h3 id="MAINTAINER：维护者信息"><a href="#MAINTAINER：维护者信息" class="headerlink" title="MAINTAINER：维护者信息"></a><code>MAINTAINER</code>：维护者信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    MAINTAINER &lt;name&gt;</span><br><span class="line">示例：</span><br><span class="line">    MAINTAINER tt</span><br><span class="line">    MAINTAINER tt@163.com</span><br><span class="line">    MAINTAINER tt &lt;tt@163.com&gt;</span><br></pre></td></tr></table></figure>
<h3 id="RUN：构建镜像时执行的命令"><a href="#RUN：构建镜像时执行的命令" class="headerlink" title="RUN：构建镜像时执行的命令"></a><code>RUN</code>：构建镜像时执行的命令</h3><p><code>RUN</code> 用于在镜像容器中执行命令，其有以下两种命令执行方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shell执行</span><br><span class="line">	RUN &lt;command&gt;</span><br><span class="line">exec执行</span><br><span class="line">	RUN ["executable", "param1", "param2"]</span><br><span class="line">注：</span><br><span class="line">RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</span><br></pre></td></tr></table></figure>
<h3 id="COPY-复制指令，从上下文目录中复制文件或者目录到容器里指定路径"><a href="#COPY-复制指令，从上下文目录中复制文件或者目录到容器里指定路径" class="headerlink" title="COPY:复制指令，从上下文目录中复制文件或者目录到容器里指定路径"></a><code>COPY</code>:复制指令，从上下文目录中复制文件或者目录到容器里指定路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line">    COPY [--chown=&lt;user&gt;:&lt;group&gt;] ["&lt;源路径1&gt;",...  "&lt;目标路径&gt;"]</span><br><span class="line">    [--chown=&lt;user&gt;:&lt;group&gt;]：可选参数，用户改变复制到容器内文件的拥有者和属组。</span><br><span class="line">&lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</span><br><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br><span class="line">&lt;目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</span><br></pre></td></tr></table></figure>
<h3 id="ADD-将本地文件添加到容器中"><a href="#ADD-将本地文件添加到容器中" class="headerlink" title="ADD:将本地文件添加到容器中"></a>ADD:将本地文件添加到容器中</h3><p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>
<ul>
<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>
<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>
</ul>
<h3 id="CMD-构建容器后调用"><a href="#CMD-构建容器后调用" class="headerlink" title="CMD:构建容器后调用"></a>CMD:构建容器后调用</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>
<ul>
<li>CMD 在docker run 时运行。</li>
<li>RUN 是在 docker build。</li>
</ul>
<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>
<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD &lt;shell 命令&gt; </span><br><span class="line">CMD ["&lt;可执行文件或命令&gt;","&lt;param1&gt;","&lt;param2&gt;",...] </span><br><span class="line">CMD ["&lt;param1&gt;","&lt;param2&gt;",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span><br></pre></td></tr></table></figure>
<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>
<h3 id="ENTRYPOINT-追加指令"><a href="#ENTRYPOINT-追加指令" class="headerlink" title="ENTRYPOINT:追加指令"></a>ENTRYPOINT:追加指令</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>
<p>但是, 如果运行 docker run 时使用了 —entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。</p>
<p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>
<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT ["&lt;executeable&gt;","&lt;param1&gt;","&lt;param2&gt;",...]</span><br></pre></td></tr></table></figure>
<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>
<p>示例：</p>
<p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["nginx", "-c"] # 定参</span><br><span class="line">CMD ["/etc/nginx/nginx.conf"] # 变参</span><br></pre></td></tr></table></figure>
<p>1、不传参运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run  nginx:<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<p>容器内会默认运行以下命令，启动主进程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>2、传参运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run  nginx:<span class="built_in">test</span> -c /etc/nginx/new.conf</span></span><br></pre></td></tr></table></figure>
<p>容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure>
<h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV:设置环境变量"></a>ENV:设置环境变量</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>
<p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line">RUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \</span><br><span class="line">  &amp;&amp; curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"</span><br></pre></td></tr></table></figure>
<h3 id="ARG-设置的环境变量仅对-Dockerfile-内有效"><a href="#ARG-设置的环境变量仅对-Dockerfile-内有效" class="headerlink" title="ARG:设置的环境变量仅对 Dockerfile 内有效"></a>ARG:设置的环境变量仅对 Dockerfile 内有效</h3><p>构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p>
<p>构建命令 docker build 中可以用 —build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>
<h3 id="VOLUME-定义匿名数据卷"><a href="#VOLUME-定义匿名数据卷" class="headerlink" title="VOLUME:定义匿名数据卷"></a>VOLUME:定义匿名数据卷</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>
<p>作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VOLUME ["&lt;路径1&gt;", "&lt;路径2&gt;"...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>
<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>
<h3 id="EXPOSE-暴露端口"><a href="#EXPOSE-暴露端口" class="headerlink" title="EXPOSE:暴露端口"></a>EXPOSE:暴露端口</h3><p>仅仅只是声明端口。</p>
<p>作用：</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>
<h3 id="WORKDIR-docker-run之后的目录"><a href="#WORKDIR-docker-run之后的目录" class="headerlink" title="WORKDIR:docker run之后的目录"></a>WORKDIR:docker run之后的目录</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>
<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WORKDIR &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure>
<h3 id="USER-指定运行后面指令的用户和用户组"><a href="#USER-指定运行后面指令的用户和用户组" class="headerlink" title="USER:指定运行后面指令的用户和用户组"></a>USER:指定运行后面指令的用户和用户组</h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>
<h3 id="HEALTHCHECK-用于指定某个程序或者指令来监控-docker-容器服务的运行状态。"><a href="#HEALTHCHECK-用于指定某个程序或者指令来监控-docker-容器服务的运行状态。" class="headerlink" title="HEALTHCHECK:用于指定某个程序或者指令来监控 docker 容器服务的运行状态。"></a>HEALTHCHECK:用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span><br><span class="line">HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><br><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span><br></pre></td></tr></table></figure>
<h3 id="ONBUILD-用于延迟构建命令的执行"><a href="#ONBUILD-用于延迟构建命令的执行" class="headerlink" title="ONBUILD:用于延迟构建命令的执行"></a>ONBUILD:用于延迟构建命令的执行</h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ONBUILD &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>
<p>以上参考: <a href="https://www.runoob.com/docker/docker-dockerfile.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-dockerfile.html</a></p>
<h2 id="实例-制作一个Dockerfile"><a href="#实例-制作一个Dockerfile" class="headerlink" title="实例:制作一个Dockerfile"></a>实例:制作一个Dockerfile</h2><p>我们在<code>/home</code>下新建一个文件夹 <code>mkdir -f /home/project</code> </p>
<p>进入该目录 <code>cd /home/project</code></p>
<p><code>vim app.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello DockerFile!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>
<p>新建一个<code>Dockerfile</code>文件,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Base images 基础镜像 必须放在开头</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="meta">#</span><span class="bash">MAINTAINER 维护者信息</span></span><br><span class="line">MAINTAINER Tigercoll</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 以及安装python</span></span><br><span class="line">RUN yum -y install python3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装flask</span></span><br><span class="line">RUN pip3 install flask</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境项目目录</span></span><br><span class="line">ENV WORKPATH /flask/project</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录</span></span><br><span class="line">RUN mkdir -p $WORKPATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝文件到项目目录</span></span><br><span class="line">COPY app.py $WORKPATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换工作目录</span></span><br><span class="line">WORKDIR $WORKPATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 暴露端口</span></span><br><span class="line">EXPOSE 5000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器启动时执行</span></span><br><span class="line">CMD python3 app.py</span><br></pre></td></tr></table></figure>
<p>制作镜像 <code>docker build -t flask:1.0 .</code>  如果名字是Dockerfile的话就不需要 <code>-f</code> 指定,如果不是请用 <code>-f</code> 指定文件,</p>
<p>这个<code>.</code>是上下文路径:上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>
<p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>
<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>
<p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Removing intermediate container 53b01ced53d2</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 708e9ab6c83e</span></span><br><span class="line">Step 10/10 : CMD python3 app.py</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 871455a7187c</span></span><br><span class="line">Removing intermediate container 871455a7187c</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 90d4d1c76098</span></span><br><span class="line">Successfully built 90d4d1c76098</span><br><span class="line">Successfully tagged flask:1.0</span><br></pre></td></tr></table></figure>
<p>可以看到这里制作成功了我们<code>docker images</code>看一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost project]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">flask               1.0                 90d4d1c76098        4 minutes ago       275MB</span><br><span class="line">centos              latest              470671670cac        4 months ago        237MB</span><br></pre></td></tr></table></figure>
<p>运行一下 <code>docker run -d -p 5000:5000 flask:1.0</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost project]# docker run -d -p 5000:5000 flask:1.0</span><br><span class="line">ea4400c411b18c286731b51ce2e4b7b13c320e08a10b3f7b55e6fb5ed6220722</span><br></pre></td></tr></table></figure>
<p>查看<code>docker ps</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost project]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ea4400c411b1        flask:1.0           "/bin/sh -c 'python3…"   23 seconds ago      Up 22 seconds       0.0.0.0:5000-&gt;5000/tcp   admiring_agnesi</span><br></pre></td></tr></table></figure>
<p><img src="/images/Dockerfile/image-20200604233641684.png" alt=""></p>
<p>可以看到浏览器能正常访问,说明我们的Dockerfile 制作成功</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker数据管理(数据卷&amp;数据卷容器)</title>
    <url>/2020/06/04/Docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86(%E6%95%B0%E6%8D%AE%E5%8D%B7&amp;%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8)/</url>
    <content><![CDATA[<p>有些时候，我们的服务运行时必不可少的会产生一些日志，或是我们需要把容器内的数据进行备份，甚至多个容器之间进行数据共享，这必然涉及容器的数据管理操作。</p>
<p><strong>容器中管理数据主要有两种方式：</strong></p>
<p>数据卷</p>
<p>数据卷容器</p>
<a id="more"></a>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：</p>
<ul>
<li><p>数据卷可以在容器之间共享和重用</p>
</li>
<li><p>对数据卷的修改会立马生效</p>
</li>
<li><p>对数据卷的更新，不会影响镜像</p>
</li>
<li><p>卷会一直存在，直到没有容器使用</p>
</li>
</ul>
<p>#(类似linux下的挂载(mount)) </p>
<h3 id="命令添加"><a href="#命令添加" class="headerlink" title="命令添加"></a>命令添加</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路劲目录:/容器内目录:读写权限 镜像名称</span><br></pre></td></tr></table></figure>
<p>实例:创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -it -v /home/apples/Desktop/dateVolume:/dateVolume centos</span></span><br><span class="line">[root@b0f35537f8c3 /]# </span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候已经进入到centos容器当中,我们ls查看,有刚才的dateVolume</span></span><br><span class="line">[root@b0f35537f8c3 /]# ls</span><br><span class="line">bin	    dev  home  lib64	   media  opt	root  sbin  sys  usr</span><br><span class="line">dateVolume  etc  lib   lost+found  mnt	  proc	run   srv   tmp  var</span><br></pre></td></tr></table></figure>
<p>我们新建一个ssh连接查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apples@apples-PC:~$ ls /home/apples/Desktop/</span><br><span class="line">dateVolume</span><br></pre></td></tr></table></figure>
<p>所以-v 会新建一个目录,如果原来没有的话</p>
<p>我们可以用<code>docker inspect 容器ID</code>查看</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"HostConfig": &#123;</span><br><span class="line">            "Binds": [</span><br><span class="line">                <span class="string">"/home/apples/Desktop/dateVolume:/dateVolume"</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">    "Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/home/apples/Desktop/dateVolume"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/dateVolume"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                "RW": true, #读写</span><br><span class="line">                "Propagation": "rprivate"</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>
<h3 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h3><p>我们进入宿主机刚才创建的目录<code>dateVolume</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/Desktop/dateVolume$ sudo touch a.txt</span><br></pre></td></tr></table></figure>
<p>切换回容器中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@b0f35537f8c3 /]# cd dateVolume/</span><br><span class="line">[root@b0f35537f8c3 dateVolume]# ls</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure>
<p>发现容器中已经存在刚才创建的<code>a.txt</code></p>
<p>我们在容器中写入数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@b0f35537f8c3 dateVolume]# echo "update in container" &gt; a.txt</span><br></pre></td></tr></table></figure>
<p>我们切换回宿主机 <code>cat</code>查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apples@apples-PC:~&#x2F;Desktop&#x2F;dateVolume$ cat a.txt </span><br><span class="line">update in container</span><br></pre></td></tr></table></figure>
<p>证明:数据卷可以在容器之间共享和重用,对数据卷的修改会立马生效</p>
<h3 id="DockerFile添加"><a href="#DockerFile添加" class="headerlink" title="DockerFile添加"></a>DockerFile添加</h3><p>Dockfile是一种被Docker程序解释的脚本，Dockerfile由一条一条的指令组成，每条指令对应Linux下面的一条命令。Docker程序将这些Dockerfile指令翻译真正的Linux命令。Dockerfile有自己书写格式和支持的命令，Docker程序解决这些命令间的依赖关系，类似于Makefile。Docker程序将读取Dockerfile，根据指令生成定制的image。相比image这种黑盒子，Dockerfile这种显而易见的脚本更容易被使用者接受，它明确的表明image是怎么产生的。有了Dockerfile，当我们需要定制自己额外的需求时，只需在Dockerfile上添加或者修改指令，重新生成image即可，省去了敲命令的麻烦。</p>
<p>DockerFile 中有个<code>VOLUME</code>来定义匿名的数据卷</p>
<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>
<p>作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VOLUME ["&lt;路径1&gt;", "&lt;路径2&gt;"...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>
<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>
<p>我们可以在<code>docker inspect</code> 中查看挂载到宿主机上的路径</p>
<h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a><strong>数据卷容器</strong></h3><p>如果用户需要在容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器，数据卷容器其实是一个普通的容器，专门用来提供数据卷供其它容器挂载。</p>
<p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --volumes-from [容器名称]</span><br></pre></td></tr></table></figure>
<p>我们用刚才已经挂载过的容器(必须要有一个已经挂载过数据卷)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/Desktop/dateVolume$ sudo docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b0f35537f8c3        centos              "/bin/bash"         About an hour ago   Up About an hour                        priceless_cartwright</span><br></pre></td></tr></table></figure>
<p>然后，在其他容器中使用 <code>--volumes-from</code> 来挂载 刚才容器中的数据卷。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;Desktop&#x2F;dateVolume$ sudo docker run -it --volumes-from priceless_cartwright --name mycentos_1 centos</span><br><span class="line">[root@2192a4befa17 &#x2F;]#</span><br></pre></td></tr></table></figure>
<p>我们检查一下之前的数据是否存在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@2192a4befa17 /]# ls</span><br><span class="line">bin  dateVolume  dev  etc  home  lib  lib64  lost+found  media	mnt  opt  proc	root  run  sbin  srv  sys  tmp	usr  var</span><br><span class="line">[root@2192a4befa17 /]# ls dateVolume/</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure>
<p>注意：使用 <code>--volumes-from</code> 参数所挂载数据卷的容器自己并不需要保持在运行状态。</p>
<p>如果删除了挂载的容器，数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 <code>docker rm -v</code> 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。</p>
<h3 id="利用数据卷容器来备份、恢复、迁移数据卷"><a href="#利用数据卷容器来备份、恢复、迁移数据卷" class="headerlink" title="利用数据卷容器来备份、恢复、迁移数据卷"></a>利用数据卷容器来备份、恢复、迁移数据卷</h3><p>可以利用数据卷对其中的数据进行进行备份、恢复和迁移。</p>
<h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>首先使用 <code>--volumes-from</code> 标记来创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 /backup 目录。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --volumes-from dbdata -v $(pwd):&#x2F;backup ubuntu tar cvf &#x2F;backup&#x2F;backup.tar &#x2F;dbdata</span><br></pre></td></tr></table></figure>
<p>容器启动后，使用了 <code>tar</code> 命令来将 dbdata 卷备份为本地的 <code>/backup/backup.tar</code>。</p>
<h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>如果要恢复数据到一个容器，首先创建一个带有数据卷的容器 dbdata2。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -v &#x2F;dbdata --name dbdata2 ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>然后创建另一个容器，挂载 dbdata2 的容器，并使用 <code>untar</code> 解压备份文件到挂载的容器卷中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --volumes-from dbdata2 -v $(pwd):&#x2F;backup busybox tar xvf</span><br><span class="line">&#x2F;backup&#x2F;backup.tar</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker数据</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONP介绍</title>
    <url>/2020/05/17/JSONP%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h1><h2 id="JSONP介绍"><a href="#JSONP介绍" class="headerlink" title="JSONP介绍"></a>JSONP介绍</h2><p>Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。<a id="more"></a></p>
<p>为什么我们从不同的域（网站）访问数据需要一个特殊的技术(JSONP )呢？这是因为同源策略。</p>
<p>同源策略，它是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。</p>
<p>所谓同源是指，域名，协议，端口相同。当一个浏览器的两个tab页中分别打开来 百度和谷歌的页面当浏览器的百度tab页执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问。 </p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><p>新建项目一:</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-latest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'/get_json/'</span>,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>&#123;</span></span><br><span class="line">                alert(callback)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>django:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'127.0.0.1:8081'</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, index),</span><br><span class="line">    path(<span class="string">'get_json/'</span>,get_json)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>新建项目二:</p>
<p>index:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8082<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-latest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'/get_json/'</span>,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>&#123;</span></span><br><span class="line">                alert(callback)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>django:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'127.0.0.1:8082'</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, index),</span><br><span class="line">    path(<span class="string">'get_json/'</span>, get_json)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>我们这样获取就是在同源下,所以肯定没问题</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/jsonp/1.png" alt=""></p>
<p>现在我们修改一下 项目一下面的index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-latest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line">            url:'http://127.0.0.1:8082/get_json/',#这里修改为项目二的地址,注意需要加上http://</span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>&#123;</span></span><br><span class="line">                alert(callback)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在项目二的django项目上添加一行打印,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="number">111</span>) <span class="comment">#添加一行打印,查看是否有到达这边</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'127.0.0.1:8082'</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, index),</span><br><span class="line">    path(<span class="string">'get_json/'</span>, get_json)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>然后我们重启项目,打开项目一index界面,点击出现如下错误:</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/jsonp/2.png" alt=""></p>
<p>我们再看一下 项目二有没有打印</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/jsonp/3.png" alt=""></p>
<p>有打印,这说明我们get请求是发送成功的,说明是浏览器对非同源请求返回的结果做了拦截.（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’,我们暂时先讲jsonp）</p>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考?"></a>思考?</h4><p><code>&lt;script src</code>=<code>&quot;http://code.jquery.com/jquery-latest.js&quot;</code>&gt;&lt;<code>/</code>script&gt;这个也是跨域的,为什么这个就可以?那么我们是不是借助script标签，实现跨域请求 .</p>
<p>修改项目一的index页面,</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-latest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8082/get_json/"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里为了方便查看,我们返回值设置成了hello</p>
<p>我们刷新页面:</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/jsonp/4.png" alt=""></p>
<p>这又是啥情况?</p>
<p>分析:</p>
<p>​    其实我们数据是已经获取到了.只是浏览器呈现的是这样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">hello  #这样是会报错,所以我们需要先定义一个这样的名字,这里我们利用一个函数来处理</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们事先定义一个函数</p>
<p>修改项目一的index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义一个hello函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        alert(123)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line">//这里获取的就是hello()     </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8082/get_json/"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然我们也要修改项目二中的返回函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'hello()'</span>)</span><br></pre></td></tr></table></figure>
<p>重启刷新页面,我们就成功获取了一次完整的请求.</p>
<p>这样我们只是简单的实现了不让返回值报错,但是返回值我们都预先定义了,这样有什么意义呢?</p>
<p>函数,自然有参数,我们可以把数据,放入参数中,然后前端调用这些数据.数据,自然是用json格式.</p>
<p>这其实就是JSONP的简单实现模式，或者说是JSONP的原型：创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。</p>
<p>将JSON数据填充进回调函数，这就是JSONP的JSON+Padding的含义。</p>
<p>一般情况下，我们希望这个script标签能够动态的调用，而不是像上面因为固定在html里面所以没等页面显示就执行了，很不灵活。我们可以通过javascript动态的创建script标签，这样我们就可以灵活调用远程服务了。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">(callback)</span> </span>&#123;</span></span><br><span class="line">        alert(callback)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//创建script标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ScrEle = $(<span class="string">'&lt;script&gt;'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//src添加属性</span></span></span><br><span class="line"><span class="actionscript">        ScrEle.attr(<span class="string">'src'</span>,url);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//添加id属性,方便下面的删除.</span></span></span><br><span class="line"><span class="actionscript">        ScrEle.attr(<span class="string">'id'</span>,<span class="string">"jsonP"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'body'</span>).append(ScrEle);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#jsonP'</span>).remove()</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">//调用函数.</span></span></span><br><span class="line"><span class="actionscript">        f(<span class="string">"http://127.0.0.1:8082/get_json/"</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了更加灵活，现在将你自己在客户端定义的回调函数的函数名传送给服务端，服务端则会返回以你定义的回调函数名的方法，将获取的json数据传入这个方法完成回调：</p>
<p>将8081的f()改写为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//解析json</span></span><br><span class="line">        <span class="keyword">var</span> data =<span class="built_in">JSON</span>.parse(callback);</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ScrEle = $(<span class="string">'&lt;script&gt;'</span>);</span><br><span class="line">        ScrEle.attr(<span class="string">'src'</span>,url);</span><br><span class="line">        ScrEle.attr(<span class="string">'id'</span>,<span class="string">"jsonP"</span>);</span><br><span class="line">        $(<span class="string">'body'</span>).append(ScrEle);</span><br><span class="line">        $(<span class="string">'#jsonP'</span>).remove()</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="button" value="点我"/</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        /传入参数</span><br><span class="line">       f(<span class="string">"http://127.0.0.1:8082/get_json/?callbacks=hello"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>将项目二的函数改成:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    callbacks = request.GET.get(<span class="string">'callbacks'</span>)</span><br><span class="line">    dic = &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;</span><br><span class="line">    print(callbacks)</span><br><span class="line">    <span class="comment"># 这里必须用"%s('%s')"</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"%s('%s')"</span>%(callbacks,json.dumps(dic)))</span><br></pre></td></tr></table></figure>
<h2 id="getJSON"><a href="#getJSON" class="headerlink" title="getJSON"></a>getJSON</h2><p>jQuery框架也当然支持JSONP，可以使用$.getJSON(url,[data],[callback])方法 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(url)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">          $.getJSON(url,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">var</span> data =<span class="built_in">JSON</span>.parse(callback);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">       f(<span class="string">"http://127.0.0.1:8082/get_json/?callbacks=?"</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目二的django 视图函数不用变.</p>
<p>结果是一样的，要注意的是在url的后面必须添加一个callback参数，这样getJSON方法才会知道是用JSONP方式去访问服务，callback后面的那个问号是内部自动生成的一个回调函数名。</p>
<p>此外，如果说我们想指定自己的回调函数名，或者说服务上规定了固定回调函数名该怎么办呢？我们可以使用’$.ajax’方法来实现</p>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">(callback)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">var</span> data =<span class="built_in">JSON</span>.parse(callback);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://127.0.0.1:8082/get_json/"</span>,</span></span><br><span class="line"><span class="actionscript">                dataType:<span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="actionscript">                jsonp: <span class="string">'callbacks'</span>,</span></span><br><span class="line"><span class="actionscript">                jsonpCallback:<span class="string">"hello"</span> <span class="comment">//回调函数方法名</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>当然，最简单的形式还是通过回调函数来处理：</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>127.0.0.1:8081<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://127.0.0.1:8082/get_json/"</span>,</span></span><br><span class="line"><span class="actionscript">                dataType:<span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="actionscript">                jsonp: <span class="string">'callbacks'</span>,</span></span><br><span class="line"><span class="actionscript">                success:<span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                 	<span class="keyword">var</span> data =<span class="built_in">JSON</span>.parse(callback);</span></span><br><span class="line"><span class="javascript">               	 	<span class="built_in">console</span>.log(data)</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上都不需要改项目二的视图函数. </p>
<p> jsonp: ‘callbacks’就是定义一个存放回调函数的键，jsonpCallback是前端定义好的回调函数方法名’SayHi’，server端接受callback键对应值后就可以在其中填充数据打包返回了; </p>
<p>jsonpCallback参数可以不定义，jquery会自动定义一个随机名发过去，那前端就得用回调函数来处理对应数据了。利用jQuery可以很方便的实现JSONP来进行跨域访问。　　</p>
<font color='red'>注意 JSONP一定是GET请求</font>

<h2 id="CORS-跨域资源共享-介绍"><a href="#CORS-跨域资源共享-介绍" class="headerlink" title="CORS(跨域资源共享)介绍"></a>CORS(跨域资源共享)介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<h3 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h3><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要同时满足以下两大条件，就属于简单请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1) 请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line">（2）HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 简单请求和非简单请求的区别？</span><br><span class="line"></span><br><span class="line">   简单请求：一次请求</span><br><span class="line">   非简单请求：两次请求，在发送数据之前会先发一次请求用于做“预检”，只有“预检”通过后才再发送一次请求用于数据传输。</span><br><span class="line">* 关于“预检”</span><br><span class="line"></span><br><span class="line">- 请求方式：OPTIONS</span><br><span class="line">- “预检”其实做检查，检查如果通过则允许传输数据，检查不通过则不再发送真正想要发送的消息</span><br><span class="line">- 如何“预检”</span><br><span class="line">     &#x3D;&gt; 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过</span><br><span class="line">        Access-Control-Request-Method</span><br><span class="line">     &#x3D;&gt; 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过</span><br><span class="line">        Access-Control-Request-Headers</span><br></pre></td></tr></table></figure>
<p><strong>支持跨域，简单请求</strong></p>
<p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p>
<p><strong>支持跨域，复杂请求</strong></p>
<p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p>
<ul>
<li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li>
<li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li>
</ul>
<p>这里简单介绍一下,具体详解可以查看<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">阮一峰老师写的博客</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT json-web-token 介绍</title>
    <url>/2021/01/10/JWT-json-web-token-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>根据维基百科的定义，<strong>JSON WEB Token</strong>（<strong>JWT</strong>，读作 [/dʒɒt/]），是一种基于JSON的、用于在网络上声明某种主张的令牌（token）。JWT通常由三部分组成: 头信息（header）, 消息体（payload）和签名（signature）。</p>
<h3 id="JWT特点："><a href="#JWT特点：" class="headerlink" title="JWT特点："></a>JWT特点：</h3><ul>
<li><strong>简洁(Compact)</strong>: 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</li>
<li><strong>自包含(Self-contained)</strong>：负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>
</ul>
<a id="more"></a>
<h3 id="JWT-的原理"><a href="#JWT-的原理" class="headerlink" title="JWT 的原理"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>
<blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"姓名"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="attr">"角色"</span>: <span class="string">"管理员"</span>,</span><br><span class="line">  <span class="attr">"到期时间"</span>: <span class="string">"2021年1月1日0点0分"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p>
<p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p>
<h3 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h3><p>JWT主要包含三个部分之间用英语句号’.’隔开</p>
<p>header.payload.signature</p>
<h4 id="头部-header"><a href="#头部-header" class="headerlink" title="头部(header)"></a>头部(header)</h4><p>在header中通常包含两部分,token类型和采用的加密算法</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"alg"</span>:<span class="string">"HS256"</span>,</span><br><span class="line">    <span class="attr">"typ"</span>:<span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p>
<p>然后再将其进行base64编码得到如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json ,base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为我们有可能把token放到后面 /?token=xxx,所以我们选择urlsafe_b64encode </span></span><br><span class="line">header = base64.urlsafe_b64encode(json.dumps(&#123;<span class="string">"alg"</span>: <span class="string">"HS256"</span>,  <span class="string">"typ"</span>: <span class="string">"JWT"</span>&#125;).encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">header</span><br><span class="line"><span class="comment"># b'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9'</span></span><br></pre></td></tr></table></figure>
<h4 id="JWT的负载-Payload"><a href="#JWT的负载-Payload" class="headerlink" title="JWT的负载(Payload)"></a>JWT的负载(Payload)</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure>
<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_name"</span>:<span class="string">"admin"</span>,</span><br><span class="line">    <span class="attr">"user_id"</span>:<span class="string">"123"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们再将其用base64编码一下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json ,base64</span><br><span class="line"></span><br><span class="line">payload = base64.urlsafe_b64encode(json.dumps(&#123;</span><br><span class="line">    <span class="string">"user_name"</span>:<span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"user_id"</span>:<span class="string">"123"</span>,</span><br><span class="line">&#125;).encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">payload</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">b'eyJ1c2VyX25hbWUiOiAiYWRtaW4iLCAidXNlcl9pZCI6ICIxMjMifQ=='</span></span><br></pre></td></tr></table></figure>
<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>
<h4 id="Signature-签名"><a href="#Signature-签名" class="headerlink" title="Signature(签名)"></a>Signature(签名)</h4><p>签名其实是对JWT的头部和负载整合的一个签名验证</p>
<p>首先需要将头部和负载通过.连接起来.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sig = header+<span class="string">b'.'</span>+payload</span><br><span class="line"><span class="string">b'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJ1c2VyX25hbWUiOiAiYWRtaW4iLCAidXNlcl9pZCI6ICIxMjMifQ=='</span></span><br></pre></td></tr></table></figure>
<p>然后再对其用HMacSHA256加密算法,这里需要用到一个Key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">key = <span class="string">b'test'</span></span><br><span class="line">signature = hmac.new(key,sig,digestmod=<span class="string">'SHA256'</span>)</span><br><span class="line">sign = signature.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到字符串 注意这里得到的是字符串</span></span><br><span class="line"><span class="string">'0867e2b9ca7c5bec8a8d348487df710429324830ccd00652875a809560c28536'</span></span><br></pre></td></tr></table></figure>
<p>然后再对其使用base64位加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sign = base64.urlsafe_b64encode(signature.hexdigest().encode(<span class="string">'utf-8'</span>))   <span class="string">b'MDg2N2UyYjljYTdjNWJlYzhhOGQzNDg0ODdkZjcxMDQyOTMyNDgzMGNjZDAwNjUyODc1YTgwOTU2MGMyODUzNg=='</span></span><br></pre></td></tr></table></figure>
<p>最终我们得到JWT</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jwt = header+<span class="string">b'.'</span>+payload+<span class="string">b'.'</span>+sign</span><br><span class="line"><span class="string">b'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJ1c2VyX25hbWUiOiAiYWRtaW4iLCAidXNlcl9pZCI6ICIxMjMifQ==.MDg2N2UyYjljYTdjNWJlYzhhOGQzNDg0ODdkZjcxMDQyOTMyNDgzMGNjZDAwNjUyODc1YTgwOTU2MGMyODUzNg=='</span></span><br></pre></td></tr></table></figure>
<h3 id="JWT的使用"><a href="#JWT的使用" class="headerlink" title="JWT的使用"></a>JWT的使用</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>
<h3 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h3><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>
<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>
<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>
<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>
<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>
<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>
<p>以上借鉴了阮一峰大神的博客,<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">博客地址</a></p>
]]></content>
      <categories>
        <category>JWT</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql新建用户与授权</title>
    <url>/2021/03/26/Mysql%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h1 id="mysql创建用户"><a href="#mysql创建用户" class="headerlink" title="mysql创建用户"></a>mysql创建用户</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令:"></a>命令:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">'username'</span>@<span class="string">'host'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><ul>
<li>username: 用户名,</li>
<li>host:指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以<strong>从任意远程主机登陆</strong>，可以使用通配符<code>%</code></li>
<li>password: 密码</li>
</ul>
<a id="more"></a>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权:"></a>授权:</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> privilegesCode <span class="keyword">on</span> dbName.tableName <span class="keyword">to</span> username@host <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"password"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明:"></a>说明:</h3><ul>
<li>privilegesCode:权限,<ul>
<li>all privileges：所有权限。</li>
<li>select：读取权限。</li>
<li>delete：删除权限。</li>
<li>update：更新权限。</li>
<li>create：创建权限。</li>
<li>drop：删除数据库、数据表权限.</li>
<li>dbName:数据库名.</li>
<li>tableName:表名.</li>
<li>username@host:赋予权限的用户.</li>
<li>password:密码</li>
</ul>
</li>
</ul>
<p>加完权限需要刷新一下</p>
<p><code>flush privileges :表示刷新权限变更。</code></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
<h2 id="设置与更改用户密码"><a href="#设置与更改用户密码" class="headerlink" title="设置与更改用户密码"></a>设置与更改用户密码</h2><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令:"></a>命令:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'username'</span>@<span class="string">'host'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'newpassword'</span>);</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
<h2 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h2><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令:"></a>命令:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令:"></a>命令:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ModelForm</title>
    <url>/2020/06/05/ModelForm/</url>
    <content><![CDATA[<p>你是不是有这样的情况,有一个很多的form表单需要提交.如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login/"</span> ,<span class="attr">method</span>=<span class="string">'post'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>性别:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>爱好: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>手机号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>QQ: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>等等: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> ,<span class="attr">value</span>=<span class="string">'提交'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>你的后台就需要一个一个对表单进行验证,我们有没有简便的方法生成这些表单,然后对其进行验证呢?</p>
<p><code>django</code>的<code>ModelForm</code>就帮助我们做了这个事情.</p>
<a id="more"></a>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>新建一个<code>app01</code></p>
<p>我们先在<code>model.py</code>中添加<code>UserInfo</code>类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">'用户名'</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">'密码'</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    mobile_phone = models.CharField(verbose_name=<span class="string">'手机号'</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">'邮箱'</span>,max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>
<p>新建一个<code>forms.py</code>来存放我们的<code>ModelForm</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从models导入UserInfo</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入django的ModelForm</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="comment"># 定义一个ModelForm类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联到models中的类</span></span><br><span class="line">        model = UserInfo</span><br><span class="line">        <span class="comment"># 取所有字段,当然也可以写成:fields=['username','password']</span></span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>
<p>在<code>views.py</code>中添加视图函数导入我们的<code>form</code>类,个人比较喜欢<code>cbv</code>模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> RegisterForm</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        forms =RegisterForm()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'register.html'</span>,locals())</span><br></pre></td></tr></table></figure>
<p>在<code>tamplates</code>下新建<code>register.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% for field in forms  %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; field.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; field.label &#125;&#125;:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    &#123;&#123; field &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>urls.py</code>中添加路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^register/'</span>,views.RegistView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这样基本上一个简单的<code>ModelForm</code>示例就基本完成了,我们运行起来看一下效果:</p>
<p><img src="/images/ModelForm/image-20200605122924107.png" alt=""></p>
<p>可以看到我们这里的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">field.label就是verbose_name,</span><br><span class="line">field 他会帮我们生产一个input框</span><br><span class="line">我们按F12查看元素,会发现,field帮我们生产了这样一个东西</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">maxlength</span>=<span class="string">"32"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"id_username"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h3><p>那么如果我们想自定义展示的字段我们该怎么办呢?没关系,<code>ModelForm</code>也为我们想到了.我们可以这样:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从models导入UserInfo</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入django的ModelForm</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="comment"># 导入正则匹配类</span></span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="comment"># 定义一个ModelForm类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="comment"># 重写手机号,添加自定义校验</span></span><br><span class="line">    mobile_phone = forms.CharField(label=<span class="string">'手机号'</span>,validators=[RegexValidator(<span class="string">r'^(1[3|4|5|6|7|8|9])\d&#123;9&#125;$'</span>,<span class="string">'手机格式不正确'</span>),])</span><br><span class="line">    <span class="comment"># 修改密码展示</span></span><br><span class="line">    password = forms.CharField(widget=forms.PasswordInput,label=<span class="string">'密码'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联到models中的类</span></span><br><span class="line">        model = UserInfo</span><br><span class="line">        <span class="comment"># 取所有字段,当然也可以写成:fields=['username','password']</span></span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>
<p>再来看我们的密码就变成密码框了.</p>
<p><img src="/images/ModelForm/image-20200605124731828.png" alt=""></p>
<h3 id="新增没有的字段"><a href="#新增没有的字段" class="headerlink" title="新增没有的字段"></a>新增没有的字段</h3><p>我们在注册的时候肯定会让我们确认密码是否一致.所以我们需要再生成一个确认密码的字段,我们也可以在<code>ModelForm</code>中新增</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment"># 修改密码展示</span></span><br><span class="line">    password = forms.CharField(widget=forms.PasswordInput,label=<span class="string">'密码'</span>)</span><br><span class="line">    <span class="comment"># ModelForm 会去检测UserInfo中有没有同名 的字段,如果没有的话,会帮我们新增</span></span><br><span class="line">    re_password = forms.CharField(widget=forms.PasswordInput,label=<span class="string">'确认密码'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>看效果:</p>
<p><img src="/images/ModelForm/image-20200605130659788.png" alt=""></p>
<p>有确实是有了,但是这确认密码怎么在最后啊?</p>
<p>原来<code>ModelForm</code>是按照<code>model</code>表中的顺序来排序的,那么我们怎么样才能更改顺序呢?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment"># 修改密码展示</span></span><br><span class="line">    password = forms.CharField(widget=forms.PasswordInput,label=<span class="string">'密码'</span>)</span><br><span class="line">    <span class="comment"># ModelForm 会去检测UserInfo中有没有同名 的字段,如果没有的话,会帮我们新增</span></span><br><span class="line">    re_password = forms.CharField(widget=forms.PasswordInput,label=<span class="string">'确认密码'</span>)</span><br><span class="line">    <span class="comment"># 只需要加一个这个字段</span></span><br><span class="line">   	field_order = [<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'re_password'</span>,<span class="string">'email'</span>,<span class="string">'mobile_phone'</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="渲染前端样式"><a href="#渲染前端样式" class="headerlink" title="渲染前端样式"></a>渲染前端样式</h3><p>虽然我们已经在前台展示了出来,但是确认有点让人不忍直视,所以我们接下来给他点颜色看看</p>
<p>引入<code>bootstrap</code>中的<code>form</code>表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.register</span>&#123;</span></span><br><span class="line">            width: 600px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"register"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">        &#123;% for field in forms  %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; field.id_for_label &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>&#123;&#123; field.label &#125;&#125;:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">&#123;#      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span>#&#125;</span><br><span class="line">           &#123;&#123; field &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>看一下效果:</p>
<p><img src="/images/ModelForm/image-20200605132741123.png" alt=""></p>
<p>虽然像那么点样子了,但是总感觉差一点.</p>
<p>区别就在于别人有<code>class=&quot;form-control&quot;</code>样式而我们没有,所以我们在后端给他加上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;#      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span>#&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"mobile_phone"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"id_mobile_phone"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>froms</code>中的<code>RegisterForm</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">     <span class="comment"># 重写手机号,添加自定义校验</span></span><br><span class="line">  mobile_phone = forms.CharField(label=<span class="string">'手机号'</span>,validators=[RegexValidator(<span class="string">r'^(1[3|4|5|6|7|8|9])\d&#123;9&#125;$'</span>,<span class="string">'手机格式不正确'</span>),]</span><br><span class="line">                                 widget=forms.TextInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control'</span>,<span class="string">'placeholder'</span>:<span class="string">'请输入手机号'</span>&#125;))</span><br><span class="line">  <span class="comment"># 修改密码展示</span></span><br><span class="line">  password = forms.CharField(widget=forms.PasswordInput,label=<span class="string">'密码'</span>)</span><br><span class="line">  <span class="comment"># ModelForm 会去检测UserInfo中有没有同名 的字段,如果没有的话,会帮我们新增</span></span><br><span class="line">  re_password = forms.CharField(widget=forms.PasswordInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control'</span>,<span class="string">'placeholder'</span>:<span class="string">'请输入确认密码'</span>&#125;),label=<span class="string">'确认密码'</span>)</span><br><span class="line">  field_order = [<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'re_password'</span>,<span class="string">'email'</span>,<span class="string">'mobile_phone'</span>]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>其实每个字段都是一个<code>input</code>框,所以我们只要在<code>widget</code>中添加<code>attrs={&#39;class&#39;:&#39;form-control&#39;,&#39;placeholder&#39;:&#39;请输入确认密码&#39;}</code>即可</p>
<p><img src="/images/ModelForm/image-20200605133538323.png" alt=""></p>
<p>但是这样一个一个添加也麻烦了,有没有简单点的办法,答案肯定是有的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="comment"># 重写__ini__方法,继承父类,改写自身的__init__方法</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">       super().__init__(*args,**kwargs)</span><br><span class="line">       <span class="keyword">for</span> name,field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">           <span class="comment"># 为每个字段添加样式</span></span><br><span class="line">           field.widget.attrs[<span class="string">'class'</span>] = <span class="string">'form-control'</span></span><br><span class="line">           <span class="comment"># 为每个字段添加placeholder</span></span><br><span class="line">           field.widget.attrs[<span class="string">'placeholder'</span>] = <span class="string">'请输入&#123;&#125;'</span>.format(field.label)</span><br></pre></td></tr></table></figure>
<p>这样我就不需要在其他地方多写了,可以把之前加的统统去掉</p>
<p>查看效果:</p>
<p><img src="/images/ModelForm/image-20200605134718256.png" alt=""></p>
<p>虽然看上去没什么大的变化但是,我们确实在后端添加了样式,因为这只是演示.所以并不是很好,不要在意这些细节</p>
<h3 id="校验字段"><a href="#校验字段" class="headerlink" title="校验字段"></a>校验字段</h3><p>我们通过<code>ajax</code>获取所有的表单数据,通过<code>post</code>请求传递给后台</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    		<span class="comment">//通过这个可以获取所有的表单数据</span></span><br><span class="line">            <span class="keyword">var</span> formDate = $(<span class="string">'#regForm'</span>).serialize();</span><br><span class="line">            <span class="built_in">console</span>.log(formDate);</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">              url:<span class="string">'/register/'</span>,</span><br><span class="line">              type:<span class="string">'POST'</span>,</span><br><span class="line">              data: formDate,</span><br><span class="line">              dataType:<span class="string">'json'</span>,</span><br><span class="line">              success:<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(callback)</span><br><span class="line">              &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>后台只需要把<code>reques.POST</code>传给<code>ModelForm</code>即可:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">    print(request.POST)</span><br><span class="line">    forms = account.RegisterForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> forms.is_valid():</span><br><span class="line">        <span class="comment"># 通过直接保存</span></span><br><span class="line">        froms.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<p>然后我们就需要自己定义钩子函数,为每个字段做校验规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="comment"># 当然之前写的也是会生效的</span></span><br><span class="line"> mobile_phone = forms.CharField(label=<span class="string">'手机号'</span>,validators=[RegexValidator(<span class="string">r'^(1[3|4|5|6|7|8|9])\d&#123;9&#125;$'</span>,<span class="string">'手机格式不正确'</span>),])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_username</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 钩子函数 一下为校验内容</span></span><br><span class="line">    username = self.cleaned_data[<span class="string">'username'</span>]</span><br><span class="line">    exists = UserInfo.objects.filter(username=username).exists()</span><br><span class="line">    <span class="keyword">if</span> exists:</span><br><span class="line">        self.add_error</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_re_password</span><span class="params">(self)</span>:</span></span><br><span class="line">    password = self.cleaned_data[<span class="string">'password'</span>]</span><br><span class="line">    re_password = self.cleaned_data[<span class="string">'re_password'</span>]</span><br><span class="line">    <span class="keyword">if</span> password!=re_password:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'两次密码不一致'</span>)</span><br><span class="line">    <span class="keyword">return</span> re_password</span><br></pre></td></tr></table></figure>
<p><code>ModelForm</code>的基本使用就讲到这里.至于前端的展示什么的,这里就不过多的展开了.</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>ModelForm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编程技巧</title>
    <url>/2020/07/03/Python%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>分享一下python编程的技巧,在阅读此内容时,请确保你已经掌握了python的基本用法,</p>
<a id="more"></a>
<h2 id="筛选列表-字典"><a href="#筛选列表-字典" class="headerlink" title="筛选列表,字典"></a>筛选列表,字典</h2><h3 id="列表筛选"><a href="#列表筛选" class="headerlink" title="列表筛选"></a>列表筛选</h3><p>一般都是用for循环加if 来判断如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment"># 模拟数据</span></span><br><span class="line">data = [randint(<span class="number">-10</span>,<span class="number">10</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i &gt;=<span class="number">0</span>:</span><br><span class="line">        result.append(i)</span><br><span class="line">result</span><br><span class="line">out:[<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>我们可以用<code>filter</code>函数</p>
<p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象</p>
<p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = filter(<span class="keyword">lambda</span> x:x&gt;=<span class="number">0</span>,data)</span><br><span class="line"><span class="comment"># 如果要转换为列表，可以使用 list() 来转换。</span></span><br><span class="line">list(result)</span><br><span class="line">out:[<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>我们也可以使用列表生成式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x&gt;=<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>那到底哪个更快呢?我们可以用<code>%timeit</code>来测一下,发现是<code>filter</code>函数更快</p>
<p><img src="/images/Python%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/image-20200703232926291.png" alt="image-20200703232926291"></p>
<h3 id="字典筛选"><a href="#字典筛选" class="headerlink" title="字典筛选"></a>字典筛选</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟一个&#123;学号:分数&#125;的字典</span></span><br><span class="line">data=&#123;k:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)&#125;</span><br><span class="line">data</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">66</span>, <span class="number">2</span>: <span class="number">100</span>, <span class="number">3</span>: <span class="number">67</span>, <span class="number">4</span>: <span class="number">60</span>, <span class="number">5</span>: <span class="number">70</span>, <span class="number">6</span>: <span class="number">99</span>, <span class="number">7</span>: <span class="number">71</span>, <span class="number">8</span>: <span class="number">95</span>, <span class="number">9</span>: <span class="number">88</span>, <span class="number">10</span>: <span class="number">69</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选出大于90的</span></span><br><span class="line">&#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> data.items() <span class="keyword">if</span> v&gt;=<span class="number">90</span>&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">100</span>, <span class="number">6</span>: <span class="number">99</span>, <span class="number">8</span>: <span class="number">95</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名元组"><a href="#命名元组" class="headerlink" title="命名元组"></a>命名元组</h2><p>我们有一个固定格式的数据,如:</p>
<p>学生信息:(姓名,年龄,性别,邮箱),而数据量很大,为了减少开销,我们可以用元组表示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">'小明'</span>,<span class="number">15</span>,<span class="string">'男'</span>,<span class="string">'xiaoming@qq.com'</span>)</span><br><span class="line">(<span class="string">'小里'</span>,<span class="number">11</span>,<span class="string">'男'</span>,<span class="string">'xiaolig@qq.com'</span>)</span><br><span class="line">(<span class="string">'小话'</span>,<span class="number">13</span>,<span class="string">'女'</span>,<span class="string">'xiaohuag@qq.com'</span>)</span><br><span class="line">(<span class="string">'小图'</span>,<span class="number">14</span>,<span class="string">'男'</span>,<span class="string">'xiaotug@qq.com'</span>)</span><br><span class="line">data= (<span class="string">'小明'</span>,<span class="number">15</span>,<span class="string">'男'</span>,<span class="string">'xiaoming@qq.com'</span>)</span><br><span class="line">我们需要访问的话会使用索引index来访问,但是如果用</span><br><span class="line">姓名:data[<span class="number">0</span>],年龄data[<span class="number">1</span>]这种的话大大降低了可读性</span><br></pre></td></tr></table></figure>
<p>1.我们可以用全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NAME = <span class="number">0</span></span><br><span class="line">AGE = <span class="number">1</span></span><br><span class="line">GENDER = <span class="number">2</span></span><br><span class="line">EMAIL = <span class="number">3</span></span><br><span class="line"><span class="comment"># 我们也可以用拆包的形式</span></span><br><span class="line"><span class="comment"># NAME,AGE,GENDER,EMAIL = range(4)</span></span><br><span class="line">data = (<span class="string">'小明'</span>, <span class="number">15</span>, <span class="string">'男'</span>, <span class="string">'xiaoming@qq.com'</span>)</span><br><span class="line">data[NAME]</span><br></pre></td></tr></table></figure>
<p>2.也可以用<code>namedtuple</code>来替换元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="comment"># 定义一个namedtuple类型Student，并包含name，age,gender,email属性。</span></span><br><span class="line">Student = namedtuple(<span class="string">'Student'</span>,[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'gemder'</span>,<span class="string">'email'</span>])</span><br><span class="line"><span class="comment"># 创建一个Student对象</span></span><br><span class="line"><span class="comment"># student = Student('小明', 15, '男', 'xiaoming@qq.com')</span></span><br><span class="line"><span class="comment"># 我也可以使用关键字传参</span></span><br><span class="line"><span class="comment"># student=Student(name='小明', age=15, gemder='男', email='xiaoming@qq.com')</span></span><br><span class="line"><span class="comment"># 也可以传入一个列表,这里注意需要使用"_make"方法</span></span><br><span class="line">student = Student._make([<span class="string">'小明'</span>, <span class="number">15</span>, <span class="string">'男'</span>, <span class="string">'xiaoming@qq.com'</span>])</span><br><span class="line">student</span><br><span class="line">out:Student(name=<span class="string">'小明'</span>, age=<span class="number">15</span>, gemder=<span class="string">'男'</span>, email=<span class="string">'xiaoming@qq.com'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这样的好处是,我们可以直接用属性来访问</span></span><br><span class="line">student.name</span><br><span class="line">out:<span class="string">'小明'</span></span><br></pre></td></tr></table></figure>
<h2 id="统计列表或字典出现的次数"><a href="#统计列表或字典出现的次数" class="headerlink" title="统计列表或字典出现的次数"></a>统计列表或字典出现的次数</h2><p>我们希望统计一下列表中,每个元素出现的个数,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment"># 用randint模拟</span></span><br><span class="line">data = [randint(<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">data</span><br><span class="line">out:[<span class="number">13</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure>
<p>第一种做法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> result:</span><br><span class="line">        result[i]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[i]=<span class="number">1</span></span><br><span class="line">result</span><br><span class="line">out:&#123;<span class="number">13</span>: <span class="number">5</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">14</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">2</span>, <span class="number">11</span>: <span class="number">2</span>, <span class="number">19</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">17</span>: <span class="number">1</span>, <span class="number">18</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 如果我们要统计前3个的话,就要对字典进行排序,我们可以使用内置函数sorted,将字典转化为元组</span></span><br><span class="line">new_tuple = [(v,k)<span class="keyword">for</span> k,v <span class="keyword">in</span> result.items()]</span><br><span class="line"><span class="comment"># 然后用sorted</span></span><br><span class="line">sorted(new_tuple)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">14</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">17</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">18</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">19</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">11</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="number">13</span>)]</span><br><span class="line"><span class="comment"># 我们也可以用zip拼接</span></span><br><span class="line">new_tuple_1 = zip(result.values(),result.keys())</span><br><span class="line">sorted(new_tuple_1)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">14</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">17</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">18</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">19</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">11</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="number">13</span>)]</span><br><span class="line"><span class="comment"># 也可以用sorted函数内置的key来指定比较</span></span><br><span class="line"><span class="comment"># 第一个参数为传入的数据,第二个key来指定用哪个值作为比较</span></span><br><span class="line">sorted(result.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">14</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">19</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">10</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">17</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">18</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">11</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="number">13</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure>
<p>第二种,使用<code>collections</code>的<code>Counter</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter(data)</span><br><span class="line">Counter(&#123;<span class="number">13</span>: <span class="number">5</span>,</span><br><span class="line">         <span class="number">5</span>: <span class="number">3</span>,</span><br><span class="line">         <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">14</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">6</span>: <span class="number">2</span>,</span><br><span class="line">         <span class="number">11</span>: <span class="number">2</span>,</span><br><span class="line">         <span class="number">19</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">3</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">10</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">17</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="number">18</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># 我们如果要取最多的话只需要使用most_common</span></span><br><span class="line"><span class="comment"># 表示取出现次数最多的前三个</span></span><br><span class="line">c.most_common(<span class="number">3</span>)</span><br><span class="line">[(<span class="number">13</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">6</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="查找公共键"><a href="#查找公共键" class="headerlink" title="查找公共键"></a>查找公共键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">需求:</span></span><br><span class="line"><span class="string">现有3个字典,需要查找出在三个字典中公共出现的键</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">dict_1 = &#123;k:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> k <span class="keyword">in</span> sample(<span class="string">'abcdefg'</span>,randint(<span class="number">1</span>,<span class="number">7</span>))&#125;</span><br><span class="line">dict_2 = &#123;k:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> k <span class="keyword">in</span> sample(<span class="string">'abcdefg'</span>,randint(<span class="number">1</span>,<span class="number">7</span>))&#125;</span><br><span class="line">dict_3 = &#123;k:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> k <span class="keyword">in</span> sample(<span class="string">'abcdefg'</span>,randint(<span class="number">1</span>,<span class="number">7</span>))&#125;</span><br><span class="line">dict_1</span><br><span class="line">&#123;<span class="string">'e'</span>: <span class="number">68</span>, <span class="string">'c'</span>: <span class="number">73</span>, <span class="string">'b'</span>: <span class="number">68</span>, <span class="string">'f'</span>: <span class="number">80</span>&#125;</span><br><span class="line">dict_2</span><br><span class="line">&#123;<span class="string">'e'</span>: <span class="number">99</span>, <span class="string">'g'</span>: <span class="number">74</span>, <span class="string">'c'</span>: <span class="number">96</span>, <span class="string">'b'</span>: <span class="number">78</span>&#125;</span><br><span class="line">dict_3</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="number">90</span>, <span class="string">'g'</span>: <span class="number">93</span>&#125;</span><br></pre></td></tr></table></figure>
<p>第一种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict_1.keys():</span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">in</span> dict_2 <span class="keyword">and</span> k <span class="keyword">in</span> dict_3:</span><br><span class="line">        result.append(k)</span><br><span class="line">result</span><br><span class="line">[<span class="string">'b'</span>]</span><br></pre></td></tr></table></figure>
<p>这种的话 如果我有很多个字典,我就要一个一个判断</p>
<p>第二种:我们可以用集合的交集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1.keys()&amp; dict_2.keys() &amp;dict_3.keys()</span><br><span class="line"><span class="comment"># 如果有多个 我们可以用</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">reduce() 函数会对参数序列中元素进行累积。</span></span><br><span class="line"><span class="string">函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 在python3中已将reduce移除,我们需要在functools中导入</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">reduce(<span class="keyword">lambda</span> a,b:a&amp;b,map(dict.keys,[dict_1,dict_2,dict_3]))</span><br><span class="line">&#123;<span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何实现历史记录功能"><a href="#如何实现历史记录功能" class="headerlink" title="如何实现历史记录功能"></a>如何实现历史记录功能</h2><p>需求:记录用户的每次输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment"># 定义一个deque 他是一个双端循环队列</span></span><br><span class="line"><span class="comment"># deque(可迭代对象, 长度)</span></span><br><span class="line">q = deque([], <span class="number">5</span>)</span><br><span class="line">q.append(<span class="number">1</span>)</span><br><span class="line">q.append(<span class="number">2</span>)</span><br><span class="line">q.append(<span class="number">3</span>)</span><br><span class="line">q.append(<span class="number">4</span>)</span><br><span class="line">q.append(<span class="number">5</span>)</span><br><span class="line">q.append(<span class="number">6</span>)</span><br><span class="line">q</span><br><span class="line">deque([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># 其实内部实现了一个判断列表长度,判断如果长度太长就把左边先进的剔除掉</span></span><br></pre></td></tr></table></figure>
<h2 id="迭代多个可迭代对象"><a href="#迭代多个可迭代对象" class="headerlink" title="迭代多个可迭代对象"></a>迭代多个可迭代对象</h2><p>需求:</p>
<ol>
<li>有一个班的,希望得到语文,数学,英语的总分</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">chinese = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">30</span>)]</span><br><span class="line">math = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">30</span>)]</span><br><span class="line">enlish = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">30</span>)]</span><br><span class="line"><span class="comment"># 我们可以使用zip函数</span></span><br><span class="line">total = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(chinese, math, enlish):</span><br><span class="line">    total.append(sum(i))</span><br><span class="line">total</span><br></pre></td></tr></table></figure>
<ol>
<li>多个班,希望得到分数超过90的人数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">c1 = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">30</span>)]</span><br><span class="line">c2 = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">33</span>)]</span><br><span class="line">c3 = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">c4 = [randint(<span class="number">60</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">31</span>)]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="comment"># 也可以直接相加,两个效率是一样的</span></span><br><span class="line"><span class="comment"># for i in c1+c2+c3+c4:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain(c1 ,c2 , c3 , c4):</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">90</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">count</span><br></pre></td></tr></table></figure>
<h2 id="拆分多个分隔符的字符串"><a href="#拆分多个分隔符的字符串" class="headerlink" title="拆分多个分隔符的字符串"></a>拆分多个分隔符的字符串</h2><p>需求:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">有一个字符串包含多个分隔符,如:</span><br><span class="line">s = <span class="string">'ads;cd|efesada,fjasd,fasd\tfasd;feas,asdas:fefa\tffgg'</span></span><br></pre></td></tr></table></figure>
<ol>
<li>使用<code>split</code>方法,进行多次</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'ads;cd|efesada,fjasd,fasd\tfasd;feas,asdas:fefa\tffgg'</span></span><br><span class="line"><span class="comment"># 我们可以对s进行split()</span></span><br><span class="line">res = s.split(<span class="string">';'</span>)</span><br><span class="line">res</span><br><span class="line">[<span class="string">'ads'</span>, <span class="string">'cd|efesada,fjasd,fasd\tfasd'</span>, <span class="string">'feas,asdas:fefa\tffgg'</span>]</span><br><span class="line"><span class="comment"># 然后再对res进行一次split()</span></span><br><span class="line">[i.split(<span class="string">'|'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br><span class="line">[[<span class="string">'ads'</span>], [<span class="string">'cd'</span>, <span class="string">'efesada,fjasd,fasd\tfasd'</span>], [<span class="string">'feas,asdas:fefa\tffgg'</span>]]</span><br><span class="line"><span class="comment"># 这并不是我们想要的结果,我们可以用变量t来接收</span></span><br><span class="line">t=[]</span><br><span class="line">[t.extend(i.split(<span class="string">'|'</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br><span class="line">t</span><br><span class="line">[<span class="string">'ads'</span>, <span class="string">'cd'</span>, <span class="string">'efesada,fjasd,fasd\tfasd'</span>, <span class="string">'feas,asdas:fefa\tffgg'</span>]</span><br><span class="line"><span class="comment"># 然后再对其进行split()</span></span><br><span class="line"><span class="comment"># 所以我们可以定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mySplit</span><span class="params">(s,separators)</span>:</span></span><br><span class="line">    <span class="comment"># 这里需要把传进来的字符串变成列表</span></span><br><span class="line">    res=[s]</span><br><span class="line">    <span class="keyword">for</span> separator <span class="keyword">in</span> separators:</span><br><span class="line">        t = []</span><br><span class="line">        [t.extend(i.split(separator)) <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br><span class="line">        res =t</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">s = <span class="string">'ads;cd|efesada,fjasd,fasd\tfasd;feas,asdas:fefa\tffgg'</span></span><br><span class="line">result = mySplit(s,<span class="string">';,|\t'</span>)</span><br><span class="line">result</span><br><span class="line">[<span class="string">'ads'</span>, <span class="string">'cd'</span>, <span class="string">'efesada'</span>, <span class="string">'fjasd'</span>, <span class="string">'fasd'</span>, <span class="string">'fasd'</span>, <span class="string">'feas'</span>, <span class="string">'asdas:fefa'</span>, <span class="string">'ffgg'</span>]</span><br></pre></td></tr></table></figure>
<ol>
<li>使用<code>re.split</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">'ads;cd|efesada,fjasd,fasd\tfasd;feas,asdas:fefa\tffgg'</span></span><br><span class="line">re.split(<span class="string">'[;|,\t]+'</span>,s)</span><br><span class="line">[<span class="string">'ads'</span>, <span class="string">'cd'</span>, <span class="string">'efesada'</span>, <span class="string">'fjasd'</span>, <span class="string">'fasd'</span>, <span class="string">'fasd'</span>, <span class="string">'feas'</span>, <span class="string">'asdas:fefa'</span>, <span class="string">'ffgg'</span>]</span><br></pre></td></tr></table></figure>
<h2 id="进行字符串对齐"><a href="#进行字符串对齐" class="headerlink" title="进行字符串对齐"></a>进行字符串对齐</h2><ol>
<li>字符串方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">'aaa'</span></span><br><span class="line"><span class="comment"># ljust 左对齐,第二个参数为填充</span></span><br><span class="line">s.ljust(<span class="number">20</span>,<span class="string">'#'</span>)</span><br><span class="line"><span class="string">'aaa#################'</span></span><br><span class="line"><span class="comment"># 右对齐</span></span><br><span class="line">s.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="string">'                 aaa'</span></span><br><span class="line"><span class="comment"># 居中对齐</span></span><br><span class="line">s.center(<span class="number">20</span>)</span><br><span class="line"><span class="string">'        aaa         '</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>format</code>方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#左对齐</span></span><br><span class="line">format(s,<span class="string">'&lt;20'</span>)</span><br><span class="line"><span class="string">'aaa                 '</span></span><br><span class="line"><span class="comment">#右对齐</span></span><br><span class="line">format(s,<span class="string">'&gt;20'</span>)</span><br><span class="line"><span class="string">'                 aaa'</span></span><br><span class="line"><span class="comment">#居中对齐</span></span><br><span class="line">format(s,<span class="string">'^20'</span>)</span><br><span class="line"><span class="string">'        aaa         '</span></span><br></pre></td></tr></table></figure>
<h2 id="如何设置文件缓冲"><a href="#如何设置文件缓冲" class="headerlink" title="如何设置文件缓冲"></a>如何设置文件缓冲</h2><ul>
<li>全缓冲:<code>open</code>函数的bufering设置为大于1的整数n,n为缓冲区大小</li>
<li>行缓冲:<code>open</code>函数的buffering设置为1,当有换行时写入</li>
<li>无缓冲:<code>open</code>函数的buffering设置为0,实时写入</li>
</ul>
<h2 id="如何使用临时文件"><a href="#如何使用临时文件" class="headerlink" title="如何使用临时文件"></a>如何使用临时文件</h2><p>你需要在程序执行时创建一个临时文件或目录，并希望使用完之后可以自动销毁掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> TemporaryFile</span><br><span class="line"></span><br><span class="line">f = TemporaryFile(mode=<span class="string">'w+t'</span>)</span><br><span class="line">f.write(<span class="string">'abcdef'</span> * <span class="number">1000</span>)</span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">data = f.read(<span class="number">100</span>)</span><br><span class="line">data</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> TemporaryFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> TemporaryFile(<span class="string">'w+t'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># Read/write to the file</span></span><br><span class="line">    f.write(<span class="string">'Hello World\n'</span>)</span><br><span class="line">    f.write(<span class="string">'Testing\n'</span>)</span><br><span class="line">    <span class="comment"># Seek back to beginning and read the data</span></span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    data = f.read()</span><br></pre></td></tr></table></figure>
<p><code>TemporaryFile</code>是匿名的文件,如果你需要有名字的文件,可以使用<code>NamedTemporaryFile</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</span><br><span class="line"><span class="keyword">with</span> NamedTemporaryFile(<span class="string">'w+t'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">'filename is:'</span>, f.name)</span><br><span class="line">    </span><br><span class="line">filename <span class="keyword">is</span>: C:\Users\Tiger\AppData\Local\Temp\tmphjupdmz8</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这里，被打开文件的 f.name 属性包含了该临时文件的文件名。 当你需要将文件名传递给其他代码来打开这个文件的时候，这个就很有用了。 和 TemporaryFile() 一样，结果文件关闭时会被自动删除掉。 如果你不想这么做，可以传递一个关键字参数 delete=False 即可</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h2 id="如何在一个现有类中-添加自己的逻辑"><a href="#如何在一个现有类中-添加自己的逻辑" class="headerlink" title="如何在一个现有类中,添加自己的逻辑"></a>如何在一个现有类中,添加自己的逻辑</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">比如,我已经有一个tuple类,这个类可以把列表变成元组</span><br><span class="line">tuple([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="string">'abc'</span>, [<span class="string">'x'</span>, <span class="string">'u'</span>], <span class="number">3</span>]])</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="string">'abc'</span>, [<span class="string">'x'</span>, <span class="string">'u'</span>], <span class="number">3</span>],)</span><br><span class="line">而我们希望得到过滤掉字符串已经小于<span class="number">0</span>的数</span><br></pre></td></tr></table></figure>
<p>我们可以重写<code>new</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">intTuple</span><span class="params">(tuple)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, iterable)</span>:</span></span><br><span class="line">        g = [i <span class="keyword">for</span> i <span class="keyword">in</span> iterable <span class="keyword">if</span> isinstance(i, int) <span class="keyword">and</span> i &gt; <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls,g)</span><br><span class="line">t = intTuple([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="string">'abc'</span>, [<span class="string">'x'</span>, <span class="string">'u'</span>], <span class="number">3</span>])</span><br><span class="line">print(t)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h2 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h2><p>实现一个新的上下文管理器的最简单的方法就是使用 <code>contexlib</code> 模块中的 <code>@contextmanager</code> 装饰器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_sqlite3</span><span class="params">(db)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(db)</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">yield</span> conn</span><br><span class="line">    print(<span class="string">'close'</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> conn_sqlite3(<span class="string">'db.sqlite3'</span>) <span class="keyword">as</span>  conn:</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select * from main.api_userunfo'</span>)</span><br><span class="line">    result = cur.fetchall()</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>在函数 <code>conn_sqlite3</code> 中，<code>yield</code> 之前的代码会在上下文管理器中作为 <code>__enter__()</code> 方法执行， 所有在 <code>yield</code> 之后的代码会作为 <code>__exit__()</code> 方法执行。 如果出现了异常，异常会在yield语句那里抛出。</p>
<p>当然也可以在类中用<code>__enter__()</code>方法 跟 <code>__exit__()</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">connSqlite3</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,db)</span>:</span></span><br><span class="line">        self.db =db</span><br><span class="line">        self.conn=<span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'start'</span>)</span><br><span class="line">        self.conn = sqlite3.connect(self.db)</span><br><span class="line">        <span class="keyword">return</span> self.conn</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'close'</span>)</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connSqlite3(<span class="string">'db.sqlite3'</span>) <span class="keyword">as</span>  conn:</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select * from main.api_userunfo'</span>)</span><br><span class="line">    result = cur.fetchall()</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python虚拟环境使用方法</title>
    <url>/2020/06/01/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>python 的虚拟环境可以为一个 python 项目提供独立的解释环境、依赖包等资源，既能够很好的隔离不同项目使用不同 python 版本带来的冲突，而且还能方便项目的发布。</p>
<a id="more"></a>
<h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virtualenv [虚拟环境名称] </span><br><span class="line">virtualenv venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不想使用系统的包,加上–no-site-packeages参数</span></span><br><span class="line">virtualenv  --no-site-packages 创建路径名</span><br></pre></td></tr></table></figure>
<h3 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h3><p>linux下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> venv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./bin/activate</span></span><br></pre></td></tr></table></figure>
<p>Windows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> venv</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> Scripts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> activate.bat</span></span><br><span class="line">(venv)\venv\Scripts&gt;</span><br></pre></td></tr></table></figure>
<h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><p>进入环境后，一切操作和正常使用python一样 安装包使用<code>pip install 包</code></p>
<h3 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h3><p>linux:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deactivate</span></span><br></pre></td></tr></table></figure>
<p>Windows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(venv)\venv\Scripts&gt; deactivate.bat</span><br></pre></td></tr></table></figure>
<h3 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h3><p>没有使用virtualenvwrapper前，直接删除venv文件夹来删除环境</p>
<h2 id="Virtualenvwrapper"><a href="#Virtualenvwrapper" class="headerlink" title="Virtualenvwrapper"></a>Virtualenvwrapper</h2><blockquote>
<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做： - 将所有虚拟环境整合在一个目录下 - 管理（新增，删除，复制）虚拟环境 - 快速切换虚拟环境</p>
</blockquote>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"><span class="comment"># on macOS / Linux</span></span><br><span class="line">pip install --user virtualenvwrapper</span><br><span class="line"><span class="comment"># then make Bash load virtualenvwrapper automatically</span></span><br><span class="line">echo <span class="string">"source virtualenvwrapper.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定版本</span></span><br><span class="line"><span class="comment"># --python=python版本的python.exe路径 虚拟环境名称</span></span><br><span class="line"><span class="comment"># on macOS/Linux:</span></span><br><span class="line">mkvirtualenv --python=python3<span class="number">.6</span> venv</span><br><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">mkvirtualenv --python=python3 venv</span><br></pre></td></tr></table></figure>
<h3 id="激活环境-1"><a href="#激活环境-1" class="headerlink" title="激活环境"></a>激活环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workon <span class="comment">#列出虚拟环境列表</span></span><br><span class="line">workon [venv] <span class="comment">#切换环境</span></span><br></pre></td></tr></table></figure>
<h3 id="退出环境-1"><a href="#退出环境-1" class="headerlink" title="退出环境"></a>退出环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h3 id="删除环境-1"><a href="#删除环境-1" class="headerlink" title="删除环境"></a>删除环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rmvirtualenv venv</span><br></pre></td></tr></table></figure>
<h3 id="其他有用指令"><a href="#其他有用指令" class="headerlink" title="其他有用指令"></a>其他有用指令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze <span class="comment">#查看当前安装库版本</span></span><br><span class="line"><span class="comment">#创建 requirements.txt 文件，其中包含了当前环境中所有包及 各自的版本的简单列表</span></span><br><span class="line"><span class="comment">#保持部署相同，一键安装所有包</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip freeze &gt; requirements.txt </span><br><span class="line">lsvirtualenv    <span class="comment">#列举所有的环境</span></span><br><span class="line">cdvirtualenv    <span class="comment">#导航到当前激活的虚拟环境的目录中，相当于pushd 目录</span></span><br><span class="line">cdsitepackages   <span class="comment"># 和上面的类似，直接进入到 site-packages 目录</span></span><br><span class="line">lssitepackages     <span class="comment">#显示 site-packages 目录中的内容</span></span><br></pre></td></tr></table></figure>
<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><blockquote>
<p>conda可以直接创建不同python版本的虚拟环境。前面讲的virtualenv只是指定创建不同python版本的虚拟环境，前提是你的电脑上已经安装了不同版本的python,与conda相比没有conda灵活。</p>
</blockquote>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>需要下载anaconda才可以使用conda工具</p>
<h3 id="创建虚拟环境-1"><a href="#创建虚拟环境-1" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>创建不同的python版本，直接写出版本号就好了，还可以同时安装想要的库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 2.7  </span></span><br><span class="line">$ conda create -n venv python=<span class="number">2.7</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.4  </span></span><br><span class="line">$ conda create -n venv python=<span class="number">3.4</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.5  </span></span><br><span class="line">$ conda create -n venv python=<span class="number">3.5</span></span><br></pre></td></tr></table></figure>
<h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#on windows</span><br><span class="line">activate venv</span><br><span class="line">#on linux</span><br><span class="line">source activate venv</span><br></pre></td></tr></table></figure>
<h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#on windows</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment">#on linux</span></span><br><span class="line">source deactivate</span><br></pre></td></tr></table></figure>
<h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除一个已有环境</span></span><br><span class="line">conda remove --name venv --all</span><br></pre></td></tr></table></figure>
<h3 id="其他有用指令-1"><a href="#其他有用指令-1" class="headerlink" title="其他有用指令"></a>其他有用指令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出系统存在虚拟环境</span></span><br><span class="line">conda info -e</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前环境下已安装的包</span></span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个指定环境的已安装包</span></span><br><span class="line">conda list -n venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找package信息</span></span><br><span class="line">conda search numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装package</span></span><br><span class="line">conda install -n venv numpy</span><br><span class="line"><span class="comment"># 如果不用-n指定环境名称，则被安装在当前激活环境</span></span><br><span class="line"><span class="comment"># 也可以通过-c指定通过某个channel安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新package</span></span><br><span class="line">conda update -n venv numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除package</span></span><br><span class="line">conda remove -n venv numpy</span><br></pre></td></tr></table></figure>
<h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><blockquote>
<p>pipenv是Python官方推荐的包管理工具。 它综合了 virtualenv , pip 和 pyenv 三者的功能。能够自动为项目创建和管理虚拟环境。如果你使用过requests库，就一定会爱上这个库，因为是同一个大神出品。 pipenv使用 Pipfile 和 Pipfile.lock 来管理依赖包，并且在使用pipenv添加或删除包时，自动维护 Pipfile 文件，同时生成 Pipfile.lock 来锁定安装包的版本和依赖信息，避免构建错误。相比pip需要手动维护requirements.txt 中的安装包和版本，具有很大的进步。</p>
</blockquote>
<h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure>
<h3 id="创建虚拟环境-2"><a href="#创建虚拟环境-2" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd myproject</span><br><span class="line">$ pipenv install <span class="comment"># 创建环境</span></span><br><span class="line">$ pipenv install requests <span class="comment"># 或者直接安装库</span></span><br></pre></td></tr></table></figure>
<p>如果不存在pipfile,会生成一个pipfile，并且如果有的库添加会自动编辑该文件，不会我们手动更新requirements.txt文件了。</p>
<h3 id="激活Pipenv-Shell"><a href="#激活Pipenv-Shell" class="headerlink" title="激活Pipenv Shell"></a>激活Pipenv Shell</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pipenv shell</span><br><span class="line">$ python --version</span><br></pre></td></tr></table></figure>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>不过这个据说还不是很完善,看个人喜爱了.</p>
<p>参考:<a href="https://zhuanlan.zhihu.com/p/60647332" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/60647332</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>RBAC扩展</title>
    <url>/2019/06/01/RBAC%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>上次我们做了一个简易的RBAC 模型.但是这样完全不能满足我们的需求,所以这次扩展了很多</p>
<a id="more"></a>
<p>在权限表里新增两个字段,新增一张权限组表 (rbac/models.py):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""权限表"""</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">37</span>,verbose_name=<span class="string">'权限名'</span>)</span><br><span class="line">    url = models.CharField(max_length=<span class="number">37</span>,verbose_name=<span class="string">'链接'</span>)</span><br><span class="line">    action_list = [(<span class="number">1</span>,<span class="string">'add'</span>),(<span class="number">2</span>,<span class="string">'delete'</span>),(<span class="number">3</span>,<span class="string">'update'</span>),(<span class="number">4</span>,<span class="string">'select'</span>)]</span><br><span class="line">    action = models.IntegerField(choices=action_list,verbose_name=<span class="string">'动作'</span>,default=<span class="number">4</span>)</span><br><span class="line">    group =models.ForeignKey(to=<span class="string">'PermissionGroup'</span>,on_delete=models.CASCADE,default=<span class="string">'1'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'权限表'</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionGroup</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'权限组名'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'权限组'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure>
<p>这样可以使权限更细分化,方便使用</p>
<p>重写RBAC注册(rbac/service/register_rbac.py):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册权限url列表到session</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def rbac_login(request,user):</span></span><br><span class="line"><span class="string">    permission_list = []</span></span><br><span class="line"><span class="string">    request.session['user_id'] = user.pk</span></span><br><span class="line"><span class="string">    permissions = user.roles.all().values("permission__url").distinct()</span></span><br><span class="line"><span class="string">    for permission in permissions:</span></span><br><span class="line"><span class="string">        permission_list.append(permission['permission__url'])</span></span><br><span class="line"><span class="string">    request.session['permission_list'] = permission_list</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rbac_login</span><span class="params">(request,user)</span>:</span></span><br><span class="line">    <span class="comment"># 权限字典 如:&#123;'权限管理': &#123;'urls': ['/permission/',  '/permission/update/(/d+)'], 'actions': [1, 4, 2, 3]&#125;, &#125;</span></span><br><span class="line"></span><br><span class="line">    permission_dict = &#123;&#125;</span><br><span class="line">    <span class="comment"># 菜单列表 如:[['用户管理', '/user/'], ['角色管理', '/roles/'], ['权限管理', '/permission/']]</span></span><br><span class="line">    menu_list = []</span><br><span class="line">    </span><br><span class="line">    request.session[<span class="string">'user_id'</span>] = user.pk</span><br><span class="line">    <span class="comment"># 获取 权限url,权限组名,权限动作</span></span><br><span class="line">    permissions = user.roles.all().values(<span class="string">"permission__url"</span>,<span class="string">"permission__group_id__title"</span>,<span class="string">"permission__action"</span>).distinct()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> permissions:</span><br><span class="line">        group_title = permission[<span class="string">'permission__group_id__title'</span>]</span><br><span class="line">        <span class="keyword">if</span> group_title <span class="keyword">in</span> permission_dict:</span><br><span class="line">            permission_dict[group_title][<span class="string">'urls'</span>].append(permission[<span class="string">'permission__url'</span>])</span><br><span class="line">            permission_dict[group_title][<span class="string">'actions'</span>].append(permission[<span class="string">'permission__action'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            permission_dict[group_title]=&#123;</span><br><span class="line">                <span class="string">'urls'</span>:[permission[<span class="string">'permission__url'</span>]],</span><br><span class="line">                <span class="string">'actions'</span>:[permission[<span class="string">'permission__action'</span>]]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> permission[<span class="string">'permission__action'</span>]==<span class="number">4</span>:</span><br><span class="line">            menu_list.append([(group_title),(permission[<span class="string">'permission__url'</span>])])</span><br><span class="line">    print(menu_list)</span><br><span class="line">    print(permission_dict)</span><br><span class="line">    <span class="comment"># 注册菜单列表</span></span><br><span class="line">    request.session[<span class="string">'menu_list'</span>] = menu_list</span><br><span class="line">    <span class="comment"># 注册权限字典</span></span><br><span class="line">    request.session[<span class="string">'permission_dict'</span>] = permission_dict</span><br></pre></td></tr></table></figure>
<p>重写校验(rbac/service/rbac.py):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检验权限</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">        for permission in permission_list:</span></span><br><span class="line"><span class="string">            permission = '^%s$' % permission</span></span><br><span class="line"><span class="string">            ret = re.match(permission, url_path)</span></span><br><span class="line"><span class="string">            if ret:</span></span><br><span class="line"><span class="string">                return None</span></span><br><span class="line"><span class="string">         return HttpResponse('没有权限')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">        <span class="keyword">for</span> permission <span class="keyword">in</span> permission_dict.values():</span><br><span class="line">            urls = permission[<span class="string">'urls'</span>]</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">                url = <span class="string">'^%s$'</span> % url</span><br><span class="line">                ret = re.match(url, url_path)</span><br><span class="line">                <span class="keyword">if</span> ret:</span><br><span class="line">                    <span class="comment"># 将动作加入request用于判断用户有没有这个操作权限</span></span><br><span class="line">                    request.actions = permission[<span class="string">'actions'</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'没有权限'</span>)</span><br></pre></td></tr></table></figure>
<p>修改app01里的视图函数(app/views.py):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增一个类 用于判断用户是否有这个操作权限</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permissions</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#  action_list = [(1,'add'),(2,'delete'),(3,'update'),(4,'select')]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,actions)</span>:</span></span><br><span class="line">        self.actions=actions</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">in</span> self.actions</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> <span class="keyword">in</span> self.actions</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> <span class="keyword">in</span> self.actions</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> <span class="keyword">in</span> self.actions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(request)</span>:</span></span><br><span class="line">    permission=Permissions(request.actions)</span><br><span class="line">    get_list = User.objects.all()</span><br><span class="line">    print(get_list)</span><br><span class="line">    print(request.actions)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'user.html'</span>, locals())</span><br></pre></td></tr></table></figure>
<p>修改前端html 使用模版继承:</p>
<p>user.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block index %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row-rigth"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Default panel contents --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                    &#123;% if permission.add %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/add/"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- Table --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        &#123;% for user in get_list %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"row"</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                &#123;% if permission.update %&#125;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/edit/&#123;&#123; user.pk &#125;&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if permission.delete %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/delete/&#123;&#123; user.pk &#125;&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                                  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>base.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load get_menus_tag %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.min.js"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#101010</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            margin-top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.row-left</span> &#123;</span></span><br><span class="line">            width: 30%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 50px;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line"></span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.row-rigth</span> &#123;</span></span><br><span class="line">            width: 70%;</span><br><span class="line">            height: auto;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 50px;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            overflow: auto;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.table-list</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            margin-left: 50px;</span><br><span class="line">            margin-bottom: 50px;</span><br><span class="line">            margin-right: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.menu-item</span> &#123;</span></span><br><span class="line">            width: 70%;</span><br><span class="line">            margin-left: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">                &#123;% get_menu_list request as menus %&#125;</span><br><span class="line">                &#123;% for menu in menus %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; menu.1 &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"list-group-item menu-item"</span>&gt;</span>&#123;&#123; menu.0 &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block index %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.menu-item'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">if</span> (<span class="built_in">window</span>.location.pathname===$(<span class="keyword">this</span>).attr(<span class="string">'href'</span>))&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>)</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里使用tag来做左侧菜单栏(rbac/templatatags/get_munus_tag.py):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register=template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_menu_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取注册的菜单</span></span><br><span class="line">    <span class="keyword">return</span> request.session[<span class="string">'menu_list'</span>]</span><br></pre></td></tr></table></figure>
<p>效果图如下:</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/rbac/3.gif" alt=""></p>
<p>代码已上传至<a href="https://github.com/Tigercoll/rbac/tree/rbac-pro" target="_blank" rel="noopener">github</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>rabc</tag>
      </tags>
  </entry>
  <entry>
    <title>RBAC(Role-based access control)</title>
    <url>/2019/05/30/RBAC(Role-based-access-control)/</url>
    <content><![CDATA[<p>基于角色的权限访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。(来自百度百科)</p>
<a id="more"></a>
<p>我们先来看张图:</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/rbac/1.png" alt=""></p>
<p>从上图我们可以看出，ACL是用户和权限直接关系的，RBAC则是通过角色间接关联用户和权限的。所以角色是RBAC系统的一个重要属性</p>
<p>我们要实现的功能就是1,用户管理,2,角色管理,3权限管理.</p>
<p><img src="https://github.com/Tigercoll/my_picturelib/raw/master/rbac/2.png" alt=""></p>
<h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""用户表"""</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'用户名'</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">37</span>,verbose_name=<span class="string">'密码'</span>)</span><br><span class="line">    roles = models.ManyToManyField(to=<span class="string">'Roles'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'用户表'</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Roles</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""角色表"""</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">37</span>,verbose_name=<span class="string">'角色名称'</span>)</span><br><span class="line">    permission = models.ManyToManyField(to=<span class="string">'Permission'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'角色表'</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""权限表"""</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">37</span>,verbose_name=<span class="string">'权限名'</span>)</span><br><span class="line">    url = models.CharField(max_length=<span class="number">37</span>,verbose_name=<span class="string">'链接'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">'权限表'</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure>
<h3 id="用户与角色关联-角色与权限关联-用户与权限之间没有直接联系"><a href="#用户与角色关联-角色与权限关联-用户与权限之间没有直接联系" class="headerlink" title="用户与角色关联,角色与权限关联,用户与权限之间没有直接联系."></a>用户与角色关联,角色与权限关联,用户与权限之间没有直接联系.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method ==<span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        user = User.objects.filter(username=username,password=password).first()</span><br><span class="line">        print(user,username,password)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="comment"># 注册rbac权限</span></span><br><span class="line">            rbac_login(request,user)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/user/'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册权限url列表到session</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rbac_login</span><span class="params">(request,user)</span>:</span></span><br><span class="line">    permission_list = []</span><br><span class="line">    request.session[<span class="string">'user_id'</span>] = user.pk</span><br><span class="line">    permissions = user.roles.all().values(<span class="string">"permission__url"</span>).distinct()</span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> permissions:</span><br><span class="line">        permission_list.append(permission[<span class="string">'permission__url'</span>])</span><br><span class="line">    request.session[<span class="string">'permission_list'</span>] = permission_list</span><br></pre></td></tr></table></figure>
<h3 id="将权限注册到session"><a href="#将权限注册到session" class="headerlink" title="将权限注册到session"></a>将权限注册到session</h3><p>由于每个访问都需要校验一遍是否有权限,所以将rbac写入中间件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rbac 中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span>  HttpResponse,redirect</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RbacMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        url_path = request.path_info</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 白名单 white_list 要加斜线,</span></span><br><span class="line">        white_list = [<span class="string">'/login/'</span>,]</span><br><span class="line"></span><br><span class="line">        permission_list = request.session.get(<span class="string">'permission_list'</span>,[])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> white_url <span class="keyword">in</span> white_list:</span><br><span class="line">            white_url = <span class="string">'^%s$'</span>%white_url</span><br><span class="line">            ret = re.match(white_url,url_path)</span><br><span class="line">            <span class="keyword">if</span> ret :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 是否登录</span></span><br><span class="line">        user_id = request.session.get(<span class="string">"user_id"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">"/login/"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检验权限</span></span><br><span class="line">        <span class="keyword">for</span> permission <span class="keyword">in</span> permission_list:</span><br><span class="line">            permission = <span class="string">'^%s$'</span> % permission</span><br><span class="line">            ret = re.match(permission, url_path)</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 这里可以扩展到新的网页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'没有权限'</span>)</span><br></pre></td></tr></table></figure>
<p>基本熟悉了rbac概念后可以轻松完成.</p>
<p>源码已放到<a href="https://github.com/Tigercoll/rbac" target="_blank" rel="noopener">github</a>上</p>
<p>欢迎各位指教</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API规范</title>
    <url>/2020/05/31/RESTful-API%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h3><ul>
<li>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</li>
<li>REST从资源的角度类审视整个网络，它将分布在网络中某个节点的资源通过URL进行标识，客户端应用通过URL来获取资源的表征，获得这些表征致使这些应用转变状态</li>
<li>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</li>
<li>所有的数据，不过是通过网络获取的还是操作（增删改查）的数据，都是资源，将一切数据视为资源是REST区别与其他架构风格的最本质属性</li>
<li>对于REST这种面向资源的架构风格，有人提出一种全新的结构理念，即：面向资源架构（ROA：Resource Oriented Architecture）</li>
</ul>
<a id="more"></a>
<h3 id="RESTful-API设计"><a href="#RESTful-API设计" class="headerlink" title="RESTful API设计"></a>RESTful API设计</h3><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>API与用户通信的协议总是HTTPS协议</p>
<h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com   //尽量部署在专用域名之下(会存在跨域问题)</span></span><br><span class="line">https:<span class="comment">//example.org/api/  //API 简单的话可以放在主域名下面(不存在跨域问题)</span></span><br></pre></td></tr></table></figure>
<h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>应该讲版本号放在url</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com/v1/</span></span><br><span class="line">https:<span class="comment">//example.org/api/v1</span></span><br></pre></td></tr></table></figure>
<p>还有一种是放在请求头中,但不如放在url方便直观</p>
<h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com/v1/zoos</span></span><br><span class="line">https:<span class="comment">//api.example.com/v1/animals</span></span><br><span class="line">https:<span class="comment">//api.example.com/v1/employees</span></span><br></pre></td></tr></table></figure>
<h4 id="请求的方法-method"><a href="#请求的方法-method" class="headerlink" title="请求的方法(method)"></a>请求的方法(method)</h4><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）。</span><br><span class="line">POST（CREATE）：在服务器新建一个资源。</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</span><br><span class="line">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</span><br><span class="line">DELETE（DELETE）：从服务器删除资源。</span><br></pre></td></tr></table></figure>
<p>还有两个不常用的HTTP动词。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEAD：获取资源的元数据。</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</span><br></pre></td></tr></table></figure>
<h4 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。下面是一些常见的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?limit&#x3D;10：指定返回记录的数量</span><br><span class="line">?offset&#x3D;10：指定返回记录的开始位置。</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id&#x3D;1：指定筛选条件</span><br></pre></td></tr></table></figure>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure>
<p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a>。</p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: "Invalid API key"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;collection：返回资源对象的列表（数组）</span><br><span class="line">GET &#x2F;collection&#x2F;resource：返回单个资源对象</span><br><span class="line">POST &#x2F;collection：返回新生成的资源对象</span><br><span class="line">PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">PATCH &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">DELETE &#x2F;collection&#x2F;resource：返回一个空文档</span><br></pre></td></tr></table></figure>
<h4 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h4><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>
<p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"link"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">      <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">      <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>（1）API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a>框架。</p>
<p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>
<p>摘自：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a> </p>
]]></content>
      <categories>
        <category>django rest_framework</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主从复制</title>
    <url>/2021/01/08/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>一个redis服务可以由多个该服务的复制品,这个redis服务称为master,其他复制品称为slaves.</span><br><span class="line"><span class="number">2.</span>master会一直将做空的数据更新同步给slaves.保持主从同步.</span><br><span class="line"><span class="number">3.</span>只要master可以执行写命令,slave只能执行读命令.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>分担了读的压力(高并发),由于写操作执行的相对较少.</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="方式一-linux终端上"><a href="#方式一-linux终端上" class="headerlink" title="方式一,linux终端上"></a>方式一,linux终端上</h4><p><code>redis-server --port 6300[从服务器端口号] --slaveof 127.0.0.1[主服务器IP地址] 6379[端口号] --masterauth[主服务器密码(如果有的话)]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从服务器 </span></span><br><span class="line">redis-server --port <span class="number">6300</span> --slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="comment"># 客户端 </span></span><br><span class="line">[root@<span class="number">10</span><span class="number">-7</span><span class="number">-189</span><span class="number">-100</span> ~]<span class="comment"># redis-cli -p 6300</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6300</span>&gt; select <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 从主服务器上复制过来的数据</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6300</span>[<span class="number">1</span>]&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line"><span class="comment"># 只能读数据不能写入</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6300</span>[<span class="number">1</span>]&gt; set <span class="number">1</span> <span class="number">2</span> </span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only slave.</span></span><br><span class="line"><span class="string">127.0.0.1:6300[1]&gt; get 1</span></span><br><span class="line"><span class="string">"2"</span></span><br></pre></td></tr></table></figure>
<h4 id="方式二-redis命令行"><a href="#方式二-redis命令行" class="headerlink" title="方式二(redis命令行)"></a>方式二(redis命令行)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当然也可以在服务启动后在命令行执行slaveof IP PORT  绑定主服务</span></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6300</span>[<span class="number">1</span>]&gt; slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 主服务器</span></span><br><span class="line"><span class="number">28696</span>:M <span class="number">08</span> Jan <span class="number">16</span>:<span class="number">53</span>:<span class="number">10.291</span> * Synchronization <span class="keyword">with</span> slave <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6300</span> succeeded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然也可以执行slaveof no one来解除主从</span></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6300</span>[<span class="number">1</span>]&gt; slaveof no one</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 服务器端               </span></span><br><span class="line"><span class="number">28135</span>:M <span class="number">08</span> Jan <span class="number">16</span>:<span class="number">51</span>:<span class="number">34.637</span> <span class="comment"># Connection with slave 127.0.0.1:6300 lost.</span></span><br></pre></td></tr></table></figure>
<h4 id="方式三-配置文件启动"><a href="#方式三-配置文件启动" class="headerlink" title="方式三(配置文件启动)"></a>方式三(配置文件启动)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只需要在配置文件中添加如下:</span></span><br><span class="line"><span class="comment"># 配置主服务器</span></span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="comment"># 配置端口</span></span><br><span class="line">port <span class="number">6300</span></span><br></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h4><p>配置文件添加后台启动,.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
<h3 id="问题-如果master-挂了怎么办"><a href="#问题-如果master-挂了怎么办" class="headerlink" title="问题:如果master 挂了怎么办?"></a>问题:如果master 挂了怎么办?</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一个master有多个slaves</span><br><span class="line">slave挂一个,只是处理读的性能有所下降</span><br><span class="line">master 如果挂了,那么所有写请求都无法执行.</span><br><span class="line">怎么办?</span><br><span class="line">我们只能在slaves中找一个把他当成master,然后修改别的slave重新指向新的master</span><br><span class="line"><span class="comment"># 以上是我们手动处理master挂了的方法,那么有没有什么自动实现的呢?这里我们就要讲一下sentinel哨兵.</span></span><br></pre></td></tr></table></figure>
<h3 id="redis-rentine哨兵"><a href="#redis-rentine哨兵" class="headerlink" title="redis-rentine哨兵"></a>redis-rentine哨兵</h3><p>哨兵就是来帮我我们把手动需要干的事情,自动化.</p>
<h4 id="安装哨兵"><a href="#安装哨兵" class="headerlink" title="安装哨兵"></a>安装哨兵</h4><p><code>yum install redis-sentinel</code></p>
<h4 id="新建哨兵配置文件"><a href="#新建哨兵配置文件" class="headerlink" title="新建哨兵配置文件"></a>新建哨兵配置文件</h4><p><code>vim redis_sentin.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置哨兵的端口</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置哨兵监听服务器地址</span></span><br><span class="line">sentinel monitor 6379[别名] 127.0.0.1[服务器地址] 6379[端口] 1[有几个哨兵服务认为主机挂了才切换]</span><br></pre></td></tr></table></figure>
<h4 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h4><p><code>[root@10-7-189-100 ~]# redis-sentinel redis_sentinel.conf</code></p>
<p>可以自己去启几个redis服务模拟一下 master挂了之后 哨兵是如何切换master的.</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>django配置离线脚本</title>
    <url>/2020/06/17/django%E9%85%8D%E7%BD%AE%E7%A6%BB%E7%BA%BF%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>有些时候我们需要在不启动<code>django</code>的时候通过ORM操作数据,所以我们就需要配置离线脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取项目的根目录</span></span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"><span class="comment"># 添加到系统环境变量</span></span><br><span class="line">sys.path.append(base_dir)</span><br><span class="line"><span class="comment"># 加载项目的配置文件</span></span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"项目.settings"</span>)</span><br><span class="line"><span class="comment"># 启动django</span></span><br><span class="line">django.setup()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>deepin安装vue-cli脚手架</title>
    <url>/2020/07/10/deepin%E5%AE%89%E8%A3%85vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<p>首先，做vue的项目，我们如果不用官方提供的脚手架，我们就必须自己去搭建项目所需的一切东西。这些项目所需要的目录结构啊  ，等等，感觉有点重复并且做项目的时候老是自己搭建未免太无趣。</p>
<blockquote>
<p>脚手架是指通过输入简单指令帮助你快速搭建好一个基本环境的工具。</p>
</blockquote>
<p>vue官方提供了vue-cli脚手架。</p>
<a id="more"></a>
<h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装<code>vue-cli</code></h2><p>如果你还没有安装<code>nodejs</code>的话，要先行安装nodejs。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line"><span class="meta">#</span><span class="bash"> node -v 查看</span></span><br></pre></td></tr></table></figure>
<p>全局安装vue-cli</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure>
<p>在国内的话可以使用淘宝的源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>在<code>deepin</code>中安装完<code>cnpm</code>后会找不到命令，需要新建一个软链接</p>
<p>查看<code>npm</code>链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ls -l  /usr/local/bin/npm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 真实路径</span></span><br></pre></td></tr></table></figure>
<p>然后软连接到<code>/usr/local/bin/cnpm</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s 你的真实路径 /usr/local/bin/cnpm</span><br></pre></td></tr></table></figure>
<p>这样你就可以使用<code>cnpm</code>了</p>
<p>用<code>cnpm</code>全局安装<code>vue-cli</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install vue-cli -g</span><br></pre></td></tr></table></figure>
<p>同样我们在deepin下面也需要创建软连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s 你的vue安装路径 /usr/local/bin/vue</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否成功</span></span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure>
<h2 id="初始化项目，生成项目模板"><a href="#初始化项目，生成项目模板" class="headerlink" title="初始化项目，生成项目模板"></a>初始化项目，生成项目模板</h2><p>我们在桌面新建一个文件夹<code>WebProject</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir WebProject</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化项目</span></span><br><span class="line">vue init webpack demo</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######################</span></span></span><br><span class="line">? Project name demo # 项目名称</span><br><span class="line">? Project description 模板 #项目描述</span><br><span class="line">? Author tigercoll # 作者</span><br><span class="line">? Vue build runtime </span><br><span class="line">? Install vue-router? Yes # 是否安装vue router</span><br><span class="line">? Use ESLint to lint your code? Yes # 是否安装ESLint</span><br><span class="line">? Pick an ESLint preset Standard # 选择标准</span><br><span class="line">? Set up unit tests No # 是否测试</span><br><span class="line">? Setup e2e tests with Nightwatch? No # 测试相关</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recomme</span><br><span class="line">nded) npm # 用哪种方式安装</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后就等他安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完后会提示你</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To get started:</span></span><br><span class="line"></span><br><span class="line">  cd demo</span><br><span class="line">  npm run dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据提示进入demo 目录，运行 npm run dev</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue-cli脚手架</category>
      </categories>
      <tags>
        <tag>deepin</tag>
        <tag>vue-cli脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>django rest_framework源码解析(序列化器,分页,路由,渲染器)</title>
    <url>/2020/06/15/django-rest_framework%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8,%E5%88%86%E9%A1%B5,%E8%B7%AF%E7%94%B1,%E6%B8%B2%E6%9F%93%E5%99%A8)/</url>
    <content><![CDATA[<p>前面我们介绍了DRF的request的二次封装,解析模块,认证模块,权限模块,频率控制模块跟版本控制模块</p>
<p>接下来我们了解一下序列化器,分页,路由,渲染器</p>
<a id="more"></a>
<h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><h3 id="序列化数据"><a href="#序列化数据" class="headerlink" title="序列化数据"></a>序列化数据</h3><p>在<code>RESTful</code>规范中,我们前后端一般都是通过<code>json</code>来传递数据的.</p>
<p>所以我们给前端提供的API基本都需要序列化成<code>json</code>字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取数据库中的数据</span></span><br><span class="line">        users = UserInfo.objects.all()</span><br><span class="line">        <span class="comment"># 因为获取到的数据是queryset,我们必须通过.values+list来转化</span></span><br><span class="line">        result = json.dumps(list(users.values(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>)))</span><br><span class="line">        <span class="keyword">return</span> Response(result)</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200615162415065.png" alt="image-20200615162415065"></p>
<h3 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h3><p>在<code>drf</code>中,也为我们提供了序列化<code>serializers</code></p>
<p>这个<code>serializers</code> 与<code>django</code>的<code>form</code>类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入serializers</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># 自定义一个类,继承serializers.Serializer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 数据库中的字段</span></span><br><span class="line">    id = serializers.IntegerField()</span><br><span class="line">    username = serializers.CharField()</span><br><span class="line">    password = serializers.CharField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        users = UserInfo.objects.all()</span><br><span class="line">        <span class="comment"># 实例化这个类,并传入instance=users</span></span><br><span class="line">        <span class="comment"># many=True表示多条数据,如果是一条数据的时候many=False</span></span><br><span class="line">        ser = UserinforSerializers(instance=users,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回ser.data</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200615162415065.png" alt="image-20200615162415065"></p>
<p>是不是与<code>django的form</code>类似,所以我们猜测,他也会有类似<code>modelForm</code>一样的类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入serializers</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># 自定义一个类,继承serializers.ModelSerializer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># 也可以获取字段</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        users = UserInfo.objects.all()</span><br><span class="line">        <span class="comment"># 实例化这个类,并传入instance=users</span></span><br><span class="line">        <span class="comment"># many=True表示多条数据,如果是一条数据的时候many=False</span></span><br><span class="line">        ser = UserinforSerializers(instance=users,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回ser.data</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<p>是不是与我们的<code>ModelForm</code>类似</p>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200615171020763.png" alt="image-20200615171020763"></p>
<p>可以看到我们获取的数据,是把所有<code>Userinfo</code>的表里的数据都获取了,</p>
<p>像<code>group</code>中我们获取的是<code>id</code> 而不是我们希望得到的组名,我们可以这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 重新定义一个字段</span></span><br><span class="line">    group = serializers.CharField(source=<span class="string">'group.name'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200615172017569.png" alt="image-20200615172017569"></p>
<h3 id="SerializerMethodField"><a href="#SerializerMethodField" class="headerlink" title="SerializerMethodField"></a><code>SerializerMethodField</code></h3><p>像<code>roles</code>这样多对多的我们需要怎么取呢?</p>
<p>我们可以用<code>serializers.SerializerMethodField</code>自定义显示字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># 自定义一个类,继承serializers.ModelSerializer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 重新定义一个字段</span></span><br><span class="line">    group = serializers.CharField(source=<span class="string">'group.name'</span>)</span><br><span class="line">    roles = serializers.SerializerMethodField()</span><br><span class="line">    <span class="comment"># 自定义显示的函数,以get_开头+自定义字段名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_roles</span><span class="params">(self,row)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> row.roles.all():</span><br><span class="line">            result.append(&#123;</span><br><span class="line">                <span class="string">'name'</span>:i.name,</span><br><span class="line">                <span class="string">'id'</span>:i.id</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200615200917320.png" alt="image-20200615200917320"></p>
<p>这样我们就自定义显示了多对多关系</p>
<h3 id="深度控制"><a href="#深度控制" class="headerlink" title="深度控制"></a>深度控制</h3><p>当然你还会嫌这个太麻烦,所以<code>drf</code>也帮我们完成了多对多或者更深层的关系<code>depth = 1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># 自定义一个类,继承serializers.ModelSerializer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br><span class="line">        <span class="comment"># 深度,只要加了这个,就会自动帮我们去查找这个字段的所有关联对象,默认为0,建议1-10,个人建议不要超过3层</span></span><br><span class="line">        depth = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200615204626908.png" alt="image-20200615204626908"></p>
<p>也是可以取出来的,接下来我们对源码进行简单的分析.</p>
<h3 id="序列化源码解析"><a href="#序列化源码解析" class="headerlink" title="序列化源码解析"></a>序列化源码解析</h3><p>我们从<code>ModelSerializer</code>类入手,发现这个类没有<code>__init__</code>方法,我们往上找,<code>Serializer</code>也没有,再往上找<code>BaseSerializer</code>我们在<code>BaseSerializer</code>中发现了<code>__init__</code>方法,并且我们看到还有一个<code>__new__</code>方法,我们知道在构造方法之前都是调用,<code>__new__</code>方法的,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">       <span class="comment"># We override this method in order to automagically create</span></span><br><span class="line">       <span class="comment"># `ListSerializer` classes instead when `many=True` is set.</span></span><br><span class="line">       <span class="comment"># 获取many参数</span></span><br><span class="line">       <span class="keyword">if</span> kwargs.pop(<span class="string">'many'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="comment"># 如果为True则执行many_init</span></span><br><span class="line">           <span class="keyword">return</span> cls.many_init(*args, **kwargs)</span><br><span class="line">       <span class="comment"># False则执行__init__方法</span></span><br><span class="line">       <span class="keyword">return</span> super().__new__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>
<p><code>many_init</code>中其实是调用了<code>ListSerializer</code>类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">many_init</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">    allow_empty = kwargs.pop(<span class="string">'allow_empty'</span>, <span class="literal">None</span>)</span><br><span class="line">    child_serializer = cls(*args, **kwargs)</span><br><span class="line">    list_kwargs = &#123;</span><br><span class="line">        <span class="string">'child'</span>: child_serializer,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> allow_empty <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        list_kwargs[<span class="string">'allow_empty'</span>] = allow_empty</span><br><span class="line">    list_kwargs.update(&#123;</span><br><span class="line">        key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items()</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> LIST_SERIALIZER_KWARGS</span><br><span class="line">    &#125;)</span><br><span class="line">    meta = getattr(cls, <span class="string">'Meta'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 调用ListSerializer类</span></span><br><span class="line">    list_serializer_class = getattr(meta, <span class="string">'list_serializer_class'</span>, ListSerializer)</span><br><span class="line">    <span class="keyword">return</span> list_serializer_class(*args, **list_kwargs)</span><br></pre></td></tr></table></figure>
<p>如果为<code>False</code>其实是调用了<code>Serializer</code>类</p>
<p>接下来我们看一下<code>return Response(ser.data)</code>中的<code>ser.data</code>做了什么</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">    ret = super().data</span><br><span class="line">    <span class="keyword">return</span> ReturnDict(ret, serializer=self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再找他的父类中的data</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'initial_data'</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_validated_data'</span>):</span><br><span class="line">            msg = (</span><br><span class="line">                <span class="string">'When a serializer is passed a `data` keyword argument you '</span></span><br><span class="line">                <span class="string">'must call `.is_valid()` before attempting to access the '</span></span><br><span class="line">                <span class="string">'serialized `.data` representation.\n'</span></span><br><span class="line">                <span class="string">'You should either call `.is_valid()` first, '</span></span><br><span class="line">                <span class="string">'or access `.initial_data` instead.'</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(msg)</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_data'</span>):</span><br><span class="line">            <span class="keyword">if</span> self.instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> getattr(self, <span class="string">'_errors'</span>, <span class="literal">None</span>):</span><br><span class="line">                <span class="comment"># 调用self.to_representation,应该去各自的类中一层一层往上找</span></span><br><span class="line">                <span class="comment"># Serializer类,跟ListSerializer中</span></span><br><span class="line">                self._data = self.to_representation(self.instance)</span><br><span class="line">            <span class="keyword">elif</span> hasattr(self, <span class="string">'_validated_data'</span>) <span class="keyword">and</span> <span class="keyword">not</span> getattr(self, <span class="string">'_errors'</span>, <span class="literal">None</span>):</span><br><span class="line">                self._data = self.to_representation(self.validated_data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._data = self.get_initial()</span><br><span class="line">        <span class="keyword">return</span> self._data</span><br></pre></td></tr></table></figure>
<p><code>Serializer类中</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_representation</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Object instance -&gt; Dict of primitive datatypes.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 创建一个有序字典</span></span><br><span class="line">    ret = OrderedDict()</span><br><span class="line">    <span class="comment"># 获取Serializer中的所有字段</span></span><br><span class="line">    fields = self._readable_fields</span><br><span class="line">	<span class="comment"># 循环每个字段</span></span><br><span class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> fields:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取每个字段对应的get_attribute中的对象</span></span><br><span class="line">            <span class="comment"># instance是传入的model对象实例</span></span><br><span class="line">            attribute = field.get_attribute(instance)</span><br><span class="line">        <span class="keyword">except</span> SkipField:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We skip `to_representation` for `None` values so that fields do</span></span><br><span class="line">        <span class="comment"># not have to explicitly deal with that case.</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># For related fields with `use_pk_only_optimization` we need to</span></span><br><span class="line">        <span class="comment"># resolve the pk value.</span></span><br><span class="line">        check_for_none = attribute.pk <span class="keyword">if</span> isinstance(attribute, PKOnlyObject) <span class="keyword">else</span> attribute</span><br><span class="line">        <span class="keyword">if</span> check_for_none <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            ret[field.field_name] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 这里是把获取的对象,再去每个字段的对象里获取to_representation</span></span><br><span class="line">            ret[field.field_name] = field.to_representation(attribute)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<p>从<code>get_attribute</code>找到<code>Field</code>类中的<code>get_attribute</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_attribute</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        if self.source == '*':</span></span><br><span class="line"><span class="string">            self.source_attrs = []</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            self.source_attrs = self.source.split('.')</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 这里的source_attrs就是上面的self.source.split('.')</span></span><br><span class="line">        <span class="keyword">return</span> get_attribute(instance, self.source_attrs)</span><br></pre></td></tr></table></figure>
<p>然后我们再点进去查看<code>get_attribute</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_attribute</span><span class="params">(instance, attrs)</span>:</span></span><br><span class="line">    <span class="comment"># 循环刚才的source_attrs列表</span></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> attrs:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 如果有直接赋值</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(instance, Mapping):</span><br><span class="line">                instance = instance[attr]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果是group.title这样的 再赋值一次再循环</span></span><br><span class="line">                instance = getattr(instance, attr)</span><br><span class="line">        <span class="keyword">except</span> ObjectDoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 如果是可调用的callable</span></span><br><span class="line">        <span class="keyword">if</span> is_simple_callable(instance):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 加括号,相当于调用</span></span><br><span class="line">                instance = instance()</span><br><span class="line">            <span class="keyword">except</span> (AttributeError, KeyError) <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="comment"># If we raised an Attribute or KeyError here it'd get treated</span></span><br><span class="line">                <span class="comment"># as an omitted field in `Field.get_attribute()`. Instead we</span></span><br><span class="line">                <span class="comment"># raise a ValueError to ensure the exception is not masked.</span></span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">'Exception raised in callable attribute "&#123;&#125;"; original exception was: &#123;&#125;'</span>.format(attr, exc))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>
<p>这就是序列化器的基本流程了</p>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><h4 id="请求数据校验"><a href="#请求数据校验" class="headerlink" title="请求数据校验"></a>请求数据校验</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入serializers</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># 自定义一个类,继承serializers.ModelSerializer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        data = request.data</span><br><span class="line">        print(data) <span class="comment"># &#123;'username': 1, 'password': 123&#125;</span></span><br><span class="line">        <span class="comment"># 这里就不是instance 而是data了</span></span><br><span class="line">        ser = UserinforSerializers(data=data)</span><br><span class="line">        <span class="comment"># 校验</span></span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="comment"># 保存</span></span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">'ok'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(ser.errors)</span><br></pre></td></tr></table></figure>
<p>这样一看 是不是这玩意特别像<code>ModelForm</code>所以也会有跟自定义校验的钩子函数,有全局跟局部</p>
<h4 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 局部校验的钩子函数validate_+字段名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        print(<span class="string">'value'</span>,value)</span><br><span class="line">        <span class="comment"># value 1</span></span><br><span class="line">        <span class="comment"># 自定义规则</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="comment"># 全局钩子函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">'attrs'</span>,attrs)</span><br><span class="line">        <span class="comment"># attrs: OrderedDict([('username', '1'), ('password', '123')]) </span></span><br><span class="line">        <span class="comment"># attr.get(字段名)</span></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure>
<p>查看源码,我们可以从<code>is_valid</code>入手</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self, raise_exception=False)</span>:</span></span><br><span class="line">    <span class="comment"># 断言不管</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_validated_data'</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 执行self.run_validation,需要从我们自己的类出发开始找,没有再找父类的</span></span><br><span class="line">            self._validated_data = self.run_validation(self.initial_data)</span><br><span class="line">        <span class="keyword">except</span> ValidationError <span class="keyword">as</span> exc:</span><br><span class="line">            self._validated_data = &#123;&#125;</span><br><span class="line">            self._errors = exc.detail</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._errors = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._errors <span class="keyword">and</span> raise_exception:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(self.errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> bool(self._errors)</span><br></pre></td></tr></table></figure>
<p>我们在<code>Serializer</code>类中找到了<code>to_internal_value</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Dict of native values &lt;- Dict of primitive datatypes.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(data, Mapping):</span><br><span class="line">        message = self.error_messages[<span class="string">'invalid'</span>].format(</span><br><span class="line">            datatype=type(data).__name__</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(&#123;</span><br><span class="line">            api_settings.NON_FIELD_ERRORS_KEY: [message]</span><br><span class="line">        &#125;, code=<span class="string">'invalid'</span>)</span><br><span class="line"></span><br><span class="line">    ret = OrderedDict()</span><br><span class="line">    errors = OrderedDict()</span><br><span class="line">    fields = self._writable_fields</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> fields:</span><br><span class="line">        <span class="comment"># 这里就是局部钩子 validate_ + 字段名</span></span><br><span class="line">        validate_method = getattr(self, <span class="string">'validate_'</span> + field.field_name, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 获取value 传入的参数</span></span><br><span class="line">        primitive_value = field.get_value(data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#先做drf 提供的内置字段的校验,返回校验通过的值</span></span><br><span class="line">            validated_value = field.run_validation(primitive_value)</span><br><span class="line">            <span class="comment"># 钩子函数的校验</span></span><br><span class="line">            <span class="keyword">if</span> validate_method <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">               <span class="comment"># 如果不为空,则执行自定义的钩子函数</span></span><br><span class="line">                validated_value = validate_method(validated_value)</span><br><span class="line">        <span class="keyword">except</span> ValidationError <span class="keyword">as</span> exc:</span><br><span class="line">            errors[field.field_name] = exc.detail</span><br><span class="line">        <span class="keyword">except</span> DjangoValidationError <span class="keyword">as</span> exc:</span><br><span class="line">            errors[field.field_name] = get_error_detail(exc)</span><br><span class="line">        <span class="keyword">except</span> SkipField:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            set_value(ret, field.source_attrs, validated_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> errors:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(errors)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><code>DRF</code>内置了三种分页<code>PageNumberPagination,CursorPagination,LimitOffsetPagination</code></p>
<p><code>PageNumberPagination</code>源码: 可以看到其实调用的是<code>django自身的Paginator</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageNumberPagination</span><span class="params">(BasePagination)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A simple page number based style that supports page numbers as</span></span><br><span class="line"><span class="string">    query parameters. For example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    http://api.example.org/accounts/?page=4</span></span><br><span class="line"><span class="string">    http://api.example.org/accounts/?page=4&amp;page_size=100</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># The default page size.</span></span><br><span class="line">    <span class="comment"># Defaults to `None`, meaning pagination is disabled.</span></span><br><span class="line">    page_size = api_settings.PAGE_SIZE</span><br><span class="line">	<span class="comment"># DjangoPaginator 其实是调用的django自身的分页</span></span><br><span class="line">    django_paginator_class = DjangoPaginator</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Client can control the page using this query parameter.</span></span><br><span class="line">    <span class="comment"># 默认参数</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span></span><br><span class="line">    page_query_description = _(<span class="string">'A page number within the paginated result set.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Client can control the page size using this query parameter.</span></span><br><span class="line">    <span class="comment"># Default is 'None'. Set to eg 'page_size' to enable usage.</span></span><br><span class="line">    <span class="comment"># 默认page_size参数</span></span><br><span class="line">    page_size_query_param = <span class="literal">None</span></span><br><span class="line">    page_size_query_description = _(<span class="string">'Number of results to return per page.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set to an integer to limit the maximum page size the client may request.</span></span><br><span class="line">    <span class="comment"># Only relevant if 'page_size_query_param' has also been set.</span></span><br><span class="line">    <span class="comment"># 最大page_size</span></span><br><span class="line">    max_page_size = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    last_page_strings = (<span class="string">'last'</span>,)</span><br><span class="line"></span><br><span class="line">    template = <span class="string">'rest_framework/pagination/numbers.html'</span></span><br><span class="line"></span><br><span class="line">    invalid_page_message = _(<span class="string">'Invalid page.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span><span class="params">(self, queryset, request, view=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Paginate a queryset if required, either returning a</span></span><br><span class="line"><span class="string">        page object, or `None` if pagination is not configured for this view.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        page_size = self.get_page_size(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> page_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	   <span class="comment">#这里就是调用的 django_paginator_class = DjangoPaginator </span></span><br><span class="line">        paginator = self.django_paginator_class(queryset, page_size)</span><br><span class="line">        page_number = request.query_params.get(self.page_query_param, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> page_number <span class="keyword">in</span> self.last_page_strings:</span><br><span class="line">            page_number = paginator.num_pages</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.page = paginator.page(page_number)</span><br><span class="line">        <span class="keyword">except</span> InvalidPage <span class="keyword">as</span> exc:</span><br><span class="line">            msg = self.invalid_page_message.format(</span><br><span class="line">                page_number=page_number, message=str(exc)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> NotFound(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> paginator.num_pages &gt; <span class="number">1</span> <span class="keyword">and</span> self.template <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># The browsable API should display pagination controls.</span></span><br><span class="line">            self.display_page_controls = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.request = request</span><br><span class="line">        <span class="keyword">return</span> list(self.page)</span><br></pre></td></tr></table></figure>
<p><code>LimitOffsetPagination</code>源码: 其实就是列表切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitOffsetPagination</span><span class="params">(BasePagination)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A limit/offset based style. For example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    http://api.example.org/accounts/?limit=100</span></span><br><span class="line"><span class="string">    http://api.example.org/accounts/?offset=400&amp;limit=100</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    default_limit = api_settings.PAGE_SIZE</span><br><span class="line">    limit_query_param = <span class="string">'limit'</span></span><br><span class="line">    limit_query_description = _(<span class="string">'Number of results to return per page.'</span>)</span><br><span class="line">    offset_query_param = <span class="string">'offset'</span></span><br><span class="line">    offset_query_description = _(<span class="string">'The initial index from which to return the results.'</span>)</span><br><span class="line">    max_limit = <span class="literal">None</span></span><br><span class="line">    template = <span class="string">'rest_framework/pagination/numbers.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span><span class="params">(self, queryset, request, view=None)</span>:</span></span><br><span class="line">        self.count = self.get_count(queryset)</span><br><span class="line">        self.limit = self.get_limit(request)</span><br><span class="line">        <span class="keyword">if</span> self.limit <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.offset = self.get_offset(request)</span><br><span class="line">        self.request = request</span><br><span class="line">        <span class="keyword">if</span> self.count &gt; self.limit <span class="keyword">and</span> self.template <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.display_page_controls = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.count == <span class="number">0</span> <span class="keyword">or</span> self.offset &gt; self.count:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># 返回切片</span></span><br><span class="line">        <span class="keyword">return</span> list(queryset[self.offset:self.offset + self.limit])</span><br></pre></td></tr></table></figure>
<p><code>CursorPagination</code>游标加密分页,这个分页需要排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorPagination</span><span class="params">(BasePagination)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The cursor pagination implementation is necessarily complex.</span></span><br><span class="line"><span class="string">    For an overview of the position/offset style we use, see this post:</span></span><br><span class="line"><span class="string">    https://cra.mr/2011/03/08/building-cursors-for-the-disqus-api</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cursor_query_param = <span class="string">'cursor'</span></span><br><span class="line">    cursor_query_description = _(<span class="string">'The pagination cursor value.'</span>)</span><br><span class="line">    page_size = api_settings.PAGE_SIZE</span><br><span class="line">    invalid_cursor_message = _(<span class="string">'Invalid cursor'</span>)</span><br><span class="line">    ordering = <span class="string">'-created'</span></span><br><span class="line">    template = <span class="string">'rest_framework/pagination/previous_and_next.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Client can control the page size using this query parameter.</span></span><br><span class="line">    <span class="comment"># Default is 'None'. Set to eg 'page_size' to enable usage.</span></span><br><span class="line">    page_size_query_param = <span class="literal">None</span></span><br><span class="line">    page_size_query_description = _(<span class="string">'Number of results to return per page.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set to an integer to limit the maximum page size the client may request.</span></span><br><span class="line">    <span class="comment"># Only relevant if 'page_size_query_param' has also been set.</span></span><br><span class="line">    max_page_size = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The offset in the cursor is used in situations where we have a</span></span><br><span class="line">    <span class="comment"># nearly-unique index. (Eg millisecond precision creation timestamps)</span></span><br><span class="line">    <span class="comment"># We guard against malicious users attempting to cause expensive database</span></span><br><span class="line">    <span class="comment"># queries, by having a hard cap on the maximum possible size of the offset.</span></span><br><span class="line">    offset_cutoff = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span><span class="params">(self, queryset, request, view=None)</span>:</span></span><br><span class="line">        self.page_size = self.get_page_size(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.page_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.base_url = request.build_absolute_uri()</span><br><span class="line">        self.ordering = self.get_ordering(request, queryset, view)</span><br><span class="line"></span><br><span class="line">        self.cursor = self.decode_cursor(request)</span><br><span class="line">        <span class="keyword">if</span> self.cursor <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            (offset, reverse, current_position) = (<span class="number">0</span>, <span class="literal">False</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            (offset, reverse, current_position) = self.cursor</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Cursor pagination always enforces an ordering.</span></span><br><span class="line">        <span class="keyword">if</span> reverse:</span><br><span class="line">            queryset = queryset.order_by(*_reverse_ordering(self.ordering))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queryset = queryset.order_by(*self.ordering)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If we have a cursor with a fixed position then filter by that.</span></span><br><span class="line">        <span class="keyword">if</span> current_position <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            order = self.ordering[<span class="number">0</span>]</span><br><span class="line">            is_reversed = order.startswith(<span class="string">'-'</span>)</span><br><span class="line">            order_attr = order.lstrip(<span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Test for: (cursor reversed) XOR (queryset reversed)</span></span><br><span class="line">            <span class="comment"># 获取分页是上一页还是下一页</span></span><br><span class="line">            <span class="keyword">if</span> self.cursor.reverse != is_reversed:</span><br><span class="line">                kwargs = &#123;order_attr + <span class="string">'__lt'</span>: current_position&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                kwargs = &#123;order_attr + <span class="string">'__gt'</span>: current_position&#125;</span><br><span class="line"></span><br><span class="line">            queryset = queryset.filter(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If we have an offset cursor then offset the entire page by that amount.</span></span><br><span class="line">        <span class="comment"># We also always fetch an extra item in order to determine if there is a</span></span><br><span class="line">        <span class="comment"># page following on from this one.</span></span><br><span class="line">        results = list(queryset[offset:offset + self.page_size + <span class="number">1</span>])</span><br><span class="line">        self.page = list(results[:self.page_size])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the position of the final item following the page.</span></span><br><span class="line">        <span class="keyword">if</span> len(results) &gt; len(self.page):</span><br><span class="line">            has_following_position = <span class="literal">True</span></span><br><span class="line">            following_position = self._get_position_from_instance(results[<span class="number">-1</span>], self.ordering)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            has_following_position = <span class="literal">False</span></span><br><span class="line">            following_position = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> reverse:</span><br><span class="line">            <span class="comment"># If we have a reverse queryset, then the query ordering was in reverse</span></span><br><span class="line">            <span class="comment"># so we need to reverse the items again before returning them to the user.</span></span><br><span class="line">            self.page = list(reversed(self.page))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Determine next and previous positions for reverse cursors.</span></span><br><span class="line">            self.has_next = (current_position <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">or</span> (offset &gt; <span class="number">0</span>)</span><br><span class="line">            self.has_previous = has_following_position</span><br><span class="line">            <span class="keyword">if</span> self.has_next:</span><br><span class="line">                self.next_position = current_position</span><br><span class="line">            <span class="keyword">if</span> self.has_previous:</span><br><span class="line">                self.previous_position = following_position</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Determine next and previous positions for forward cursors.</span></span><br><span class="line">            self.has_next = has_following_position</span><br><span class="line">            self.has_previous = (current_position <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">or</span> (offset &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> self.has_next:</span><br><span class="line">                self.next_position = following_position</span><br><span class="line">            <span class="keyword">if</span> self.has_previous:</span><br><span class="line">                self.previous_position = current_position</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Display page controls in the browsable API if there is more</span></span><br><span class="line">        <span class="comment"># than one page.</span></span><br><span class="line">        <span class="keyword">if</span> (self.has_previous <span class="keyword">or</span> self.has_next) <span class="keyword">and</span> self.template <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.display_page_controls = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.page</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination,CursorPagination,LimitOffsetPagination</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        users = UserInfo.objects.all()</span><br><span class="line">        <span class="comment"># 实例化这个类,并传入instance=users</span></span><br><span class="line">        <span class="comment"># many=True表示多条数据,如果是一条数据的时候many=False</span></span><br><span class="line">        pagination = PageNumberPagination()</span><br><span class="line">        pagination.page_size=<span class="number">1</span></span><br><span class="line">        p = pagination.paginate_queryset(queryset=users,request=request)</span><br><span class="line">        ser = UserinforSerializers(instance=p,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回ser.data</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<p>当然我们也可以自定义一个类然后继承上面的内置类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 分页长度</span></span><br><span class="line">    page_size = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 分页参数 ?size=2 来改变分页长度</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    <span class="comment"># 最大分页长度</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># Client can control the page using this query parameter.</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        users = UserInfo.objects.all()</span><br><span class="line">        <span class="comment"># 继承我们自定义的类就可以了.</span></span><br><span class="line">        pagination = MyPagination()</span><br><span class="line">        p = pagination.paginate_queryset(queryset=users,request=request)</span><br><span class="line">        ser = UserinforSerializers(instance=p,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<p><code>LimitOffsetPagination</code>类似,不过传参的时候是<code>?offset=0&amp;limit=3</code> <code>offset</code>是从0开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPagination</span><span class="params">(LimitOffsetPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 相当于size</span></span><br><span class="line">    default_limit = <span class="number">1</span></span><br><span class="line">    limit_query_param = <span class="string">'limit'</span></span><br><span class="line">    max_limit = <span class="number">3</span></span><br><span class="line">    offset_query_param = <span class="string">'offset'</span></span><br></pre></td></tr></table></figure>
<p><code>CursorPagination</code>: 只有为我们提供了上一页下一页,必须要排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPagination</span><span class="params">(CursorPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 当前页游标</span></span><br><span class="line">    cursor_query_param = <span class="string">'cursor'</span></span><br><span class="line">    <span class="comment"># 指定分页个数</span></span><br><span class="line">    page_size = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 指定排序</span></span><br><span class="line">    ordering = <span class="string">'-id'</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        users = UserInfo.objects.all()</span><br><span class="line">        pagination = MyPagination()</span><br><span class="line">        p = pagination.paginate_queryset(queryset=users,request=request)</span><br><span class="line">        ser = UserinforSerializers(instance=p,many=<span class="literal">True</span>)</span><br><span class="line">   		<span class="comment"># 由于是加密的游标所以,必须提供内置的方法来生成Response</span></span><br><span class="line">        <span class="keyword">return</span> pagination.get_paginated_response(ser.data)</span><br><span class="line">        <span class="comment"># return Response(ser.data)</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework源码解析之序列化器,分页,路由,渲染器/image-20200616101431910.png" alt="image-20200616101431910"></p>
<h2 id="视图类"><a href="#视图类" class="headerlink" title="视图类"></a>视图类</h2><p>我们现在都是继承于<code>APIView</code> ,那么<code>drf</code>是否有为我们提供更方便的视图类呢?</p>
<p>当然是有的.</p>
<p><code>GenericAPIView</code>:继承自<strong>APIView</strong>，增加了对于列表视图和详情视图可能用到的通用支持方法。通常使用时，可搭配一个或多个Mixin扩展类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(views.APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 列表视图的查询集</span></span><br><span class="line">    queryset = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 视图使用的序列化器</span></span><br><span class="line">    serializer_class = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to use object lookups other than pk, set 'lookup_field'.</span></span><br><span class="line">    <span class="comment"># For more complex lookup requirements override `get_object()`.</span></span><br><span class="line">    <span class="comment"># 关键字查询</span></span><br><span class="line">    lookup_field = <span class="string">'pk'</span></span><br><span class="line">    lookup_url_kwarg = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The filter backend classes to use for queryset filtering</span></span><br><span class="line">    <span class="comment"># 筛选控制</span></span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The style to use for queryset pagination.</span></span><br><span class="line">    <span class="comment"># 分页</span></span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br><span class="line">	<span class="comment"># 获取视图对应的查询集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 返回单个对象   </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># 获取序列化的类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="comment"># 序列化内容</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_context</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 进行筛选</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, queryset)</span>:</span></span><br><span class="line">    <span class="comment"># 获取分页类</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginator</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="comment"># 分页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span><span class="params">(self, queryset)</span>:</span></span><br><span class="line">    <span class="comment"># 返回分页 response</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span><span class="params">(self, data)</span></span></span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserInfo</span><br><span class="line"><span class="comment"># 导入serializers</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># 自定义一个类,继承serializers.ModelSerializer</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination,CursorPagination,LimitOffsetPagination</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinforSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 关联数据库</span></span><br><span class="line">        model=UserInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># fields = ['id','username','password']</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 定义视图数据集</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    <span class="comment"># 分页类</span></span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    <span class="comment"># 序列化类</span></span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        ret = self.get_queryset()</span><br><span class="line">        <span class="comment"># 获取分页</span></span><br><span class="line">        p = self.paginate_queryset(ret)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        ser = self.get_serializer(p,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>
<h3 id="视图扩展类"><a href="#视图扩展类" class="headerlink" title="视图扩展类"></a>视图扩展类</h3><p><code>ListModelMixin</code> :快速实现列表视图</p>
<p>源码:就是内部帮我们实现了上面的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">		</span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        data = self.list(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p><code>CreateModelMixin</code>:实现新增</p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 帮我们实现了新增</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="comment"># raise_exception=True 没有通过验证就直接报错.</span></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_success_headers</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">'Location'</span>: str(data[api_settings.URL_FIELD_NAME])&#125;</span><br><span class="line">        <span class="keyword">except</span> (TypeError, KeyError):</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(CreateModelMixin,ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        data = self.list(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request=request)</span><br></pre></td></tr></table></figure>
<p><code>RetrieveModelMixin</code>:获取单个对象</p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetrieveModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>
<p>需要新增URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'api/&lt;version&gt;/user/'</span>,UserinfoView.as_view()),</span><br><span class="line"><span class="comment">#新增</span></span><br><span class="line">path(<span class="string">'api/&lt;version&gt;/user/&lt;pk&gt;/'</span>,UserinfoView.as_view())</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin,RetrieveModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(CreateModelMixin,ListModelMixin,RetrieveModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>,<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            data = self.retrieve(request)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = self.list(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p><code>UpdateModelMixin</code>:更新</p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Update a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        partial = kwargs.pop(<span class="string">'partial'</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> getattr(instance, <span class="string">'_prefetched_objects_cache'</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If 'prefetch_related' has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_update</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partial_update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        kwargs[<span class="string">'partial'</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(CreateModelMixin,ListModelMixin,RetrieveModelMixin,UpdateModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>,<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            data = self.retrieve(request)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = self.list(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request=request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request=request,*args,**kwargs)</span><br></pre></td></tr></table></figure>
<p><code>DestroyModelMixin</code> :删除对象</p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DestroyModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Destroy a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        self.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        instance.delete()</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(DestroyModelMixin,CreateModelMixin,ListModelMixin,RetrieveModelMixin,UpdateModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>,<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            data = self.retrieve(request)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = self.list(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request=request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request=request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request=request,*args,**kwargs)</span><br></pre></td></tr></table></figure>
<p><code>GenericViewSet</code> 继承了<code>ViewSetMixin, generics.GenericAPIView</code></p>
<p><code>ViewSetMixin</code>中重写了<code>as_view</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  &#123;'get': 'list', 'post': 'create'&#125;</span></span><br><span class="line">    <span class="keyword">for</span> method, action <span class="keyword">in</span> actions.items():</span><br><span class="line">        	   <span class="comment">#获取list方法,</span></span><br><span class="line">                handler = getattr(self, action)</span><br><span class="line">                <span class="comment"># 把list设置给self</span></span><br><span class="line">                setattr(self, method, handler)</span><br></pre></td></tr></table></figure>
<p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'list'</span>)</span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'get'</span>:<span class="string">'list'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> a.items():</span><br><span class="line">    j = getattr(Foo,<span class="string">'list'</span>)</span><br><span class="line">    setattr(Foo,<span class="string">'get'</span>,j)</span><br><span class="line">f = Foo()</span><br><span class="line">f.get()</span><br><span class="line">&gt;&gt;list</span><br></pre></td></tr></table></figure>
<p>所以我们就可以用<code>ModelViewSet</code> + <code>url</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelViewSet</span><span class="params">(mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A viewset that provides default `create()`, `retrieve()`, `update()`,</span></span><br><span class="line"><span class="string">    `partial_update()`, `destroy()` and `list()` actions.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><code>url.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'api/&lt;version&gt;/user/'</span>,UserinfoView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span><br><span class="line">   path(<span class="string">'api/&lt;version&gt;/user/&lt;pk&gt;/'</span>,UserinfoView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,<span class="string">'put'</span>:<span class="string">'update'</span>,<span class="string">'delete'</span>:<span class="string">'destroy'</span>&#125;))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    <span class="comment"># def get(self,request,*args,**kwargs):</span></span><br><span class="line">    <span class="comment">#     return</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br></pre></td></tr></table></figure>
<p>这样就可以实现增删改查了.</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>当然如果嫌之前写的路由太复杂,<code>DRF</code>也为我们提供了路由模块,注意是针对<code>viewset</code></p>
<h3 id="自动生成url"><a href="#自动生成url" class="headerlink" title="自动生成url"></a>自动生成<code>url</code></h3><ul>
<li><code>SimpleRouter</code></li>
<li><code>DefaultRouter</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> testdrf.views <span class="keyword">import</span> Test,UserinfoView</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter</span><br><span class="line">router =SimpleRouter()</span><br><span class="line">router.register(<span class="string">r'user'</span>, UserinfoView,basename=<span class="string">'user'</span>)</span><br><span class="line"><span class="comment"># register(prefix, viewset, base_name)</span></span><br><span class="line"><span class="comment"># prefix 该视图集的路由前缀</span></span><br><span class="line"><span class="comment"># viewset 视图集</span></span><br><span class="line"><span class="comment"># base_name 路由名称的前缀</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/&lt;version&gt;/test/'</span>,Test.as_view()),</span><br><span class="line">    path(<span class="string">'api/&lt;version&gt;/'</span>,include(router.urls))</span><br></pre></td></tr></table></figure>
<p>这样就会帮我们生产两条<code>url</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">api/&lt;version&gt;/ ^user/$ [name=<span class="string">'user-list'</span>]</span><br><span class="line">api/&lt;version&gt;/ ^user/(?P&lt;pk&gt;[^/.]+)/$ [name='user-detail']</span><br></pre></td></tr></table></figure>
<h3 id="视图集中附加action的声明"><a href="#视图集中附加action的声明" class="headerlink" title="视图集中附加action的声明"></a>视图集中附加action的声明</h3><p>在视图集中，如果想要让Router自动帮助我们为自定义的动作生成路由信息，需要使用<code>rest_framework.decorators.action</code>装饰器。</p>
<p>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p>
<p>action装饰器可以接收两个参数：</p>
<ul>
<li><p><strong>methods</strong>: 声明该action对应的请求方式，列表传递</p>
</li>
<li><p><strong>detail</strong>: 声明该action的路径是否与单一资源对应，及是否是<code>xxx/&lt;pk&gt;/action方法名/</code></p>
</li>
<li><ul>
<li>True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li>
<li>False 表示路径格式是<code>xxx/action方法名/</code></li>
</ul>
</li>
</ul>
<p>如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserinfoView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    pagination_class = MyPagination</span><br><span class="line">    serializer_class = UserinforSerializers</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['get'], detail=False)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xxx</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>
<p>则会生成<code>http://127.0.0.1:8000/api/v1/user/xxx/</code>这样的url</p>
<h2 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h2><p>最后一个渲染器模块,也是从<code>dispatch</code>出发</p>
<p><code>self.response = self.finalize_response(request, response, *args, **kwargs)</code>从这里进入</p>
<p><code>neg = self.perform_content_negotiation(request, force=True)</code>再进入这里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_content_negotiation</span><span class="params">(self, request, force=False)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Determine which renderer and media type to use render the response.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="comment"># 获取渲染类</span></span><br><span class="line">       renderers = self.get_renderers()</span><br><span class="line">       conneg = self.get_content_negotiator()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           <span class="keyword">return</span> conneg.select_renderer(request, renderers, self.format_kwarg)</span><br><span class="line">       <span class="keyword">except</span> Exception:</span><br><span class="line">           <span class="keyword">if</span> force:</span><br><span class="line">               <span class="keyword">return</span> (renderers[<span class="number">0</span>], renderers[<span class="number">0</span>].media_type)</span><br><span class="line">           <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_renderers</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Instantiates and returns the list of renderers that this view can use.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">return</span> [renderer() <span class="keyword">for</span> renderer <span class="keyword">in</span> self.renderer_classes]</span><br></pre></td></tr></table></figure>
<p>跟其他的一样都是可以配置的.所以我们应该十分熟悉了.</p>
<p><code>drf</code>内置了很多渲染类,我们可以<code>from rest_framework.renderers import BrowsableAPIRenderer</code>进入<code>renderers</code>查看</p>
<p>基本上我们就只会用到<code>BrowsableAPIRenderer</code>跟<code>JSONRenderer</code> 就差不多了</p>
<p>至此我们的<code>drf</code>组件就完结了.</p>
]]></content>
      <categories>
        <category>django rest_framework</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识回顾(生成器)</title>
    <url>/2020/05/17/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE(%E7%94%9F%E6%88%90%E5%99%A8)/</url>
    <content><![CDATA[<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>
<a id="more"></a>
<p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>
<p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(l)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">g  = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">19</span>))</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x00D71FB0</span>&gt;</span><br></pre></td></tr></table></figure>
<p>l是list 可以直接打印,而g是生成器,我们需要通过next来一个一个打印:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(next(g))</span><br><span class="line"><span class="number">0</span></span><br><span class="line">print(next(g))</span><br><span class="line"><span class="number">1</span></span><br><span class="line">...</span><br><span class="line">print(next(g))</span><br><span class="line"><span class="number">9</span></span><br><span class="line">print(next(g))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">当没有元素时,抛出异常</span><br></pre></td></tr></table></figure>
<p>一般我们通过for循环,而不是使用next()调用</p>
<h3 id="通过yield定义一个生成器"><a href="#通过yield定义一个生成器" class="headerlink" title="通过yield定义一个生成器"></a>通过yield定义一个生成器</h3><p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">1</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">ret = func()</span><br><span class="line">print(next(ret))</span><br><span class="line">print(next(ret))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p>
<h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><p><code>yield from</code> 是在Python3.3才出现的语法。所以这个特性在Python2中是没有的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">1</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">    l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">yield</span> l</span><br><span class="line">ret = func()</span><br><span class="line">print(next(ret))</span><br><span class="line">print(next(ret))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>使用 yield from 之后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">1</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">    l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> l</span><br><span class="line">ret = func()</span><br><span class="line">print(next(ret))</span><br><span class="line">print(next(ret))</span><br><span class="line">print(next(ret))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>可以看到  yield from 把一个可迭代对象变成了一个生成器</p>
<p><code>yield from</code> 后面需要加的是可迭代对象，它可以是普通的可迭代对象，也可以是迭代器，甚至是生成器。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>docker基础</title>
    <url>/2020/06/02/docker%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的<a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p>
<p>Docker是基于Go语言实现的云开源项目</p>
<p>Docker 的核心理念是 <code>Build, Ship, and Run Any App, Anywher</code>，即一次封装，到处运行。</p>
<a id="more"></a>
<h2 id="三大要素"><a href="#三大要素" class="headerlink" title="三大要素"></a>三大要素</h2><p>镜像(image)</p>
<ul>
<li>docker镜像（image）就是一个 只读 的模板。 镜像可以用来创建docker容器，一个镜像可以创建很多容器 。</li>
</ul>
<p>Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/v2-820aee2a33654099d87cdd2b7a1ce741_720w.jpg" alt=""></p>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/v2-d5c06c456761b5a27090e3328b1f6882_720w.jpg" alt=""></p>
<p>总的来说，你最需要记住这点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 Dockerfile 中， 每一条指令都会创建一个镜像层，继而会增加整体镜像的大小。</span><br></pre></td></tr></table></figure>
<p>镜像作为 Docker 最突出的创新之一，它变革了软件交付标准。理解镜像，对理解整个 Docker 的生命周期非常重要。</p>
<p>容器(container)</p>
<ul>
<li><p>docker利用容器（container）独立运行的一个或者一组应用。容器是利用镜像创建的运行实例（相对于Python中的类和对象的概念）。</p>
<p>它可以被启动、开始、停止、删除。每个容器都是互相隔离的，保证安全的平台。</p>
<p>可以把容器看做是一个简易版的Linux环境 (包括root用户名权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。</p>
<p>容器的定义和镜像几乎是一模一样的，也是一堆层的统一视角， 唯一区别的是容器的最上面那一次是可读写的。</p>
</li>
</ul>
<p>相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p1 =<span class="keyword">new</span> Person()</span><br><span class="line">p2 =<span class="keyword">new</span> Person()</span><br><span class="line">p3 =<span class="keyword">new</span> Person()   </span><br><span class="line">p1,p2,p3相当于容器,Person相当于镜像</span><br></pre></td></tr></table></figure>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/image-20200602185842222.png" alt="image-20200602185842222"></p>
<p>仓库(repository)</p>
<ul>
<li><p>仓库（repository）是集中存放镜像文件的场所 。</p>
<p>仓库(repository)和仓库注册服务器（registry）是有区别的。仓库注册服务器上往往放着很多个仓库，每个仓库中又包含了很多个镜像，每个镜像有不同的标签（tag）。</p>
<p>仓库分为公开仓库（public）和私有仓库（private）两种形式。</p>
<p>最大的公开仓库是docker hub(<a href="https://hub.docker.com/),存放了数量庞大的镜像供用户下载.国内的公开仓库包括阿里云,网易云等" target="_blank" rel="noopener">https://hub.docker.com/),存放了数量庞大的镜像供用户下载.国内的公开仓库包括阿里云,网易云等</a></p>
</li>
</ul>
<p>镜像 容器 仓库 他们三者之间的关系图如下:</p>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/1.png" alt="img"></p>
<p> docker本身是一个容器运行载体或者称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就叫image镜像文件。 只有通过这个镜像文件才能生成docker容器。image文件可以看做是容器的模板。 docker根据image文件生成容器的实例。 同一个image文件，可以生成多个同时运行的容器实例。</p>
<ul>
<li><p>image文件生成的容器实例，本身也是一个文件，称为镜像文件；</p>
</li>
<li><p>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器；</p>
</li>
<li><p>至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</p>
</li>
</ul>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>要安装Docker Engine，您需要一个CentOS 7的维护版本。不支持或未测试存档版本。</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>您可以根据需要以不同的方式安装Docker Engine：</p>
<ul>
<li>大多数用户会 <a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository" target="_blank" rel="noopener">设置Docker的存储库</a>并从中进行安装，以简化安装和升级任务。这是推荐的方法。</li>
<li>一些用户下载并<a href="https://docs.docker.com/engine/install/centos/#install-from-a-package" target="_blank" rel="noopener">手动安装</a> RPM软件包， 并完全手动管理升级。这在诸如在无法访问互联网的空白系统上安装Docker的情况下非常有用。</li>
<li>在测试和开发环境中，一些用户选择使用自动 <a href="https://docs.docker.com/engine/install/centos/#install-using-the-convenience-script" target="_blank" rel="noopener">便利脚本</a>来安装Docker。</li>
</ul>
<p>我们按推荐的安装</p>
<h3 id="使用存储库安装"><a href="#使用存储库安装" class="headerlink" title="使用存储库安装"></a>使用存储库安装</h3><p>在新主机上首次安装Docker Engine之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p>
<h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><p>安装<code>yum-utils</code>软件包（提供<code>yum-config-manager</code> 实用程序）并设置<strong>稳定的</strong>存储库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h4 id="安装DOCKER引擎"><a href="#安装DOCKER引擎" class="headerlink" title="安装DOCKER引擎"></a>安装DOCKER引擎</h4><ol>
<li>安装<em>最新版本</em>的Docker Engine和容器，或者转到下一步安装稳定版本：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>
<p>如果提示您接受GPG密钥，请验证指纹是否匹配 <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，如果是，则接受它。</p>
<blockquote>
<p>有多个Docker存储库吗？</p>
<p>如果启用了多个Docker存储库，则在未在<code>yum install</code>or <code>yum update</code>命令中指定版本的情况下进行安装或更新将始终安装可能的最高版本，这可能不适合您的稳定性需求。</p>
</blockquote>
<p>Docker已安装但尚未启动。<code>docker</code>创建该组，但没有用户添加到该组。</p>
<ol>
<li>要安装<em>特定版本</em>的Docker Engine，请在存储库中列出可用版本，然后选择并安装：</li>
</ol>
<p>a. 列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序，并被截断：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>
<p>返回的列表取决于启用了哪些存储库，并且特定于您的CentOS版本（<code>.el7</code>在此示例中以后缀表示）。</p>
<p>b.通过其完全合格的软件包名称安装特定版本，该软件包名称是软件包名称（<code>docker-ce</code>）加上版本字符串（第二列），从第一个冒号（<code>:</code>）一直到第一个连字符，并用连字符（<code>-</code>）分隔。例如，<code>docker-ce-18.09.1</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>
<p>Docker已安装但尚未启动。<code>docker</code>创建该组，但没有用户添加到该组。</p>
<ol>
<li>启动Docker。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<ol>
<li>通过运行<code>hello-world</code> 映像来验证是否正确安装了Docker Engine 。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<p>此命令下载测试图像并在容器中运行。容器运行时，它会打印参考消息并退出。</p>
<p>Docker Engine已安装并正在运行。您需要使用<code>sudo</code>来运行Docker命令。继续进行<a href="https://docs.docker.com/engine/install/linux-postinstall/" target="_blank" rel="noopener">Linux后安装，</a>以允许非特权用户运行Docker命令以及其他可选配置步骤。</p>
<p>其他安装方法可以查看docker的官方文档 :<a href="https://docs.docker.com/engine/install/centos/#prerequisites" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/#prerequisites</a></p>
<h4 id="升级DOCKER引擎"><a href="#升级DOCKER引擎" class="headerlink" title="升级DOCKER引擎"></a>升级DOCKER引擎</h4><p>要升级Docker Engine，请按照<a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository" target="_blank" rel="noopener">安装说明</a>，选择要安装的新版本。</p>
<h2 id="配置阿里云加速"><a href="#配置阿里云加速" class="headerlink" title="配置阿里云加速"></a>配置阿里云加速</h2><p>因为docker默认访问的镜像是在国外的,会导致访问过慢的问题,所以需要配置成国内的,当然有些主机本来就是在国外的你也可以不配置,</p>
<h3 id="注册阿里云账号"><a href="#注册阿里云账号" class="headerlink" title="注册阿里云账号"></a>注册阿里云账号</h3><p>注册地址:<a href="https://account.aliyun.com/" target="_blank" rel="noopener">https://account.aliyun.com/</a></p>
<p>可以用淘宝的账号密码</p>
<p>进入后点击控制台 搜索容器镜像服务</p>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/1-1591095562907.png" alt="1"></p>
<p>找到镜像加速器</p>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/2.png" alt="2"></p>
<p>按提示在你的linux机器上配置即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<p>把这个写入保存</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"你的加速器地址"</span>]</span><br><span class="line">&#125;</span><br><span class="line">:wq 保存</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<font color='red'> 这里的所有操作都是针对centos7以及以上的 </font>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h4><p><code>docker images</code> :列出本机的所有镜像</p>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/3.png" alt="3"></p>
<p>各个选项说明:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">REPOSITORY :表示镜像的仓库源</span><br><span class="line">TAG:镜像的标签,也就是版本</span><br><span class="line">IMAGE ID: 表示镜像的ID</span><br><span class="line">CREATED: 镜像的创建时间</span><br><span class="line">SIZE: 镜像的大小</span><br></pre></td></tr></table></figure>
<p>同一个仓库源可以有多个TAG,代表这个仓库源的不同个版本,我们使用REPOSITORY:TAG来定义不同镜像.如果不指定就表示:latest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage:	docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)<span class="comment"># 显示本地说有镜像,包含中间映像层</span></span><br><span class="line">      --digests         Show digests <span class="comment">#显示摘要信息</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided <span class="comment"># 显示满足条件的镜像</span></span><br><span class="line">      --format string   Pretty-print images using a Go template <span class="comment"># 指定返回值的模板文件</span></span><br><span class="line">      --no-trunc        `Don<span class="string">'t truncate output` # 显示完成镜像信息</span></span><br><span class="line"><span class="string">  -q, --quiet           Only show numeric IDs #  只显示镜像ID</span></span><br></pre></td></tr></table></figure>
<h4 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h4><p><code>docker search [OPTIONS] 镜像名称</code>:查询 <a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a> 上的所有镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">--automated :只列出 automated build类型的镜像；</span><br><span class="line">--no-trunc :显示完整的镜像描述；</span><br><span class="line">-s :列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure>
<p><img src="/images/docker%E5%9F%BA%E7%A1%80/4.png" alt="4"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">NAME: 镜像仓库源的名称</span><br><span class="line">DESCRIPTION: 镜像的描述</span><br><span class="line">OFFICIAL: 是否 docker 官方发布</span><br><span class="line">stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</span><br><span class="line">AUTOMATED: 自动构建。</span><br></pre></td></tr></table></figure>
<h4 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a><code>docker rmi</code></h4><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code>: 删除本地一个或多少镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-f :强制删除；</span><br><span class="line">--no-prune :不移除该镜像的过程镜像，默认移除；</span><br></pre></td></tr></table></figure>
<h4 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a><code>docker pull</code></h4><p><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>: 从镜像仓库中拉取或者更新指定镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-a :拉取所有 tagged 镜像</span><br><span class="line">--disable-content-trust :忽略镜像的校验,默认开启</span><br></pre></td></tr></table></figure>
<p><code>docker build</code></p>
<p><code>docker build [OPTIONS] PATH | URL | -</code> :使用 Dockerfile 创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">--build-arg=[] :设置镜像创建时的变量；</span><br><span class="line">--cpu-shares :设置 cpu 使用权重；</span><br><span class="line">--cpu-period :限制 CPU CFS周期；</span><br><span class="line">--cpu-quota :限制 CPU CFS配额；</span><br><span class="line">--cpuset-cpus :指定使用的CPU id；</span><br><span class="line">--cpuset-mems :指定使用的内存 id；</span><br><span class="line">--disable-content-trust :忽略校验，默认开启；</span><br><span class="line">-f :指定要使用的Dockerfile路径；</span><br><span class="line">--force-rm :设置镜像过程中删除中间容器；</span><br><span class="line">--isolation :使用容器隔离技术；</span><br><span class="line">--label=[] :设置镜像使用的元数据；</span><br><span class="line">-m :设置内存最大值；</span><br><span class="line">--memory-swap :设置Swap的最大值为内存+swap，"-1"表示不限swap；</span><br><span class="line">--no-cache :创建镜像的过程不使用缓存；</span><br><span class="line">--pull :尝试去更新镜像的新版本；</span><br><span class="line">--quiet, -q :安静模式，成功后只输出镜像 ID；</span><br><span class="line">--rm :设置镜像成功后删除中间容器；</span><br><span class="line">--shm-size :设置/dev/shm的大小，默认值是64M；</span><br><span class="line">--ulimit :Ulimit配置。</span><br><span class="line">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class="line">--network: 默认 default。在构建期间设置RUN指令的网络模式</span><br></pre></td></tr></table></figure>
<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a><code>docker run</code></h4><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>:创建一个新的容器并运行一个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；  </span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的高端口</span><br><span class="line">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">--name="nginx-lb": 为容器指定一个名称；</span><br><span class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line">-h "mars": 指定容器的hostname；</span><br><span class="line">-e username="ritchie": 设置环境变量；</span><br><span class="line">--env-file=[]: 从指定文件读入环境变量；</span><br><span class="line">--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；</span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line">--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line">--link=[]: 添加链接到另一个容器；</span><br><span class="line">--expose=[]: 开放一个端口或一组端口；</span><br><span class="line">--volume , -v: 绑定一个卷</span><br></pre></td></tr></table></figure>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>我先从仓库pull一个centos的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# docker pull centos</span><br></pre></td></tr></table></figure>
<p>用之前学的<code>docker images</code>查看一下 本地的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              470671670cac        4 months ago        237MB</span><br><span class="line">hello-world         latest              bf756fb1ae65        5 months ago        13.3kB</span><br></pre></td></tr></table></figure>
<p>我们使用run命令创建一个容器.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# docker run -it --name myCentos centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样我们就以命令行的模式进入了容器</span></span><br><span class="line">[root@de8864d110f0 /]# </span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们用ls命令查看是否进入了容器</span></span><br><span class="line">[root@de8864d110f0 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash"> -i -t 一般都是连起来用的 --name 相当于给容器起个别名 centos 是容器的本地镜像名,也可以用IMAGE ID</span></span><br></pre></td></tr></table></figure>
<p>当然你也会问,你怎么证明是在centos 里面的容器呢?我们用下面的命令来列出容器</p>
<h4 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a><code>docker ps</code></h4><p><code>docker ps [OPTIONS]</code>: 列出容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-a :显示所有的容器，包括未运行的。</span><br><span class="line">-f :根据条件过滤显示的内容。</span><br><span class="line">--format :指定返回值的模板文件。</span><br><span class="line">-l :显示最近创建的容器。</span><br><span class="line">-n :列出最近创建的n个容器。</span><br><span class="line">--no-trunc :不截断输出。</span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line">-s :显示总的文件大小。</span><br></pre></td></tr></table></figure>
<p>我们新开一个终端:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">de8864d110f0        centos              "/bin/bash"         9 minutes ago       Up 9 minutes                            myCentos</span><br></pre></td></tr></table></figure>
<p>CONTAINER ID 跟我们上面的root@de8864d110f0 是一样的.NAMES 也是我们自己命名的</p>
<h4 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a><code>docker commit</code></h4><p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code>:从容器创建一个新的镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-a :提交的镜像作者；</span><br><span class="line">-c :使用Dockerfile指令来创建镜像；</span><br><span class="line">-m :提交时的说明文字；</span><br><span class="line">-p :在commit时，将容器暂停。</span><br></pre></td></tr></table></figure>
<h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><p><code>exit</code>: 退出容器,并停止</p>
<p><code>ctrl+P+Q</code>: 退出容器,不停止</p>
<h4 id="Docker-start-stop-restart-命令"><a href="#Docker-start-stop-restart-命令" class="headerlink" title="Docker start/stop/restart 命令"></a>Docker start/stop/restart 命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器ID 或容器名 :启动一个或多个已经被停止的容器</span><br><span class="line">docker stop 容器ID 或容器名 :停止一个运行中的容器</span><br><span class="line">docker kill 容器ID 或容器名 :强制关闭容器</span><br><span class="line">docker restart :重启容器</span><br></pre></td></tr></table></figure>
<h4 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h4><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code> :删除一个或多个容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-f :通过 SIGKILL 信号强制删除一个运行中的容器。</span><br><span class="line">-l :移除容器间的网络连接，而非容器本身。</span><br><span class="line">-v :删除与容器关联的卷。</span><br></pre></td></tr></table></figure>
<h4 id="以下为重点"><a href="#以下为重点" class="headerlink" title="     以下为重点"></a><font color='red'>     以下为重点</font></h4><h4 id="启动守护式容器"><a href="#启动守护式容器" class="headerlink" title="启动守护式容器"></a>启动守护式容器</h4><p><code>docker run -d 容器名</code> 我们用后台模式来运行一个centos 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# docker run -d centos</span><br><span class="line">b4bc6e623bc47914981e404445af7fbef7ac38a777cabfe10d30c0e20ea6a665</span><br></pre></td></tr></table></figure>
<p>我们看到已经运行起来了,我们用<code>docker ps</code> 来查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>
<p>原来:<font color='red'>Docker 容器后台运行必须有一个前端进程.</font>容器运行的命令如果不是那些一直挂起的命令(比如运行top,tail),就是会自动退出的</p>
<p>这个是docker的机制问题</p>
<h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p><code>docker logs [OPTIONS] CONTAINER</code>:获取容器的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-f : 跟踪日志输出</span><br><span class="line">--since :显示某个开始时间的所有日志</span><br><span class="line">-t : 显示时间戳</span><br><span class="line">--tail :仅列出最新N条容器日志</span><br></pre></td></tr></table></figure>
<h4 id="查看容器中运行的进程信息"><a href="#查看容器中运行的进程信息" class="headerlink" title="查看容器中运行的进程信息"></a>查看容器中运行的进程信息</h4><p><code>docker top [OPTIONS] CONTAINER [ps OPTIONS]</code>: 查看容器中运行的进程信息，支持 ps 命令参数。</p>
<h4 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h4><p><code>docker inspect [OPTIONS] NAME|ID [NAME|ID...]</code>:获取容器/镜像的元数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-f :指定返回值的模板文件。</span><br><span class="line">-s :显示总的文件大小。</span><br><span class="line">--type :为指定类型返回JSON。</span><br></pre></td></tr></table></figure>
<h4 id="连接到正在运行中的容器"><a href="#连接到正在运行中的容器" class="headerlink" title="连接到正在运行中的容器"></a>连接到正在运行中的容器</h4><p><code>docker attach [OPTIONS] CONTAINER</code>:连接到正在运行中的容器</p>
<p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p>
<p>官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上—sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。</p>
<h4 id="在运行的容器中执行命令"><a href="#在运行的容器中执行命令" class="headerlink" title="在运行的容器中执行命令"></a>在运行的容器中执行命令</h4><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>: 在运行的容器中执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">-d :分离模式: 在后台运行</span><br><span class="line">-i :即使没有附加也保持STDIN 打开</span><br><span class="line">-t :分配一个伪终端</span><br></pre></td></tr></table></figure>
<h4 id="数据拷贝"><a href="#数据拷贝" class="headerlink" title="数据拷贝"></a>数据拷贝</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- # 从容器内拷贝到宿主机</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH # 从宿主机拷贝到容器内</span><br><span class="line">OPTIONS说明：</span><br><span class="line">-L :保持源目标中的链接</span><br></pre></td></tr></table></figure>
<p>还有很命令,可以查文档 :<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-command-manual.html</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>基础</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识回顾(装饰器)</title>
    <url>/2020/05/18/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE(%E8%A3%85%E9%A5%B0%E5%99%A8)/</url>
    <content><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器本质上是一个<strong>Python函数</strong>，它可以让其他函数在不需要做任何代码变动的前提下<strong>增加额外功能</strong>，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能</p>
<a id="more"></a>
<p>在python 中 一切皆对象,所以 函数也是可以当做变量传递给另一个函数的.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-----&gt; func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把func函数传给foo</span></span><br><span class="line">foo(func)</span><br><span class="line"></span><br><span class="line">-----&gt; func</span><br></pre></td></tr></table></figure>
<p>那如果我们需要再执行func函数前加一些操作,我们就可以在foo函数里添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-----&gt; func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">    print(<span class="string">'我需要在执行前加的操作'</span>)</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把func函数传给foo</span></span><br><span class="line">foo(func)</span><br><span class="line"></span><br><span class="line">我需要在执行前加的操作</span><br><span class="line">-----&gt; func</span><br></pre></td></tr></table></figure>
<p>当然函数如何你需要返回值,可以在foo函数里return</p>
<h3 id="简单装饰器"><a href="#简单装饰器" class="headerlink" title="简单装饰器"></a>简单装饰器</h3><p>虽然我们实现了在fun函数前加了操作,但是我们执行的时候已经不是func 函数了.所以我们还需要再进行加工</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-----&gt; func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">    print(<span class="string">'我需要在执行前加的操作'</span>)</span><br><span class="line">    <span class="keyword">return</span> f()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把func函数传给foo</span></span><br><span class="line">func = foo(func)</span><br><span class="line">func()</span><br><span class="line">我需要在执行前加的操作</span><br><span class="line">-----&gt; func</span><br><span class="line"><span class="comment"># 但是这样写会报错,func已经不是一个函数了</span></span><br><span class="line"><span class="comment"># 所以我们需要在里面再套一层函数,返回一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">        print(<span class="string">'我需要在执行前加的操作'</span>)</span><br><span class="line">        ret = f()</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把func函数传给foo</span></span><br><span class="line">func = foo(func)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure>
<p>这样就是一个简单的装饰器了.</p>
<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖@"></a>语法糖@</h3><p>我们可以用@来省去<code>func=foo(func)</code></p>
<p>不过我们需要把装饰器放到上面去,因为执行顺序是从上往下执行的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">        print(<span class="string">'我需要在执行前加的操作'</span>)</span><br><span class="line">        ret = f()</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-----&gt; func'</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure>
<h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>其实大家思考一下就知道了 我们执行函数是在inner里面执行的,所以我们只需要把参数加到inner 就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">        print(<span class="string">'我需要在执行前加的操作'</span>)</span><br><span class="line">        当然执行f函数时也需要加参数</span><br><span class="line">        ret = f(name)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'-----&gt; func'</span>,name)</span><br><span class="line"></span><br><span class="line">func(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure>
<p>但是有时候我们不知道func的参数具体是多少个,所以我们可以用<code>*args,**kwargs</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># 加括号执行f 也就是传进来的func函数</span></span><br><span class="line">        print(<span class="string">'我需要在执行前加的操作'</span>)</span><br><span class="line">        当然执行f函数时也需要加参数</span><br><span class="line">        ret = f(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'-----&gt; func'</span>,name)</span><br><span class="line"></span><br><span class="line">func(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h3><p>装饰器相当于<code>func=foo(func)</code>而装饰器带参数相当于</p>
<p><code>foo =outter(arg)</code> <code>func=foo(func)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'arg'</span>,arg)</span><br><span class="line">            print(<span class="string">'start'</span>)</span><br><span class="line">            ret = func(*args,**kwargs)</span><br><span class="line">            print(<span class="string">'end'</span>)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter(123)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'我是主函数'</span>)</span><br><span class="line">    <span class="keyword">return</span> args</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>django rest_framework源码解析(解析模块,认证,权限,频率控制,版本控制)</title>
    <url>/2020/06/09/django-rest_framework(request)/</url>
    <content><![CDATA[<p>上次我们大致走了一遍drf的整个生命周期,以及restfulAPI的快速实现,</p>
<a id="more"></a>
<h2 id="DRF-生命周期"><a href="#DRF-生命周期" class="headerlink" title="DRF 生命周期"></a>DRF 生命周期</h2><p><code>url.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> testdrf.views <span class="keyword">import</span> Test</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/test/'</span>,Test.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br></pre></td></tr></table></figure>
<p>请求先到<code>url</code>然后再走<code>as_view()</code>方法,由于我们的类中没有<code>as_view()</code>方法所以再找父类(APIView)中的<code>as_view()</code>方法</p>
<p><img src="/images/django-rest_framework之request/image-20200609131729542.png" alt="image-20200609131729542"></p>
<p>这个<code>view</code> 还是用的父类的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">view = super().as_view(**initkwargs)</span><br></pre></td></tr></table></figure>
<p>我们知道父类中其实是定义了一个函数,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br></pre></td></tr></table></figure>
<p>最后return 这个<code>view</code>函数</p>
<p><img src="/images/django-rest_framework之request/image-20200609135338861.png" alt="image-20200609135338861"></p>
<p>view函数中返回的是<code>return self.dispatch(request, *args, **kwargs)</code></p>
<p>所以我们去找<code>dispatch(request, *args, **kwargs)</code>方法,self 的话我们先找自己的类中有没有这个方法,然后去找父类中有没有这个方法</p>
<h2 id="request二次封装"><a href="#request二次封装" class="headerlink" title="request二次封装"></a>request二次封装</h2><p>我们发现<code>APIView</code>中有<code>dispatch</code>方法,drf对<code>dispatch</code>进行了重写.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    `.dispatch()` is pretty much the same as Django's regular dispatch,</span></span><br><span class="line"><span class="string">    but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line">    <span class="comment"># 对原来的request进行了封装,等下进去看看</span></span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    <span class="comment"># 把封装后的request进行赋值</span></span><br><span class="line">    self.request = request</span><br><span class="line">    </span><br><span class="line">    self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化 进行drf自己的封装 认证模块</span></span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 按请求方式,分发给视图函数进行处理,返回响应</span></span><br><span class="line">        <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(),</span><br><span class="line">                              self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">        response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="comment"># 异常处理</span></span><br><span class="line">        response = self.handle_exception(exc)</span><br><span class="line">	<span class="comment"># 对response进行处理</span></span><br><span class="line">    self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure>
<p>我们看一下<code>request = self.initialize_request(request, *args, **kwargs)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the initial request object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">	<span class="comment"># get_parser_context方法解析django 的request的内容</span></span><br><span class="line">    parser_context = self.get_parser_context(request)</span><br><span class="line">	<span class="comment"># 返回Request对象的实例</span></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers=self.get_parsers(),</span><br><span class="line">        authenticators=self.get_authenticators(),</span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>进入Request对象查看</p>
<p><img src="/images/django-rest_framework之request/image-20200609152742079.png" alt="image-20200609152742079"></p>
<p>如果调用Request对象实例的属性失败,则会调用<code>__getattr__</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        If an attribute does not exist on this instance, then we also attempt</span></span><br><span class="line"><span class="string">        to proxy it to the underlying HttpRequest object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 如果在drf封装的request中找不到就到django中的request对象中查找,对django原生的兼容</span></span><br><span class="line">            <span class="keyword">return</span> getattr(self._request, attr)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> self.__getattribute__(attr)</span><br></pre></td></tr></table></figure>
<h2 id="解析模块"><a href="#解析模块" class="headerlink" title="解析模块"></a>解析模块</h2><p>我们接下来看一下<code>parsers=self.get_parsers(),</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_parsers</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of parsers that this view can use.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [parser() <span class="keyword">for</span> parser <span class="keyword">in</span> self.parser_classes]</span><br></pre></td></tr></table></figure>
<p>Instantiates and returns the list of parsers that this view can use.</p>
<p>实例化并返回此视图可以使用的解析器列表。</p>
<p>我们在<code>APIView</code>类中可以看到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser_classes = api_settings.DEFAULT_PARSER_CLASSES</span><br></pre></td></tr></table></figure>
<p>查看<code>api_settings</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Settings for REST framework are all namespaced in the REST_FRAMEWORK setting.</span></span><br><span class="line"><span class="string">For example your project's `settings.py` file might look like this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">REST_FRAMEWORK = &#123;</span></span><br><span class="line"><span class="string">    'DEFAULT_RENDERER_CLASSES': [</span></span><br><span class="line"><span class="string">        'rest_framework.renderers.JSONRenderer',</span></span><br><span class="line"><span class="string">        'rest_framework.renderers.TemplateHTMLRenderer',</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    'DEFAULT_PARSER_CLASSES': [</span></span><br><span class="line"><span class="string">        'rest_framework.parsers.JSONParser',</span></span><br><span class="line"><span class="string">        'rest_framework.parsers.FormParser',</span></span><br><span class="line"><span class="string">        'rest_framework.parsers.MultiPartParser',</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">This module provides the `api_setting` object, that is used to access</span></span><br><span class="line"><span class="string">REST framework settings, checking for user settings first, then falling</span></span><br><span class="line"><span class="string">back to the defaults.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>源码中给出只需要在我们的settings配置,就可以使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,</span><br><span class="line">        <span class="string">'rest_framework.renderers.TemplateHTMLRenderer'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'DEFAULT_PARSER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.parsers.JSONParser'</span>,</span><br><span class="line">        <span class="string">'rest_framework.parsers.FormParser'</span>,</span><br><span class="line">        <span class="string">'rest_framework.parsers.MultiPartParser'</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然我们也可以在视图上重写<code>parser_classes</code>来拦截</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 这样就不会走到父类的parser_classes里面了.</span></span><br><span class="line">    parser_classes=[JSONParser,]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="认证模块"><a href="#认证模块" class="headerlink" title="认证模块"></a>认证模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the initial request object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        <span class="comment"># 解析模块</span></span><br><span class="line">        parsers=self.get_parsers(),</span><br><span class="line">        <span class="comment"># 认证</span></span><br><span class="line">        authenticators=self.get_authenticators(),</span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p><code>authenticators=self.get_authenticators(),</code>我们进去看一下这行代码做了什么</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_authenticators</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of authenticators that this view can use.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br></pre></td></tr></table></figure>
<p>这个我们就很熟悉了.之前的解析模块也是这样,我们再回到Request类里面</p>
<p><img src="/images/django-rest_framework之request/image-20200610094329381.png" alt="image-20200610094329381"></p>
<p>到这里就是把原来的参数,都进行了二次封装,封装到了心的request里面</p>
<p>我们回到<code>dispatch</code>继续往下走</p>
<p>我们看<code>self.initial(request, *args, **kwargs)</code>点进去查看发现</p>
<p><img src="/images/django-rest_framework之request/image-20200610095147860.png" alt="image-20200610095147860"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_authentication</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      <span class="string">"""</span></span><br><span class="line"><span class="string">      Perform authentication on the incoming request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Note that if you override this and simply 'pass', then authentication</span></span><br><span class="line"><span class="string">      will instead be performed lazily, the first time either</span></span><br><span class="line"><span class="string">      `request.user` or `request.auth` is accessed.</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      <span class="comment"># 调用的request已经不是原来的django的request,而是二次封装的request</span></span><br><span class="line">      request.user</span><br></pre></td></tr></table></figure>
<p>我们回到Request类查看<code>user</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the user associated with the current request, as authenticated</span></span><br><span class="line"><span class="string">    by the authentication classes provided to the request.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user'</span>):</span><br><span class="line">        <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">            self._authenticate()</span><br><span class="line">    <span class="keyword">return</span> self._user</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Attempt to authenticate the request using each authentication instance</span></span><br><span class="line"><span class="string">    in turn.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure>
<p>基本就了解了 他是执行的<code>authenticate</code>方法,</p>
<p>所以我们可以自定义像上面一样自定义一个类.因为上面调用的是<code>authenticate</code>方法,所以我们的类也需要定义一个<code>authenticate</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        token = request.GET.get(<span class="string">'token'</span>)</span><br><span class="line">        <span class="keyword">if</span>  <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">'认证失败'</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">'1'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    parser_classes=[JSONParser,]</span><br><span class="line">    authentication_classes=[MyAuth]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br></pre></td></tr></table></figure>
<p>至于这里为什么返回一个元组 ,我们可以在rest_framework下的<code>authentication</code>查看其他类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Use Django's session framework for authentication.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns a `User` if the request session currently has a logged in user.</span></span><br><span class="line"><span class="string">        Otherwise returns `None`.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the session-based user from the underlying HttpRequest object</span></span><br><span class="line">        user = getattr(request._request, <span class="string">'user'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Unauthenticated, CSRF validation not required</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user <span class="keyword">or</span> <span class="keyword">not</span> user.is_active:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.enforce_csrf(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># CSRF passed with authenticated user</span></span><br><span class="line">        <span class="keyword">return</span> (user, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>是因为user方法中调用了<code>_authenticate</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Attempt to authenticate the request using each authentication instance</span></span><br><span class="line"><span class="string">    in turn.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 返回一个元组</span></span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">		<span class="comment"># 如果元组为None,则进行下面的赋值</span></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">	<span class="comment"># _not_authenticated 如果走到这里则是匿名用户</span></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework之request/image-20200610111824543.png" alt="image-20200610111824543"></p>
<p><img src="/images/django-rest_framework之request/image-20200610111852595.png" alt="image-20200610111852595"></p>
<p>这样一个简单的自定义认证就完成了.</p>
<p>当然我们也可以在配置文件中添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>
<h2 id="权限模块"><a href="#权限模块" class="headerlink" title="权限模块"></a>权限模块</h2><p>跟认证一样,从<code>self.initial(request, *args, **kwargs)</code>进入</p>
<p><code>self.check_permissions(request)</code>就是权限模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if the request should be permitted.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is not permitted.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 从permission_classes中获取实例的列表</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="comment"># 实例的has_permission方法</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                <span class="comment"># 可以更改message属性来显示提示</span></span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of permissions that this view requires.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br></pre></td></tr></table></figure>
<p>所以跟认证一样,都是可以配置<code>permission_classes</code></p>
<p>在自己的类中配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mypermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">       <span class="comment"># 返回false表示认证不通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 应用在局部</span></span><br><span class="line">    permission_classes=[Mypermission]</span><br><span class="line">    parser_classes=[JSONParser,]</span><br><span class="line">    authentication_classes=[MyAuth]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 当然也可以配置在配置文件中:</span></span><br><span class="line">     <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.permissions.AllowAny'</span>,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework之request//image-20200611135121446.png?lastModify=1591876729" alt="image-20200611135121446"></p>
<p>可以更改message属性来显示提示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mypermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    message = <span class="string">'您没有权限访问该资源'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes=[Mypermission]</span><br><span class="line">    parser_classes=[JSONParser,]</span><br><span class="line">    authentication_classes=[MyAuth]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework之request/image-20200611135702651.png?lastModify=1591876729" alt="image-20200611135702651"></p>
<h2 id="频率控制模块"><a href="#频率控制模块" class="headerlink" title="频率控制模块"></a>频率控制模块</h2><p>跟权限,认证模块一样,<code>self.check_throttles(request)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_throttles</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of throttles that this view uses.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [throttle() <span class="keyword">for</span> throttle <span class="keyword">in</span> self.throttle_classes]</span><br></pre></td></tr></table></figure>
<p>然后我们可以自定义一个类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义全局访问频率字典</span></span><br><span class="line">Throttle_dict = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThrottle</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self,request,view)</span>:</span></span><br><span class="line">        <span class="comment"># 获取用户IP</span></span><br><span class="line">        client_ip= request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br><span class="line">        self.now = time.time()</span><br><span class="line">        <span class="comment"># 判断用户是否第一次访问</span></span><br><span class="line">        <span class="keyword">if</span> client_ip <span class="keyword">not</span> <span class="keyword">in</span> Throttle_dict:</span><br><span class="line">            <span class="comment"># 第一次访问加入到全局字典,并返回</span></span><br><span class="line">            Throttle_dict[client_ip]=[self.now]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 获取访问历史</span></span><br><span class="line">        self.histroy=Throttle_dict.get(client_ip)</span><br><span class="line">        <span class="comment"># 如果在比60大就跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> self.histroy <span class="keyword">and</span> self.histroy[<span class="number">-1</span>]&lt;self.now<span class="number">-10</span>:</span><br><span class="line">            self.histroy.pop()</span><br><span class="line">        <span class="comment"># 判断里面的次数</span></span><br><span class="line">        <span class="keyword">if</span> len(self.histroy)&lt;<span class="number">3</span>:</span><br><span class="line">            self.histroy.insert(<span class="number">0</span>,self.now)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 返回需要等待的时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> - (self.now -  self.histroy[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_classes=[MyThrottle]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        print(request.META[<span class="string">'REMOTE_ADDR'</span>])</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework之request/image-20200611151055320.png?lastModify=1591876729" alt="image-20200611151055320"></p>
<h3 id="restframework提供的内置类"><a href="#restframework提供的内置类" class="headerlink" title="restframework提供的内置类"></a>restframework提供的内置类</h3><p>看<code>SimpleRateThrottle</code>源码 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleRateThrottle</span><span class="params">(BaseThrottle)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A simple cache implementation, that only requires `.get_cache_key()`</span></span><br><span class="line"><span class="string">    to be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The rate (requests / seconds) is set by a `rate` attribute on the View</span></span><br><span class="line"><span class="string">    class.  The attribute is a string of the form 'number_of_requests/period'.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Period should be one of: ('s', 'sec', 'm', 'min', 'h', 'hour', 'd', 'day')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Previous request information used for throttling is stored in the cache.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cache = default_cache</span><br><span class="line">    timer = time.time</span><br><span class="line">    cache_format = <span class="string">'throttle_%(scope)s_%(ident)s'</span></span><br><span class="line">    <span class="comment"># 配置获取的key</span></span><br><span class="line">    scope = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 配置频率配置文件</span></span><br><span class="line">    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'rate'</span>, <span class="literal">None</span>):</span><br><span class="line">            self.rate = self.get_rate()</span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line">    <span class="comment"># 需要重写get_cache_key 获取唯一标识</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Should return a unique cache-key which can be used for throttling.</span></span><br><span class="line"><span class="string">        Must be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        May return `None` if the request should not be throttled.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">'.get_cache_key() must be overridden'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Determine the string representation of the allowed request rate.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'scope'</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">"You must set either `.scope` or `.rate` for '%s' throttle"</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取配置文件中scope</span></span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">"No default throttle rate set for '%s' scope"</span> % self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_rate</span><span class="params">(self, rate)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Given the request rate string, return a two tuple of:</span></span><br><span class="line"><span class="string">        &lt;allowed number of requests&gt;, &lt;period of time in seconds&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">'/'</span>)</span><br><span class="line">        num_requests = int(num)</span><br><span class="line">        <span class="comment"># 解析频率</span></span><br><span class="line">        duration = &#123;<span class="string">'s'</span>: <span class="number">1</span>, <span class="string">'m'</span>: <span class="number">60</span>, <span class="string">'h'</span>: <span class="number">3600</span>, <span class="string">'d'</span>: <span class="number">86400</span>&#125;[period[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Implement the check to see if the request should be throttled.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        On success calls `throttle_success`.</span></span><br><span class="line"><span class="string">        On failure calls `throttle_failure`.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.key = self.get_cache_key(request, view)</span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.history = self.cache.get(self.key, [])</span><br><span class="line">        self.now = self.timer()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Drop any requests from the history which have now passed the</span></span><br><span class="line">        <span class="comment"># throttle duration</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[<span class="number">-1</span>] &lt;= self.now - self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line">        <span class="keyword">if</span> len(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_success</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts the current request's timestamp along with the key</span></span><br><span class="line"><span class="string">        into the cache.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.history.insert(<span class="number">0</span>, self.now)</span><br><span class="line">        self.cache.set(self.key, self.history, self.duration)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_failure</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Called when a request to the API has failed due to throttling.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the recommended next request time in seconds.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.history:</span><br><span class="line">            remaining_duration = self.duration - (self.now - self.history[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            remaining_duration = self.duration</span><br><span class="line"></span><br><span class="line">        available_requests = self.num_requests - len(self.history) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> remaining_duration / float(available_requests)</span><br></pre></td></tr></table></figure>
<p>修改配置文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line"><span class="string">'DEFAULT_THROTTLE_RATES'</span>:&#123;</span><br><span class="line">    <span class="string">'my'</span>:<span class="string">'10/m'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承<code>SimpleRateThrottle</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"><span class="comment"># 继承SimpleRateThrottle</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThrottle_by_rate</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    <span class="comment"># 这个字符串在配置文件中当key使用</span></span><br><span class="line">    scope = <span class="string">'my'</span></span><br><span class="line">    <span class="comment"># 需要重写get_cache_key</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Should return a unique cache-key which can be used for throttling.</span></span><br><span class="line"><span class="string">        Must be overridden.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        May return `None` if the request should not be throttled.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 返回唯一标识</span></span><br><span class="line">        <span class="keyword">return</span> self.get_ident(request)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_classes=[MyThrottle_by_rate]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        print(request.META[<span class="string">'REMOTE_ADDR'</span>])</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求'</span>)</span><br></pre></td></tr></table></figure>
<p>当然除了这个还有其他类,基于用户的频率控制等等.</p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>还是从<code>dispatch</code>出发,走到<code>self.initial(request, *args, **kwargs)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">    neg = self.perform_content_negotiation(request)</span><br><span class="line">    request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line">	<span class="comment"># 版本控制</span></span><br><span class="line">    <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">    version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">    request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">    self.perform_authentication(request)</span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    self.check_throttles(request)</span><br></pre></td></tr></table></figure>
<p><code>self.determine_version(request, *args, **kwargs)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    If versioning is being used, then determine any API version for the</span></span><br><span class="line"><span class="string">    incoming request. Returns a two-tuple of (version, versioning_scheme)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 获取versioning_class 如何没有返回(None, None)</span></span><br><span class="line">    <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">    scheme = self.versioning_class()</span><br><span class="line">    <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br></pre></td></tr></table></figure>
<p>我们进到<code>self.versioning_class()</code></p>
<p>发现是从配置文件获取的,</p>
<p><code>versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</code></p>
<p><code>(scheme.determine_version(request, *args, **kwargs), scheme)</code>表示类中有<code>determine_version</code>方法</p>
<p>我们自定义一个类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVersion</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取版本</span></span><br><span class="line">        version = request.query_params.get(<span class="string">'version'</span>)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 注意这里不是列表,而是单个的类</span></span><br><span class="line">    versioning_class = MyVersion</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求,version:%s'</span>%request.version)</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework之request/image-20200614172426446.png" alt="image-20200614172426446"></p>
<p>当然drf也为我们提供了内置的类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span><span class="params">(BaseVersioning)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To the client this is the same style as `NamespaceVersioning`.</span></span><br><span class="line"><span class="string">    The difference is in the backend - this implementation uses</span></span><br><span class="line"><span class="string">    Django's URL keyword arguments to determine the version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An example URL conf for two views that accept two different versions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        url(r'^(?P&lt;version&gt;[v1|v2]+)/users/$', users_list, name='users-list'),</span></span><br><span class="line"><span class="string">        url(r'^(?P&lt;version&gt;[v1|v2]+)/users/(?P&lt;pk&gt;[0-9]+)/$', users_detail, name='users-detail')</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    GET /1.0/something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 可以自定义错误信息</span></span><br><span class="line">    invalid_version_message = _(<span class="string">'Invalid version in URL path.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取版本default_version默认的版本,这个我们可以去父类找BaseVersioning</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            version = self.default_version</span><br><span class="line">		<span class="comment"># 是否在允许的版本里面</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, viewname, args=None, kwargs=None, request=None, format=None, **extra)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs = &#123;&#125; <span class="keyword">if</span> (kwargs <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">else</span> kwargs</span><br><span class="line">            kwargs[self.version_param] = request.version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super().reverse(</span><br><span class="line">            viewname, args, kwargs, request, format, **extra</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<p>所以我们不得不看一下父类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseVersioning</span>:</span></span><br><span class="line">    <span class="comment"># 这些都是可以写在配置文件里的</span></span><br><span class="line">    <span class="comment"># 默认版本</span></span><br><span class="line">    default_version = api_settings.DEFAULT_VERSION</span><br><span class="line">    <span class="comment"># 允许的版本</span></span><br><span class="line">    allowed_versions = api_settings.ALLOWED_VERSIONS</span><br><span class="line">    <span class="comment"># 版本的key 如 version</span></span><br><span class="line">    version_param = api_settings.VERSION_PARAM</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        msg = <span class="string">'&#123;cls&#125;.determine_version() must be implemented.'</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(msg.format(</span><br><span class="line">            cls=self.__class__.__name__</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, viewname, args=None, kwargs=None, request=None, format=None, **extra)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> _reverse(viewname, args, kwargs, request, format, **extra)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_allowed_version</span><span class="params">(self, version)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.allowed_versions:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> ((version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> version == self.default_version) <span class="keyword">or</span></span><br><span class="line">                (version <span class="keyword">in</span> self.allowed_versions))</span><br></pre></td></tr></table></figure>
<p>所以我们可以直接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    versioning_class = QueryParameterVersioning</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求,version:%s'</span>%request.version)</span><br></pre></td></tr></table></figure>
<p>在<code>settings</code>中配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">'DEFAULT_VERSION'</span>:<span class="string">'v1'</span>,</span><br><span class="line">    <span class="string">'ALLOWED_VERSIONS'</span>:[<span class="string">'v1'</span>,<span class="string">'v2'</span>],</span><br><span class="line">    <span class="string">'VERSION_PARAM'</span>:<span class="string">'version'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取v2版本:</p>
<p><img src="/images/django-rest_framework之request/image-20200614172456508.png" alt="image-20200614172456508"></p>
<p>获取v3时报错:</p>
<p><img src="/images/django-rest_framework之request/image-20200614172539838.png" alt="image-20200614172539838"></p>
<p>当然我们一般都是通过路径参数来获取版本的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置的路径参数类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    versioning_class = URLPathVersioning</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        print(request.version)</span><br><span class="line">        print(request.META[<span class="string">'REMOTE_ADDR'</span>])</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get 请求,version:%s'</span>%request.version)</span><br></pre></td></tr></table></figure>
<p>当然需要修改一下<code>url.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> testdrf.views <span class="keyword">import</span> Test</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/&lt;version&gt;/test/'</span>,Test.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><img src="/images/django-rest_framework之request/image-20200614172949047.png" alt="image-20200614172949047"></p>
<p>一般版本控制都是全局生效的,所以我们可以配置在全局</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK=&#123;</span><br><span class="line">    <span class="string">'DEFAULT_VERSION'</span>:<span class="string">'v1'</span>,</span><br><span class="line">    <span class="string">'ALLOWED_VERSIONS'</span>:[<span class="string">'v1'</span>,<span class="string">'v2'</span>],</span><br><span class="line">    <span class="string">'VERSION_PARAM'</span>:<span class="string">'version'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>:<span class="string">'rest_framework.versioning.URLPathVersioning'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结:一般放在url中,所以我们只需要了解两个内置的类,并了解源码即可</p>
]]></content>
      <categories>
        <category>django rest_framework</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>logging日志模块</title>
    <url>/2020/05/18/logging%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="日志的简单实用"><a href="#日志的简单实用" class="headerlink" title="日志的简单实用"></a>日志的简单实用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入logging模块</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WARNING:root:warning message</span><br><span class="line">ERROR:root:error message</span><br><span class="line">CRITICAL:root:critical message</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>默认情况下python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET），默认的日志格式为日志级别：Logger名称：用户输出消息。</p>
<h3 id="灵活配置日志级别，日志格式，输出位置"><a href="#灵活配置日志级别，日志格式，输出位置" class="headerlink" title="灵活配置日志级别，日志格式，输出位置"></a>灵活配置日志级别，日志格式，输出位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</span><br><span class="line">                    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</span><br><span class="line">                    filename=<span class="string">'log.log'</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure>
<p>查看<code>log.log</code>文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-05-18 23:22:25 my_logging.py[line:8] DEBUG debug message</span><br><span class="line">2020-05-18 23:22:25 my_logging.py[line:9] INFO info message</span><br><span class="line">2020-05-18 23:22:25 my_logging.py[line:10] WARNING warning message</span><br><span class="line">2020-05-18 23:22:25 my_logging.py[line:11] ERROR error message</span><br><span class="line">2020-05-18 23:22:25 my_logging.py[line:12] CRITICAL critical message</span><br></pre></td></tr></table></figure>
<p>可见在<code>logging.basicConfig()</code>函数中可通过具体参数来更改<code>logging</code></p>
<h3 id="既往屏幕输入，也往文件写入log"><a href="#既往屏幕输入，也往文件写入log" class="headerlink" title="既往屏幕输入，也往文件写入log"></a><strong>既往屏幕输入，也往文件写入log</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> StreamHandler,FileHandler</span><br><span class="line"></span><br><span class="line">stream_hander  = StreamHandler()</span><br><span class="line">file_hander = FileHandler(<span class="string">'log.log'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</span><br><span class="line">                    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</span><br><span class="line">                   handlers=[stream_hander,file_hander])</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure>
<p>logging库采取了模块化的设计，提供了许多组件：记录器、处理器、过滤器和格式化器。</p>
<ul>
<li>Logger 暴露了应用程序代码能直接使用的接口。</li>
<li>Handler将（记录器产生的）日志记录发送至合适的目的地。</li>
<li>Filter提供了更好的粒度控制，它可以决定输出哪些日志记录。</li>
<li>Formatter 指明了最终输出中日志记录的布局。</li>
</ul>
<h4 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers:"></a>Loggers:</h4><p>Logger 对象要做三件事情。首先，它们向应用代码暴露了许多方法，这样应用可以在运行时记录消息。其次，记录器对象通过严重程度（默认的过滤设施）或者过滤器对象来决定哪些日志消息需要记录下来。第三，记录器对象将相关的日志消息传递给所有感兴趣的日志处理器。</p>
<p>常用的记录器对象的方法分为两类：配置和发送消息。</p>
<p>这些是最常用的配置方法：</p>
<p>Logger.setLevel()指定logger将会处理的最低的安全等级日志信息, debug是最低的内置安全等级，critical是最高的内建安全等级。例如，如果严重程度为INFO，记录器将只处理INFO，WARNING，ERROR和CRITICAL消息，DEBUG消息被忽略。<br>Logger.addHandler()和Logger.removeHandler()从记录器对象中添加和删除处理程序对象。处理器详见Handlers。<br>Logger.addFilter()和Logger.removeFilter()从记录器对象添加和删除过滤器对象。</p>
<h4 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers:"></a>Handlers:</h4><p><code>处理程序</code>对象负责将适当的日志消息（基于日志消息的严重性）分派到处理程序的指定目标。<code>Logger</code> 对象可以通过<code>addHandler()</code>方法增加零个或多个handler对象。举个例子，一个应用可以将所有的日志消息发送至日志文件，所有的错误级别（error）及以上的日志消息发送至标准输出，所有的严重级别（critical）日志消息发送至某个电子邮箱。在这个例子中需要三个独立的处理器，每一个负责将特定级别的消息发送至特定的位置。</p>
<p>常用的有4种： </p>
<h5 id="1-logging-StreamHandler-gt-控制台输出"><a href="#1-logging-StreamHandler-gt-控制台输出" class="headerlink" title="1)   logging.StreamHandler -&gt; 控制台输出"></a>1)   logging.StreamHandler -&gt; 控制台输出</h5><p>使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。</p>
<p>它的构造函数是：<br>StreamHandler([strm])<br>其中strm参数是一个文件对象。默认是sys.stderr</p>
<h5 id="2-logging-FileHandler-gt-文件输出"><a href="#2-logging-FileHandler-gt-文件输出" class="headerlink" title="2)  logging.FileHandler -&gt; 文件输出"></a>2)  logging.FileHandler -&gt; 文件输出</h5><p>和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。它的构造函数是：<br>FileHandler(filename[,mode])<br>filename是文件名，必须指定一个文件名。<br>mode是文件的打开方式。默认是’a’，即添加到文件末尾。</p>
<h5 id="3-logging-handlers-RotatingFileHandler-gt-按照大小自动分割日志文件，一旦达到指定的大小重新生成文件"><a href="#3-logging-handlers-RotatingFileHandler-gt-按照大小自动分割日志文件，一旦达到指定的大小重新生成文件" class="headerlink" title="3)  logging.handlers.RotatingFileHandler-&gt; 按照大小自动分割日志文件，一旦达到指定的大小重新生成文件"></a>3)  logging.handlers.RotatingFileHandler-&gt; 按照大小自动分割日志文件，一旦达到指定的大小重新生成文件</h5><p>这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建 一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把 文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。它的构造函数是：<br>RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])<br>其中filename和mode两个参数和FileHandler一样。<br>maxBytes用于指定日志文件的最大文件大小。如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。<br>backupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。</p>
<h5 id="4-logging-handlers-TimedRotatingFileHandler-gt-按照时间自动分割日志文件"><a href="#4-logging-handlers-TimedRotatingFileHandler-gt-按照时间自动分割日志文件" class="headerlink" title="4)  logging.handlers.TimedRotatingFileHandler -&gt; 按照时间自动分割日志文件"></a>4)  logging.handlers.TimedRotatingFileHandler -&gt; 按照时间自动分割日志文件</h5><p>这个Handler和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，不过新的文件不是附加数字，而是当前时间。它的构造函数是：<br>TimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])<br>其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。<br>interval是时间间隔。<br>when参数是一个字符串。表示时间间隔的单位，不区分大小写。它有以下取值：<br>S 秒<br>M 分<br>H 小时<br>D 天<br>W 每星期（interval==0时代表星期一）<br>midnight 每天凌晨</p>
<p>配置方法：</p>
<ul>
<li><code>setLevel()</code>方法和日志对象的一样，指明了将会分发日志的最低级别。为什么会有两个<code>setLevel()</code>方法？记录器的级别决定了消息是否要传递给处理器。每个处理器的级别决定了消息是否要分发。</li>
<li><code>setFormatter()</code>为该处理器选择一个格式化器。</li>
<li><code>addFilter()</code>和<code>removeFilter()</code>分别配置和取消配置处理程序上的过滤器对象。</li>
</ul>
<h4 id="Formatters"><a href="#Formatters" class="headerlink" title="Formatters:"></a>Formatters:</h4><p>Formatter对象设置日志信息最后的规则、结构和内容，默认的时间格式为%Y-%m-%d %H:%M:%S，下面是Formatter常用的一些信息</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>%(name)s</th>
<th>Logger的名字</th>
</tr>
</thead>
<tbody>
<tr>
<td>%(levelno)s</td>
<td>数字形式的日志级别</td>
</tr>
<tr>
<td>%(levelname)s</td>
<td>文本形式的日志级别</td>
</tr>
<tr>
<td>%(pathname)s</td>
<td>调用日志输出函数的模块的完整路径名，可能没有</td>
</tr>
<tr>
<td>%(filename)s</td>
<td>调用日志输出函数的模块的文件名</td>
</tr>
<tr>
<td>%(module)s</td>
<td>调用日志输出函数的模块名</td>
</tr>
<tr>
<td>%(funcName)s</td>
<td>调用日志输出函数的函数名</td>
</tr>
<tr>
<td>%(lineno)d</td>
<td>调用日志输出函数的语句所在的代码行</td>
</tr>
<tr>
<td>%(created)f</td>
<td>当前时间，用UNIX标准的表示时间的浮 点数表示</td>
</tr>
<tr>
<td>%(relativeCreated)d</td>
<td>输出日志信息时的，自Logger创建以 来的毫秒数</td>
</tr>
<tr>
<td>%(asctime)s</td>
<td>字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</td>
</tr>
<tr>
<td>%(thread)d</td>
<td>线程ID。可能没有</td>
</tr>
<tr>
<td>%(threadName)s</td>
<td>线程名。可能没有</td>
</tr>
<tr>
<td>%(process)d</td>
<td>进程ID。可能没有</td>
</tr>
<tr>
<td>%(message)s</td>
<td>用户输出的消息</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter:"></a>Filter:</h4><p>过滤器（filter）用于接受或拒绝传递到记录器或处理器中的日志。虽然Python 3.2之后filter不一定非要用类来实现，但为了向下兼容，还是写一个包含filter()方法的类更好。</p>
<p>filter()方法接收一个参数record，即一条日志记录。该方法返回0表示拒绝记录，返回非0则接受。需要注意的是，记录器的过滤器不会对其子记录器传递上来的日志进行过滤，而只对自身记录的日志进行过滤。</p>
<h3 id="按日志不同等级保存日志到不同等级的文件中"><a href="#按日志不同等级保存日志到不同等级的文件中" class="headerlink" title="按日志不同等级保存日志到不同等级的文件中"></a>按日志不同等级保存日志到不同等级的文件中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置logger对象</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'日志模块'</span>)</span><br><span class="line"><span class="comment"># 设置最低的安全等级日志信息</span></span><br><span class="line">logger.setLevel(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="comment"># StreamHandler</span></span><br><span class="line">stream_handler = logging.StreamHandler()</span><br><span class="line">stream_handler.setLevel(level=logging.DEBUG)</span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件输出</span></span><br><span class="line"><span class="comment"># FileHandler</span></span><br><span class="line"><span class="comment"># 设置日志文件名</span></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">'log.log'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 设置等级</span></span><br><span class="line">file_handler.setLevel(level=logging.INFO)</span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"><span class="comment"># 设置过滤器</span></span><br><span class="line">info_filter = logging.Filter()</span><br><span class="line"><span class="comment"># 等级必须小于error</span></span><br><span class="line">info_filter.filter = <span class="keyword">lambda</span> record:record.levelno&lt;logging.ERROR</span><br><span class="line"><span class="comment"># 把过滤器放到handler</span></span><br><span class="line">file_handler.addFilter(info_filter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"><span class="comment"># 把handler加到logger</span></span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置错误日志存放文件</span></span><br><span class="line">error_handler = logging.FileHandler(<span class="string">'error.log'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">error_handler.setLevel(level=logging.ERROR)</span><br><span class="line">error_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(error_handler)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'This is a log info'</span>)</span><br><span class="line">logger.debug(<span class="string">'Debugging'</span>)</span><br><span class="line">logger.warning(<span class="string">'Warning exists'</span>)</span><br><span class="line">logger.info(<span class="string">'Finish'</span>)</span><br><span class="line">logger.error(<span class="string">'Finish'</span>)</span><br><span class="line">logger.error(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure>
<p>基本日常使用这样就够了</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2020/07/10/vuex/</url>
    <content><![CDATA[<h3 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex?"></a>什么是Vuex?</h3><p>Vuex 是实现组件全局状态(数据)管理的一种机制,可以方便的实现组件之间的数据共享.</p>
<p><img src="/images/vuex/image-20200710180830043.png" alt="image-20200710180830043"  width="100%"/></p>
<p>如何没有vuex,我们大范围的传值的时候会十分麻烦,而有了vuex 我们只需要跟store相互就可以了</p>
<font color="red">当然我们也不是所有的数据都需要放到vuex中,有一些组件私有的数据,我们没有必要把他放到vuex中,只有组件之间共享的数据,才有必要放到vuex中.</font>

<h3 id="使用vuex统一管理状态的优点"><a href="#使用vuex统一管理状态的优点" class="headerlink" title="使用vuex统一管理状态的优点:"></a>使用vuex统一管理状态的优点:</h3><ol>
<li>能够在vuex中几种管理共享的数据,易于开发和维护.</li>
<li>能够高效的实现组件之间的数据共享,提供开发效率.</li>
<li>存储在vuex中的数据都是响应式的,能够实时保持数据与页面的同步</li>
</ol>
<a id="more"></a>
<h3 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h3><h4 id="安装vuex依赖包"><a href="#安装vuex依赖包" class="headerlink" title="安装vuex依赖包"></a>安装vuex依赖包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当然你也可以用 cnpm</span></span><br></pre></td></tr></table></figure>
<h4 id="导入vuex包"><a href="#导入vuex包" class="headerlink" title="导入vuex包"></a>导入vuex包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="comment">//将vuex放入vue中</span></span><br><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure>
<h4 id="创建store对象"><a href="#创建store对象" class="headerlink" title="创建store对象"></a>创建store对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="将store对象挂载到vue实例中"><a href="#将store对象挂载到vue实例中" class="headerlink" title="将store对象挂载到vue实例中"></a>将store对象挂载到vue实例中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>;</span><br><span class="line"><span class="comment">// 导入store组件中的store实例对象</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">//将创建的共享数据对象,挂载到vue实例中</span></span><br><span class="line">  <span class="comment">//所有组件都可以从store中获取数据</span></span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="vuex的核心概念"><a href="#vuex的核心概念" class="headerlink" title="vuex的核心概念"></a>vuex的核心概念</h3><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>提供唯一的公共数据源,所有的共享数据都统一放到Store的state中进行存储</p>
<h5 id="声明数据"><a href="#声明数据" class="headerlink" title="声明数据"></a>声明数据</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h5 id="组件访问state中的数据"><a href="#组件访问state中的数据" class="headerlink" title="组件访问state中的数据"></a>组件访问state中的数据</h5><p>第一种方式:this.$store.state.全局数据名称  </p>
<p>第二种方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从vuex中按需导入mapState 函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span>  <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//通过刚才导入的mapState函数,将当前组件需要的全局数据,映射为当前组件的computed计算属性</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    <span class="comment">//通过展开运算符映射成计算属性</span></span><br><span class="line">    ...mapState([<span class="string">'count'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Moutation"><a href="#Moutation" class="headerlink" title="Moutation"></a>Moutation</h4><p>用于变更Store中的数据.<font color="red">    不能写异步的代码!!!</font></p>
<ol>
<li>只能通过mutation变更Store数据,不可以直接操作Store中的数据</li>
<li>通过这种方式虽然操作起来比较繁琐,但是可以集中监控所有数据的变化</li>
</ol>
<p>第一种调用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//定义mutations</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//在相应的组件中调用</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    addCount() &#123;</span><br><span class="line">        <span class="comment">//通过commit触发</span></span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'add'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>添加参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//定义mutations</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addN(state,step) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count += step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//在相应的组件中调用</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    addCount() &#123;</span><br><span class="line">        <span class="comment">//通过commit触发</span></span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'add'</span>,<span class="keyword">this</span>.step)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>第二种调用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//定义mutations</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        add(state) &#123;</span><br><span class="line">            <span class="comment">//变更状态</span></span><br><span class="line">            state.count += <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        addN(state, step) &#123;</span><br><span class="line">            state.count += step</span><br><span class="line">        &#125;,</span><br><span class="line">        sub(state) &#123;</span><br><span class="line">            state.count -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"> <span class="comment">//在相应的组件中导入mapMutations</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//在methods中通过...映射为当前组件的methods方法</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    ...mapMutations([<span class="string">'sub'</span>])</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//有参数的话 可以再定义一个函数,来调用this.subN(参数)</span></span><br></pre></td></tr></table></figure>
<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>我们刚才说过Mutation中不能执行异步操作,那么我们如果要用异步操作怎么办?这时候就需要用到action了</p>
<p>第一种方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义action</span></span><br><span class="line">    actions: &#123;</span><br><span class="line">        addAsync(context) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//不能直接修改state中的数据,必须通过Mutation中的函数</span></span><br><span class="line">                context.commit(<span class="string">'add'</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="comment">//在相应组件中使用与Mutation类似,通过this.$store.dispatch</span></span><br><span class="line">  addAsync() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'addAsync'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第二种方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">subAsync(context) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                context.commit(<span class="string">'sub'</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//在相应的组件中导入mapMutations</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//在methods中通过...映射为当前组件的methods方法</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'sub'</span>])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>Getter 用于对Store 中的数据进行加工处理形成新的数据.</p>
<ol>
<li>Getter 可以对Store中已有数据加工处理之后形成新的数据,类似Vue的计算属性</li>
<li>Store中数据发生变化,Getter的数据也跟着变化</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义Getter</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">        showNum: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`当前最新的数字:<span class="subst">$&#123;state.count&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//当然调用也有两种</span></span><br><span class="line"><span class="number">1.</span>使用<span class="keyword">this</span>.$store.getters.名称</span><br><span class="line"><span class="number">2.</span>导入 mapGetters </span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'showNum'</span>])</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>
<ol>
<li>应用层级的状态应该集中到单个 store 对象中。</li>
<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>
<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>
</ol>
<p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p>
<p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... # 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── actions.js        # 根级别的 action</span><br><span class="line">    ├── mutations.js      # 根级别的 mutation</span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       # 购物车模块</span><br><span class="line">        └── products.js   # 产品模块</span><br></pre></td></tr></table></figure>
<p>参考官网文档:<a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/installation.html</a></p>
]]></content>
      <categories>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作redis</title>
    <url>/2020/06/07/python%E6%93%8D%E4%BD%9Credis/</url>
    <content><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>
<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>
<a id="more"></a>
<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p>
<p>Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul>
<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ul>
<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><h3 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装:"></a>windows安装:</h3><p>下载地址:<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a></p>
<p>直接下一步一步就可以了</p>
<h3 id="LInux下安装"><a href="#LInux下安装" class="headerlink" title="LInux下安装:"></a>LInux下安装:</h3><ul>
<li>centos:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">yum install redis -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当然没有权限的时候记得加sudo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure>
<ul>
<li>untubu</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure>
<p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-6.0.4.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf redis-6.0.4.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-6.0.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure>
<p><code>src</code> 目录 中现在提供了已编译的二进制文件 。使用以下命令运行Redis：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> src/redis-server</span></span><br></pre></td></tr></table></figure>
<p>当然这些都是运维会配置好的,我们了解即可</p>
<h2 id="Python安装-redis-模块"><a href="#Python安装-redis-模块" class="headerlink" title="Python安装 redis 模块"></a>Python安装 redis 模块</h2><p>Python 要使用 redis，需要先安装 redis 模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure>
<p>redis 提供两个类 Redis 和 StrictRedis, StrictRedis 用于实现大部分官方的命令，Redis 是 StrictRedis 的子类，用于向后兼用旧版本。</p>
<p><font color='red'>redis 取出的结果默认是字节</font>，我们可以设定 <strong>decode_responses=True</strong> 改成字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis   <span class="comment"># 导入redis 模块</span></span><br><span class="line">r = redis.Redis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, decode_responses=<span class="literal">True</span>)  </span><br><span class="line">r.set(<span class="string">'name'</span>, <span class="string">'runoob'</span>)  <span class="comment"># 设置 name 对应的值</span></span><br><span class="line">print(r[<span class="string">'name'</span>])</span><br><span class="line">print(r.get(<span class="string">'name'</span>))  <span class="comment"># 取出键 name 对应的值</span></span><br><span class="line">print(type(r.get(<span class="string">'name'</span>)))  <span class="comment"># 查看类型</span></span><br></pre></td></tr></table></figure>
<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>redis-py 使用 connection pool 来管理对一个 redis server 的所有连接，避免每次建立、释放连接的开销。</p>
<p>默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数 Redis，这样就可以实现多个 Redis 实例共享一个连接池。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis    <span class="comment"># 导入redis 模块</span></span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(<span class="string">'name'</span>, <span class="string">'runoob'</span>)  <span class="comment"># 设置 name 对应的值</span></span><br><span class="line">print(r.get(<span class="string">'name'</span>))  <span class="comment"># 取出键 name 对应的值</span></span><br></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="redis基本命令-String"><a href="#redis基本命令-String" class="headerlink" title="redis基本命令 String"></a>redis基本命令 String</h3><h4 id="set-name-value-ex-None-px-None-nx-False-xx-False"><a href="#set-name-value-ex-None-px-None-nx-False-xx-False" class="headerlink" title="set(name, value, ex=None, px=None, nx=False, xx=False)"></a>set(name, value, ex=None, px=None, nx=False, xx=False)</h4><p>在Redis中设置值，默认，不存在则创建，存在则修改<br> 参数：</p>
<ul>
<li>ex，过期时间（秒）</li>
<li>px，过期时间（毫秒）</li>
<li>nx，如果设置为True，则只有name不存在时，当前set操作才执行</li>
<li>xx，如果设置为True，则只有name存在时，当前set操作才执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.set(<span class="string">'k'</span>,<span class="string">'v'</span>,ex=<span class="number">2</span>)</span><br><span class="line">print(r.get(<span class="string">'k'</span>)) <span class="string">'v'</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">print(r.get(<span class="string">'k'</span>)) <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h4 id="mset-args-kwargs-批量设置值"><a href="#mset-args-kwargs-批量设置值" class="headerlink" title="mset(*args, **kwargs):批量设置值"></a><code>mset(*args, **kwargs)</code>:批量设置值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.mget(&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;)</span><br><span class="line">r.mset(k1=<span class="string">"v1"</span>, k2=<span class="string">"v2"</span>) <span class="comment"># 这里k1 和k2 不能带引号 一次设置对个键值对</span></span><br><span class="line">print(r.mget(<span class="string">"k1"</span>, <span class="string">"k2"</span>))   <span class="comment"># 一次取出多个键对应的值</span></span><br><span class="line">print(r.mget(<span class="string">"k1"</span>))</span><br></pre></td></tr></table></figure>
<h4 id="mget-keys-args-批量获取"><a href="#mget-keys-args-批量获取" class="headerlink" title="mget(keys, *args):批量获取"></a><code>mget(keys, *args)</code>:批量获取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.mget(<span class="string">'k1'</span>, <span class="string">'k2'</span>))</span><br><span class="line">print(r.mget([<span class="string">'k1'</span>, <span class="string">'k2'</span>]))</span><br><span class="line">print(r.mget(<span class="string">"fruit"</span>, <span class="string">"fruit1"</span>, <span class="string">"fruit2"</span>, <span class="string">"k1"</span>, <span class="string">"k2"</span>))  <span class="comment"># 将目前redis缓存中的键对应的值批量取出来</span></span><br></pre></td></tr></table></figure>
<h4 id="getset-name-value-设置新值并获取原来的值"><a href="#getset-name-value-设置新值并获取原来的值" class="headerlink" title="getset(name, value):设置新值并获取原来的值"></a><code>getset(name, value)</code>:设置新值并获取原来的值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.getset(<span class="string">"food"</span>, <span class="string">"barbecue"</span>))  <span class="comment"># 设置的新值是barbecue 设置前的值是beef</span></span><br></pre></td></tr></table></figure>
<h3 id="redis基本命令-hash"><a href="#redis基本命令-hash" class="headerlink" title="redis基本命令 hash"></a>redis基本命令 hash</h3><h4 id="hset-name-key-value"><a href="#hset-name-key-value" class="headerlink" title="hset(name, key, value)"></a><code>hset(name, key, value)</code></h4><p>单个增加—修改(单个取出)—没有就新增，有的话就修改</p>
<p>name对应的hash中设置一个键值对（不存在，则创建；否则，修改）<br> 参数：</p>
<ul>
<li><p>name，redis的name</p>
</li>
<li><p>key，name对应的hash中的key</p>
</li>
<li><p>value，name对应的hash中的value</p>
</li>
</ul>
<p>注：<br>     hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.hset(<span class="string">"hash1"</span>, <span class="string">"k1"</span>, <span class="string">"v1"</span>)</span><br><span class="line">r.hset(<span class="string">"hash1"</span>, <span class="string">"k2"</span>, <span class="string">"v2"</span>)</span><br><span class="line">print(r.hkeys(<span class="string">"hash1"</span>)) <span class="comment"># 取hash中所有的key</span></span><br><span class="line">print(r.hget(<span class="string">"hash1"</span>, <span class="string">"k1"</span>))    <span class="comment"># 单个取hash的key对应的值</span></span><br><span class="line">print(r.hmget(<span class="string">"hash1"</span>, <span class="string">"k1"</span>, <span class="string">"k2"</span>)) <span class="comment"># 多个取hash的key对应的值</span></span><br><span class="line">r.hsetnx(<span class="string">"hash1"</span>, <span class="string">"k2"</span>, <span class="string">"v3"</span>) <span class="comment"># 只能新建</span></span><br><span class="line">print(r.hget(<span class="string">"hash1"</span>, <span class="string">"k2"</span>))</span><br></pre></td></tr></table></figure>
<h4 id="hmset-name-mapping-批量增加（取出）"><a href="#hmset-name-mapping-批量增加（取出）" class="headerlink" title="hmset(name, mapping)批量增加（取出）"></a><code>hmset(name, mapping)</code>批量增加（取出）</h4><p>在name对应的hash中批量设置键值对<br>参数：</p>
<ul>
<li>name，redis的name</li>
<li>mapping，字典，如：{‘k1’:’v1’, ‘k2’: ‘v2’}</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.hmset(<span class="string">"hash2"</span>, &#123;<span class="string">"k2"</span>: <span class="string">"v2"</span>, <span class="string">"k3"</span>: <span class="string">"v3"</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="hget-name-key-在name对应的hash中获取根据key获取value"><a href="#hget-name-key-在name对应的hash中获取根据key获取value" class="headerlink" title="hget(name,key)在name对应的hash中获取根据key获取value"></a><code>hget(name,key)</code>在name对应的hash中获取根据key获取value</h4><h4 id="hmget-name-keys-args-在name对应的hash中获取多个key的值"><a href="#hmget-name-keys-args-在name对应的hash中获取多个key的值" class="headerlink" title="hmget(name, keys, *args) 在name对应的hash中获取多个key的值"></a><code>hmget(name, keys, *args)</code> 在name对应的hash中获取多个key的值</h4><p> 参数：</p>
<ul>
<li>name，reids对应的name</li>
<li>keys，要获取key集合，如：[‘k1’, ‘k2’, ‘k3’]</li>
<li>*args，要获取的key，如：k1,k2,k3</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.hget(<span class="string">"hash2"</span>, <span class="string">"k2"</span>))  <span class="comment"># 单个取出"hash2"的key-k2对应的value</span></span><br><span class="line">print(r.hmget(<span class="string">"hash2"</span>, <span class="string">"k2"</span>, <span class="string">"k3"</span>))  <span class="comment"># 批量取出"hash2"的key-k2 k3对应的value --方式1</span></span><br><span class="line">print(r.hmget(<span class="string">"hash2"</span>, [<span class="string">"k2"</span>, <span class="string">"k3"</span>]))  <span class="comment"># 批量取出"hash2"的key-k2 k3对应的value --方式2</span></span><br></pre></td></tr></table></figure>
<p><code>hgetall(name)</code>取出所有的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.hgetall(<span class="string">"hash1"</span>))</span><br></pre></td></tr></table></figure>
<p><code>hexists(name, key)</code>判断成员是否存在（类似字典的in）</p>
<p>检查name对应的hash是否存在当前传入的key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.hexists(<span class="string">"hash1"</span>, <span class="string">"k4"</span>))  <span class="comment"># False 不存在</span></span><br><span class="line">print(r.hexists(<span class="string">"hash1"</span>, <span class="string">"k1"</span>))  <span class="comment"># True 存在</span></span><br></pre></td></tr></table></figure>
<p><code>hdel(name,*keys)</code>删除键值对</p>
<p>将name对应的hash中指定key的键值对删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.hgetall(<span class="string">"hash1"</span>))</span><br><span class="line">r.hset(<span class="string">"hash1"</span>, <span class="string">"k2"</span>, <span class="string">"v222"</span>)   <span class="comment"># 修改已有的key k2</span></span><br><span class="line">r.hset(<span class="string">"hash1"</span>, <span class="string">"k11"</span>, <span class="string">"v1"</span>)   <span class="comment"># 新增键值对 k11</span></span><br><span class="line">r.hdel(<span class="string">"hash1"</span>, <span class="string">"k1"</span>)    <span class="comment"># 删除一个键值对</span></span><br><span class="line">print(r.hgetall(<span class="string">"hash1"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="redis基本命令-list"><a href="#redis基本命令-list" class="headerlink" title="redis基本命令 list"></a>redis基本命令 list</h3><h4 id="lpush-name-values-左添加-amp-rpush右添加"><a href="#lpush-name-values-左添加-amp-rpush右添加" class="headerlink" title="lpush(name,values) 左添加 &amp;rpush右添加"></a><code>lpush(name,values)</code> 左添加 &amp;<code>rpush</code>右添加</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.lpush(<span class="string">"list1"</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)    <span class="comment"># 在列表的左边，依次添加11,22,33</span></span><br><span class="line">r.rpush(<span class="string">"list2"</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>)    <span class="comment"># 在列表的右边，依次添加44,55,66</span></span><br></pre></td></tr></table></figure>
<h4 id="lpushx-name-value-存在才添加左边-amp-rpushx-name-value-存在才添加右边"><a href="#lpushx-name-value-存在才添加左边-amp-rpushx-name-value-存在才添加右边" class="headerlink" title="lpushx(name,value) 存在才添加左边 &amp;rpushx(name,value) 存在才添加右边"></a><code>lpushx(name,value)</code> 存在才添加左边 &amp;<code>rpushx(name,value)</code> 存在才添加右边</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.lpushx(<span class="string">"list10"</span>, <span class="number">10</span>)   <span class="comment"># 这里list10不存在</span></span><br><span class="line">print(r.llen(<span class="string">"list10"</span>))  <span class="comment"># 0</span></span><br><span class="line">print(r.lrange(<span class="string">"list10"</span>, <span class="number">0</span>, <span class="number">-1</span>))  <span class="comment"># []</span></span><br><span class="line">r.lpushx(<span class="string">"list2"</span>, <span class="number">77</span>)   <span class="comment"># 这里"list2"之前已经存在，往列表最左边添加一个元素，一次只能添加一个</span></span><br><span class="line">print(r.llen(<span class="string">"list2"</span>))  <span class="comment"># 列表长度</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>)) <span class="comment"># 切片取出值，范围是索引号0到-1(最后一个元素</span></span><br><span class="line">r.rpushx(<span class="string">"list2"</span>, <span class="number">99</span>)   <span class="comment"># 这里"foo_list1"之前已经存在，往列表最右边添加一个元素，一次只能添加一个</span></span><br><span class="line">print(r.llen(<span class="string">"list2"</span>))  <span class="comment"># 列表长度</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>)) <span class="comment"># 切片取出值，范围是索引号0到-1(最后一个元素)</span></span><br></pre></td></tr></table></figure>
<h4 id="linsert-name-where-refvalue-value-新增（固定索引号位置插入元素）"><a href="#linsert-name-where-refvalue-value-新增（固定索引号位置插入元素）" class="headerlink" title="linsert(name, where, refvalue, value))新增（固定索引号位置插入元素）"></a><code>linsert(name, where, refvalue, value))</code>新增（固定索引号位置插入元素）</h4><p>在name对应的列表的某一个值前或后插入一个新值<br>参数：</p>
<ul>
<li>name，redis的name</li>
<li>where，BEFORE或AFTER</li>
<li>refvalue，标杆值，即：在它前后插入数据</li>
<li>value，要插入的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.linsert(<span class="string">"list2"</span>, <span class="string">"before"</span>, <span class="string">"11"</span>, <span class="string">"00"</span>)   <span class="comment"># 往列表中左边第一个出现的元素"11"前插入元素"00"</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))   <span class="comment"># 切片取出值，范围是索引号0-最后一个元素</span></span><br></pre></td></tr></table></figure>
<p><code>r.lset(name, index, value)</code>修改（指定索引号进行修改）</p>
<p>对name对应的list中的某一个索引位置重新赋值<br>参数：</p>
<ul>
<li>name，redis的name</li>
<li>index，list的索引位置</li>
<li>value，要设置的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.lset(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-11</span>)    <span class="comment"># 把索引号是0的元素修改成-11</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br></pre></td></tr></table></figure>
<p><code>r.lrem(name, value, num)</code>删除（指定值进行删除）</p>
<p>在name对应的list中删除指定的值<br> 参数：</p>
<ul>
<li>name，redis的name</li>
<li>value，要删除的值</li>
<li>num， num=0，删除列表中所有的指定值；</li>
<li>num=2,从前到后，删除2个； num=1,从前到后，删除左边第1个</li>
<li>num=-2,从后向前，删除2个</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.lrem(<span class="string">"list2"</span>, <span class="string">"11"</span>, <span class="number">1</span>)    <span class="comment"># 将列表中左边第一次出现的"11"删除</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">r.lrem(<span class="string">"list2"</span>, <span class="string">"99"</span>, <span class="number">-1</span>)    <span class="comment"># 将列表中右边第一次出现的"99"删除</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">r.lrem(<span class="string">"list2"</span>, <span class="string">"22"</span>, <span class="number">0</span>)    <span class="comment"># 将列表中所有的"22"删除</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br></pre></td></tr></table></figure>
<p><code>lpop(name)</code>删除并返回</p>
<p>在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</p>
<ul>
<li>rpop(name) 表示从右向左操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r.lpop(<span class="string">"list2"</span>)    <span class="comment"># 删除列表最左边的元素，并且返回删除的元素</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">r.rpop(<span class="string">"list2"</span>)    <span class="comment"># 删除列表最右边的元素，并且返回删除的元素</span></span><br><span class="line">print(r.lrange(<span class="string">"list2"</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br></pre></td></tr></table></figure>
<p><code>lindex(name, index)</code>取值（根据索引号取值）</p>
<p>在name对应的列表中根据索引获取列表元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.lindex(<span class="string">"list2"</span>, <span class="number">0</span>))  <span class="comment"># 取出索引号是0的值</span></span><br></pre></td></tr></table></figure>
<p>具体操作可以参考 :<a href="https://www.jianshu.com/p/2639549bedc8" target="_blank" rel="noopener">https://www.jianshu.com/p/2639549bedc8</a></p>
<p>常用其实就那么几个get.set.hget,gset</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>两个重要极限</title>
    <url>/2020/08/21/%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/</url>
    <content><![CDATA[<p>最近在重温高数,记录一下,两个重要的极限以及例子</p>
<ol>
<li>$\lim\limits_{x \to {0} } \frac {\sin x} {x} =1$</li>
<li>$\lim\limits_{x \to {\infty} } (1+\frac {1} {x})^x = e$</li>
</ol>
<a id="more"></a>
<h3 id="lim-limits-x-to-0-frac-sin-x-x-1"><a href="#lim-limits-x-to-0-frac-sin-x-x-1" class="headerlink" title="$\lim\limits_{x \to {0} } \frac {\sin x} {x} =1$"></a>$\lim\limits_{x \to {0} } \frac {\sin x} {x} =1$</h3><ol>
<li>求 $\lim \limits_{x \to {0}} \frac {\tan x}{x}$</li>
</ol>
<p>解:</p>
<script type="math/tex; mode=display">
\lim \limits_{x \to 0} \frac { \frac {\sin x}{ \cos x} }{x}= \lim \limits_{x \to 0} \frac {\sin x} {x} \frac {1} {\cos x} =
\lim \limits_{x \to 0}  \frac {\sin x} {x}  \lim \limits_{x \to 0} \frac {1} {\cos x} =1*1=1</script><ol>
<li>求$\lim \limits_{x \to {0}} \frac {\sin 3x}{x}$</li>
</ol>
<p>解:</p>
<script type="math/tex; mode=display">
\lim \limits_{x \to {0}} \frac {\sin 3x}{x} = 3\lim \limits_{3x \to {0}} \frac {\sin 3x}{3x} =3</script><ol>
<li>求 $\lim \limits_{x \to {0}} \frac { 1 - \cos x}{x^2}$</li>
</ol>
<p>解: 通过降幂公式 $\sin²α= \frac {1-\cos(2α)}{2}$</p>
<script type="math/tex; mode=display">
\lim \limits_{x \to {0}} \frac { 1 - \cos x}{x^2}=\lim \limits_{x \to {0}} \frac { 2\sin ^2  \frac{x}{2}}{x^2}=2\lim \limits_{ \frac {x}{2} \to {0}} (\frac {\sin \frac{x}{2} }{ \frac {x}{2}} \frac {1}{2})^2=\frac{1}{4} *2=\frac {1}{2}</script><ol>
<li>求$\lim \limits_{x \to {0}} \frac { \arcsin x}{x}$</li>
</ol>
<p>解: 令$ arcsin x = t,则 x = \sin t 且 x \to 0时 t \to 0$</p>
<script type="math/tex; mode=display">
\lim \limits_{x \to {0}} \frac { \arcsin x}{x}=
\lim \limits_{t \to {0}} \frac {t}{\sin t}=1</script><ol>
<li>求 $\lim \limits_{x \to {0}} \frac { \tan x - \sin x}{x^3}$</li>
</ol>
<p>解: </p>
<script type="math/tex; mode=display">
\lim \limits_{x \to {0}} \frac { \frac{\sin x }{\cos x}- \sin x}{x^3} =
\lim \limits_{x \to {0}} \frac {\sin x \frac {1-\cos x} {\cos x}}{x^3} = 
\lim \limits_{x \to {0}} \frac {\sin x}{x} \cdot  \lim \limits_{x \to {0}} \frac {1}{\cos x} \cdot  \lim \limits_{x \to {0}} \frac {1-\cos x}{x^2}=
1 \cdot 1 \cdot \frac {1}{2}=\frac {1}{2}</script><h3 id="lim-limits-x-to-infty-1-frac-1-x-x-e"><a href="#lim-limits-x-to-infty-1-frac-1-x-x-e" class="headerlink" title="$\lim\limits_{x \to {\infty} } (1+\frac {1} {x})^x = e$"></a>$\lim\limits_{x \to {\infty} } (1+\frac {1} {x})^x = e$</h3><ol>
<li>$\lim\limits_{x \to {\infty} } (1- \frac {2} {x})^x$</li>
</ol>
<p>解:</p>
<script type="math/tex; mode=display">
\lim\limits_{x \to {\infty} } (1- \frac {2} {x})^x
=\lim\limits_{x \to {\infty} } [(1+ \frac {1} {-\frac {x}{2}})^{-\frac {x}{2}}]^{-2}=e^{-2}</script><ol>
<li>$\lim\limits_{x \to {\infty} } (\frac {3-x} {2-x})^x$</li>
</ol>
<p>解:</p>
<script type="math/tex; mode=display">
\lim\limits_{x \to {\infty} } (\frac {3-x} {2-x})^x
=\lim\limits_{x \to {\infty} } (\frac {\frac{1}{-\frac{x}{3}}+1} {\frac{1}{-\frac{x}{2}}+1})^x
=\frac{e^{-3}}{e^{-2}}=e^{-1}</script>]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>微积分</tag>
        <tag>极限</tag>
      </tags>
  </entry>
  <entry>
    <title>交换机ACL访问控制</title>
    <url>/2020/07/06/%E4%BA%A4%E6%8D%A2%E6%9C%BAACL%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p><strong>ACL，是Access Control List的简写，中文名称叫做“访问控制列表”</strong>。它是由一系列条件规则（即描述报文匹配条件的判断语句）组成， 这些条件规则可以是报文的源地址、目的地址、端口号等，是一种应用在网络设备各种软硬接口上的的指令列表。</p>
<a id="more"></a>
<p>实例:</p>
<h3 id="进入思科交换机"><a href="#进入思科交换机" class="headerlink" title="进入思科交换机"></a>进入思科交换机</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 管理地址</span><br><span class="line">输入密码,进入用户模式</span><br><span class="line">enable 进入特权模式</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E4%BA%A4%E6%8D%A2%E6%9C%BAACL%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/image-20200706184603739.png" alt="image-20200706184603739"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show configuration 查看配置,</span><br><span class="line">configure terminal 进入配置模式</span><br><span class="line">然后就是配置我们的ACL访问控制列表</span><br></pre></td></tr></table></figure>
<h3 id="ACL有三种类型："><a href="#ACL有三种类型：" class="headerlink" title="ACL有三种类型："></a>ACL有三种类型：</h3><ol>
<li>标准ACL：根据数据包的源IP地址来允许或拒绝数据包。标准ACL的访问控制列表号是1~99。 2</li>
<li>扩展ACL：根据数据包的源IP地址、目的IP地址、指定协议、端口和标志来允许或拒绝数据包。扩展ACL的访问控制列表号是100~199. </li>
<li>命名ACL允许在标准ACL和扩展ACL中使用名称代替表号。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编写ACL</span><br><span class="line">access-list 130 deny   ip host [ip地址] any # 由于我这边是需要禁掉,所以用deny</span><br><span class="line">access-list 130 permit ip any any #因为思科默认是deny any any ,所以一定不要忘记这条</span><br></pre></td></tr></table></figure>
<p>随后我们把他应用到相应的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">cisco(config)#</span><span class="bash">interface 相应的端口</span></span><br><span class="line"><span class="meta">cisco(config-if)#</span><span class="bash">ip access-group [access-list-number] <span class="keyword">in</span></span></span><br><span class="line">比如我们这里是130</span><br><span class="line"><span class="meta">cisco(config-if)#</span><span class="bash">ip access-group 130 <span class="keyword">in</span></span></span><br></pre></td></tr></table></figure>
<p>这里有个坑,我配置了acl 但是我查看配置文件时没有出现我刚才配置的acl,我们需要保存一下配置才可以.</p>
<h3 id="删除ACL"><a href="#删除ACL" class="headerlink" title="删除ACL"></a>删除ACL</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">no access-list number  删除整个ACL配置</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果要删除某一行ACL必须要利用ip access-list extended</span></span><br><span class="line">ip access-list extended acl_name</span><br><span class="line">show ccess-lists</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后根据前面的数字删除</span></span><br><span class="line">no [number]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acl</category>
      </categories>
      <tags>
        <tag>交换机</tag>
        <tag>acl</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能学习范围</title>
    <url>/2020/08/21/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<p>学习领域,以及应用领域</p>
<a id="more"></a>
<p><img src="/images/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%9B%B4/%E5%AD%A6%E4%B9%A0%E9%A2%86%E5%9F%9F.jpg" alt="学习领域"></p>
<p><img src="/images/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%9B%B4/%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F.jpg" alt="应用领域"></p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>AI</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年七月总结</title>
    <url>/2020/07/02/%E4%B8%83%E6%9C%88%E4%BB%BD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>2020年七月份的一些杂事记录</p>
<p>国际惯例发姐镇楼</p>
<p><img src="/images/%E4%B8%83%E6%9C%88%E4%BB%BD%E6%80%BB%E7%BB%93/47949357493_b1eb41e775_z.jpg" alt="47949357493_b1eb41e775_z"></p>
<a id="more"></a>
<h2 id="2020-7-1"><a href="#2020-7-1" class="headerlink" title="2020.7.1"></a>2020.7.1</h2><ul>
<li>看完电视剧<code>隐秘的角落</code>又去刷了一遍<code>坏小孩</code></li>
</ul>
<blockquote>
<p>在成年人眼里，小孩子永远是简单的。即使小孩会撒谎，那谎言也是马上能戳穿的，他们根本想象不到小孩子的诡计多端，哪怕他们自己也曾经当过小孩。</p>
</blockquote>
<ul>
<li>看完了<code>&lt;3年A班－从现在起大家都是人质&gt;</code> 感叹舆论的威力,再次为我的发姐感到惋惜.</li>
</ul>
<p>这个端午真的是什么事情都没干啊,光刷电视剧了.</p>
<h2 id="2020-7-2"><a href="#2020-7-2" class="headerlink" title="2020.7.2"></a>2020.7.2</h2><ul>
<li><p>学习了<code>asyncio</code>模块,loop事件循环,task 任务, future 结果容器</p>
</li>
<li><p>了解协程,并发</p>
</li>
<li><p>了解<code>yield</code>和<code>yield from</code></p>
</li>
<li><p>打算去了解一下底层 <code>select,poll,epoll</code></p>
</li>
</ul>
<h2 id="2020-7-5"><a href="#2020-7-5" class="headerlink" title="2020.7.5"></a>2020.7.5</h2><ul>
<li>分享了一些python编程的技巧:<a href="https://tigercoll.github.io/2020/07/03/Python%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/">查看博客</a></li>
<li><code>python3-cookbook</code>: 还是有很多值得学习的地方:<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/preface.html" target="_blank" rel="noopener">地址</a> 推荐有时间的童鞋可以再去过一遍</li>
</ul>
<h2 id="2020-7-6"><a href="#2020-7-6" class="headerlink" title="2020.7.6"></a>2020.7.6</h2><ul>
<li>回顾ACL访问控制列表</li>
<li>回顾<code>sqlalchemy</code>创建表,外键,增删改查</li>
<li><code>aiohttp</code> 的体验</li>
</ul>
<h2 id="2020-7-17"><a href="#2020-7-17" class="headerlink" title="2020.7.17"></a>2020.7.17</h2><ul>
<li><code>https://doc.sm.ms/</code>API 上传图片</li>
<li><code>mutagen</code>库 获取mp3图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mutagen</span><br><span class="line"> </span><br><span class="line">inf = mutagen.File(<span class="string">'封茗囧菌 - 安娜的橱窗.mp3'</span>)</span><br><span class="line">artwork = inf.tags[<span class="string">'APIC:'</span>].data <span class="comment"># 获取歌曲图片</span></span><br><span class="line">title = inf.tags[<span class="string">"TIT2"</span>].text[<span class="number">0</span>] <span class="comment"># 获取歌曲名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图片保存为和歌曲同名，jpg格式的图片</span></span><br><span class="line"><span class="keyword">with</span> open(title+<span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> img:</span><br><span class="line">    img.write(artwork)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>summary</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>异步</tag>
        <tag>django</tag>
        <tag>每日学习的总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年六月总结</title>
    <url>/2020/06/02/%E5%85%AD%E6%9C%88%E4%BB%BD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>用来记录每日学习到的一些知识,感悟,感触.</p>
<p>发姐镇楼</p>
<p><img src="/images/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/%E5%8F%91%E5%8F%91.jpg" style="zoom:50%;" /></p>
<a id="more"></a>
<h2 id="2020-6-1"><a href="#2020-6-1" class="headerlink" title="2020.6.1"></a>2020.6.1</h2><h3 id="腾讯云短信"><a href="#腾讯云短信" class="headerlink" title="腾讯云短信"></a>腾讯云短信</h3><p>注册,申请签名,发送短信  <a href="https://tigercoll.top/2020/06/01/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/" target="_blank" rel="noopener">详见博客</a></p>
<h3 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h3><p>用来忽略一下没必要上传到git仓库的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pycharm</span></span><br><span class="line">.DS_Store</span><br><span class="line">.idea/</span><br><span class="line"></span><br><span class="line">__pycache__/</span><br><span class="line">*.py[cod]</span><br><span class="line">*.$py.class</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">django stuff:</span></span><br><span class="line">local_settings.py</span><br><span class="line">*.sqlite3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> database migrations</span></span><br><span class="line">*/migrations/*.py</span><br><span class="line">!*/migration/__init__.py</span><br></pre></td></tr></table></figure>
<h3 id="Python虚拟环境使用方法"><a href="#Python虚拟环境使用方法" class="headerlink" title="Python虚拟环境使用方法"></a>Python虚拟环境使用方法</h3><p><a href="https://tigercoll.top/2020/06/01/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">博客地址</a></p>
<ul>
<li>virtualenv</li>
<li>virtualenvwrapper</li>
<li>conda :必须安装anaconda</li>
<li>pipenv</li>
</ul>
<h2 id="2020-6-2"><a href="#2020-6-2" class="headerlink" title="2020.6.2"></a>2020.6.2</h2><h3 id="了解docker"><a href="#了解docker" class="headerlink" title="了解docker"></a>了解docker</h3><p>docker 相当于一个虚拟机,比虚拟机更小的一个容器,容器里面存放着各种应用,可以移植到不同的环境中</p>
<p>Docker 的核心理念是 <code>Build, Ship, and Run Any App, Anywher</code>，即一次封装，到处运行。</p>
<h3 id="docker的三要素"><a href="#docker的三要素" class="headerlink" title="docker的三要素:"></a>docker的三要素:</h3><ul>
<li>镜像:相当于一个一个类,</li>
<li>容器:相当于类的实例化</li>
<li>仓库:远程存放镜像的地方</li>
</ul>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>主要是在centos7 以上安装</p>
<p>具体安装步骤可以查看官网文档,按文档一步一步下来即可.</p>
<h3 id="配置阿里云加速"><a href="#配置阿里云加速" class="headerlink" title="配置阿里云加速"></a>配置阿里云加速</h3><ul>
<li>可以用淘宝账号注册阿里云,</li>
<li>登录控制台,搜索容器镜像服务</li>
<li>找到镜像加速器</li>
<li>按说明操作即可,不难</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><ul>
<li><code>docker images</code> :列出本机上的所有镜像<ul>
<li><code>-a</code>: 实现所有</li>
<li><code>-q</code> :显示ID</li>
</ul>
</li>
<li><code>docker search</code> : 去远程查看镜像</li>
<li><code>docker rmi</code> : 删除本地一个或多个镜像</li>
<li><code>docker pull</code>: 从仓库中拉去或更新镜像</li>
</ul>
<h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ul>
<li><code>docker run</code> :创建一个新的容器,并运行容器<ul>
<li><code>-i</code>:以交互模式运行容器,一般与<code>-t</code>一起使用</li>
<li><code>-t</code>为容器重新分配一个伪终端,一般与 <code>-i</code>:一起使用</li>
<li><code>--name</code>:别名</li>
<li><code>-d</code>:后台运行容器,!!!!!  <font color='red'>Docker 容器后台运行必须有一个前端进程.</font>容器运行的命令如果不是那些一直挂起的命令(比如运行top,tail),就是会自动退出的</li>
</ul>
</li>
<li><code>docker ps</code> :列出容器<ul>
<li><code>-a</code>:显示所有容器,包括未运行的</li>
<li><code>-l</code>:显示倒数第一个</li>
<li><code>-n</code>:列出倒数n个</li>
<li><code>-q</code>:静默模式,只显示编码,配合批量删除</li>
</ul>
</li>
<li><code>exit</code>:退出容器,并停止</li>
<li><code>ctrl+P+Q</code>:退出容器,不停止</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器ID 或容器名 :启动一个或多个已经被停止的容器</span><br><span class="line">docker stop 容器ID 或容器名 :停止一个运行中的容器</span><br><span class="line">docker kill 容器ID 或容器名 :强制关闭容器</span><br><span class="line">docker restart :重启容器</span><br></pre></td></tr></table></figure>
<ul>
<li><code>docker rm</code>: 删除一个或多个容器</li>
<li><code>docker log</code>:查看容器日志<ul>
<li><code>-f</code> :跟踪日志输出</li>
<li><code>-t</code>:显示时间戳</li>
<li><code>--tail</code>:倒数第N条</li>
</ul>
</li>
<li><code>docker top</code>:查看容器运行进程</li>
<li><code>docker attach</code>:连接到正在运行的容器</li>
<li><code>docker exec</code>:在运行中的容器中执行命令</li>
<li><code>dcoker cp</code>:拷贝数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- # 从容器内拷贝到宿主机</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH # 从宿主机拷贝到容器内</span><br></pre></td></tr></table></figure>
<p><a href="https://tigercoll.top/2020/06/02/docker%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener">详见博客</a></p>
<h2 id="2020-6-3-2020-6-4"><a href="#2020-6-3-2020-6-4" class="headerlink" title="2020.6.3-2020.6.4"></a>2020.6.3-2020.6.4</h2><h3 id="什么是docker镜像"><a href="#什么是docker镜像" class="headerlink" title="什么是docker镜像?"></a>什么是docker镜像?</h3><p>镜像就是Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p><img src="/images/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/v2-d5c06c456761b5a27090e3328b1f6882_720w.jpg" alt="img"></p>
<h3 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile?"></a>什么是Dockerfile?</h3><p>dockfile就是一个一个的指令,用来制作镜像的文件</p>
<p>Dockerfile 一般分为四部分：</p>
<ol>
<li>基础镜像信息</li>
<li>维护者信息</li>
<li>镜像操作指令</li>
<li>容器启动时执行指令</li>
</ol>
<p>两种生成镜像的方式:</p>
<ol>
<li>用dockerfile生成.</li>
<li>用容器 commit 生成 <code>docker commit -a &#39;作者&#39;,-m &#39;说明&#39; 容器id:版本</code></li>
</ol>
<p>用Dockerfile 制作了一个简单的镜像 具体查看:<a href="https://tigercoll.top/2020/06/04/Dockerfile/" target="_blank" rel="noopener">博客</a></p>
<p>了解如何用VMware虚拟机 映射端口</p>
<p>centos7 默认是开启了密钥登录的,所以没有<code>RSAAuthentication yes</code> 只需要生成密钥 放到客户端即可</p>
<h2 id="2020-6-5"><a href="#2020-6-5" class="headerlink" title="2020.6.5"></a>2020.6.5</h2><ul>
<li>了解<code>ModelForm</code>如何展示前端页面,重写<code>__init__</code>,方法来为每个字段加上样式</li>
<li>重写<code>save</code>方法,为特定字段做处理.</li>
<li>用<code>setInterval</code>作为倒计时</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>   time = <span class="number">60</span>;</span><br><span class="line">                   <span class="keyword">var</span> obj = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                       send_btn.text(time + <span class="string">'s后重新发送'</span>);</span><br><span class="line">                       time = time - <span class="number">1</span>;</span><br><span class="line">                       <span class="keyword">if</span> (time &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                          send_btn.attr(<span class="string">'disabled'</span>, <span class="literal">false</span>);</span><br><span class="line">                          send_btn.text(<span class="string">'发送验证码'</span>);</span><br><span class="line">                           clearInterval(obj)</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>django_redis</code></li>
<li>重温<code>ajax</code></li>
</ul>
<p>了解<code>ModelForm</code>查看<a href="https://tigercoll.top/2020/06/05/ModelForm/" target="_blank" rel="noopener">博客</a></p>
<h2 id="2020-6-6"><a href="#2020-6-6" class="headerlink" title="2020.6.6"></a>2020.6.6</h2><ul>
<li>使用pillow绘制图片验证码</li>
<li>完成了用短信登录,用图片验证码登录模块</li>
</ul>
<h2 id="2020-6-8"><a href="#2020-6-8" class="headerlink" title="2020.6.8"></a>2020.6.8</h2><ul>
<li>回顾了DRF的请求模块,request模块,渲染模块</li>
<li>博客地址:<a href="https://tigercoll.top/2020/06/09/django-rest_framework(request)/" target="_blank" rel="noopener">https://tigercoll.top/2020/06/09/django-rest_framework(request)/</a></li>
</ul>
<h2 id="2020-6-9"><a href="#2020-6-9" class="headerlink" title="2020.6.9"></a>2020.6.9</h2><ul>
<li>梳理了一遍drf的生命周期.</li>
</ul>
<h2 id="2020-6-10"><a href="#2020-6-10" class="headerlink" title="2020.6.10"></a>2020.6.10</h2><p>drf认证模块流程:</p>
<ul>
<li>请求从url到as_view()</li>
<li>在as_view()中去除了csrf_token认证</li>
<li>走APIView的dispatch方法</li>
<li><code>request = self.initialize_request(request, *args, **kwargs)</code>封装request</li>
<li><code>authenticators=self.get_authenticators(),</code>把类对象的列表赋值给<code>authenticators</code></li>
<li><code>self.initial(request, *args, **kwargs)</code></li>
<li><code>self.perform_authentication(request)</code></li>
<li>调用封装过的request的<code>request.user</code></li>
<li><code>self._authenticate()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Attempt to authenticate the request using each authentication instance</span></span><br><span class="line"><span class="string">    in turn.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 返回元组user_auth_tuple</span></span><br><span class="line">            <span class="comment"># None 的话就走一下一个</span></span><br><span class="line">            <span class="comment"># 通过就赋值给self.user, self.auth = user_auth_tuple</span></span><br><span class="line">            <span class="comment"># 报异常就退出</span></span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">	<span class="comment"># 这里有个匿名用户</span></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure>
<p>然后就到了我们写的逻辑代码</p>
<h2 id="2020-6-14"><a href="#2020-6-14" class="headerlink" title="2020.6.14"></a>2020.6.14</h2><p>用docker 写了一个自己的镜像:</p>
<ul>
<li>通过<code>docker comimit</code> 配置环境</li>
<li>用<code>Dcokerfile</code>生成自动化后台运行的镜像</li>
<li>上传到了自己的阿里云<ul>
<li>阿里云临时账号的申请,</li>
<li>SDK的使用</li>
</ul>
</li>
</ul>
<p>DRF的版本控制</p>
<h2 id="2020-6-16"><a href="#2020-6-16" class="headerlink" title="2020.6.16"></a>2020.6.16</h2><p><code>drf</code>序列化器,分页,视图,路由,渲染器</p>
<h2 id="2020-6-23"><a href="#2020-6-23" class="headerlink" title="2020.6.23"></a>2020.6.23</h2><h3 id="DRF-自动生成API-文档"><a href="#DRF-自动生成API-文档" class="headerlink" title="DRF 自动生成API 文档"></a>DRF 自动生成API 文档</h3><p>自动生成api文档（不管是函数视图还是类视图都能显示）</p>
<h4 id="安装rest-framework-swagger库"><a href="#安装rest-framework-swagger库" class="headerlink" title="安装rest_framework_swagger库"></a>安装rest_framework_swagger库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-rest-swagger</span><br></pre></td></tr></table></figure>
<h4 id="在项目下的-urls-py-中加入如下："><a href="#在项目下的-urls-py-中加入如下：" class="headerlink" title="在项目下的 urls.py 中加入如下："></a>在项目下的 urls.py 中加入如下：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_swagger.views <span class="keyword">import</span> get_swagger_view</span><br><span class="line">schema_view = get_swagger_view(title=<span class="string">'API文档'</span>)</span><br><span class="line">urlpatterns += [</span><br><span class="line">    path(<span class="string">r'docs/'</span>, schema_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="在创建的django项目下的settings中加入如下"><a href="#在创建的django项目下的settings中加入如下" class="headerlink" title="在创建的django项目下的settings中加入如下"></a>在创建的django项目下的settings中加入如下</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">	...</span><br><span class="line"><span class="string">'rest_framework_swagger'</span>,</span><br><span class="line">	...	</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 配置REST_FRAMEWORK</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_SCHEMA_CLASS'</span>: <span class="string">'rest_framework.schemas.AutoSchema'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/image-20200623183015407.png" alt="image-20200623183015407"></p>
<h3 id="DRF-如何把request-跟路径参数传给serializers-类"><a href="#DRF-如何把request-跟路径参数传给serializers-类" class="headerlink" title="DRF 如何把request 跟路径参数传给serializers 类,"></a>DRF 如何把<code>request</code> 跟<code>路径参数</code>传给<code>serializers</code> 类,</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSerializers</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    test = serializers.CharField(label=<span class="string">'测试字段'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_test</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="comment"># 获取request</span></span><br><span class="line">        request = self.context[<span class="string">'request'</span>]</span><br><span class="line">        <span class="comment"># 获取路径参数</span></span><br><span class="line">        view = self.context[<span class="string">'view'</span>]</span><br><span class="line">        path_params = view.kwargs.get(<span class="string">'路径参数'</span>)</span><br></pre></td></tr></table></figure>
<font color = "red">注意:只针对视图集!!</font>

<p>查看源码:</p>
<p>在<code>GenericAPIView</code>类中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the serializer instance that should be used for validating and</span></span><br><span class="line"><span class="string">    deserializing input, and for serializing output.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    serializer_class = self.get_serializer_class()</span><br><span class="line">    <span class="comment">#在 kwargs中   把 &#123;</span></span><br><span class="line">    <span class="comment">#    'request': self.request,</span></span><br><span class="line">    <span class="comment">#    'format': self.format_kwarg,</span></span><br><span class="line">    <span class="comment">#    'view': self</span></span><br><span class="line">    <span class="comment"># &#125; 传入了 ['context'] 中</span></span><br><span class="line">    kwargs[<span class="string">'context'</span>] = self.get_serializer_context()</span><br><span class="line">    <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br></pre></td></tr></table></figure>
<p><code>get_serializer_context()</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_context</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Extra context provided to the serializer class.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'request'</span>: self.request,</span><br><span class="line">        <span class="string">'format'</span>: self.format_kwarg,</span><br><span class="line">        <span class="string">'view'</span>: self</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>summary</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>前端</tag>
        <tag>每日学习的总结</tag>
      </tags>
  </entry>
  <entry>
    <title>初识paramiko模块</title>
    <url>/2020/05/28/%E5%88%9D%E8%AF%86paramiko%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>Paramiko is a Python (2.7, 3.4+) implementation of the SSHv2 protocol <a href="http://www.paramiko.org/#id2" target="_blank" rel="noopener">[1]</a>, providing both client and server functionality. While it leverages a Python C extension for low level cryptography (<a href="https://cryptography.io/" target="_blank" rel="noopener">Cryptography</a>), Paramiko itself is a pure Python interface around SSH networking concepts.</p>
<p>paramiko是围绕SSH网络概念的纯Python接口。SSHV2的python 实现,即 我们可以用python代码来实现SSH与服务器的交互</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure>
<h2 id="初识paramiko-连接远程主机-SSHClient"><a href="#初识paramiko-连接远程主机-SSHClient" class="headerlink" title="初识paramiko,连接远程主机(SSHClient)"></a>初识paramiko,连接远程主机(SSHClient)</h2><h3 id="基于用户名密码的连接"><a href="#基于用户名密码的连接" class="headerlink" title="基于用户名密码的连接"></a>基于用户名密码的连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line"></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line"></span><br><span class="line">ssh.connect(hostname=<span class="string">'主机地址'</span>,port=<span class="string">'端口号,是int类型'</span>,username=<span class="string">'用户名'</span>,password=<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"></span><br><span class="line">stdin ,stdout , stderr = ssh.exec_command(<span class="string">'ls'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line"></span><br><span class="line">result  = stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">print(result.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure>
<h3 id="基于公钥密钥连接"><a href="#基于公钥密钥连接" class="headerlink" title="基于公钥密钥连接"></a>基于公钥密钥连接</h3><p>不知道如何设置公钥私钥的朋友请移步 <a href="https://tigercoll.top/2020/05/28/%E8%AE%BE%E7%BD%AESSH-%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/" target="_blank" rel="noopener">设置SSH 通过密钥登录</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">'私钥'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line"></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line"></span><br><span class="line">ssh.connect(hostname=<span class="string">'主机地址'</span>,port=<span class="string">'端口号,是int类型'</span>,username=<span class="string">'用户名'</span>,pkey=private_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"></span><br><span class="line">stdin ,stdout , stderr = ssh.exec_command(<span class="string">'ls'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line"></span><br><span class="line">result  = stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">print(result.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure>
<h2 id="上传下载文件-SFTPClient"><a href="#上传下载文件-SFTPClient" class="headerlink" title="上传下载文件(SFTPClient)"></a>上传下载文件(SFTPClient)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="comment"># 获取私钥</span></span><br><span class="line">pkey = paramiko.RSAKey.from_private_key_file(<span class="string">'私钥'</span>)</span><br><span class="line">transport = paramiko.Transport((<span class="string">'主机名'</span>,<span class="string">'端口'</span>))</span><br><span class="line">transport.connect(username=<span class="string">'用户名'</span>,pkey=pkey)</span><br><span class="line"><span class="comment"># 也可以用密码</span></span><br><span class="line"><span class="comment"># transport.connect(username='用户名',password='密码')</span></span><br><span class="line"></span><br><span class="line">sftp = paramiko.SFTPClient.from_transport(transport)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line"><span class="comment"># sftp.put('test','/tmp/test')</span></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="comment"># sftp.get('/tmp/test','111')</span></span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure>
<p>如果我们既要执行命令又要上传下载怎么办呢?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在SSHClient中有个方法:open_sftp()</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line">sftp.put(<span class="string">'123'</span>,<span class="string">'/tmp/123'</span>)</span><br><span class="line"><span class="comment"># 可以用来执行上传下载操作</span></span><br><span class="line"><span class="comment"># 是因为SSHClient内部封装了Transport</span></span><br><span class="line">ssh._transport = transport</span><br></pre></td></tr></table></figure>
<p>所以我们可以自己写一个类来封装上传下载,以及执行命令</p>
<h2 id="自定义的类-实现上传以及执行命令"><a href="#自定义的类-实现上传以及执行命令" class="headerlink" title="自定义的类,实现上传以及执行命令"></a>自定义的类,实现上传以及执行命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySSH</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,host,port,username,pkey_path)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.username = username</span><br><span class="line">        self.pkey_path = pkey_path</span><br><span class="line">        self._transport=<span class="literal">None</span></span><br><span class="line">	<span class="comment"># 连接 封装Transport</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        pkey = paramiko.RSAKey.from_private_key_file(self.pkey_path)</span><br><span class="line">        self._transport=paramiko.Transport((self.host,self.port,))</span><br><span class="line">        self._transport.connect(username=self.username,pkey=pkey)</span><br><span class="line">	<span class="comment"># 执行命令</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commed</span><span class="params">(self,cmd)</span>:</span></span><br><span class="line">        ssh = paramiko.SSHClient()</span><br><span class="line">        ssh._transport=self._transport</span><br><span class="line">        stdin,stdout,stderr = ssh.exec_command(cmd)</span><br><span class="line">        result = stdout.read()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">	<span class="comment"># 执行上传 基本上都是上传,下载的话可以再写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self,local_path,renote_path)</span>:</span></span><br><span class="line">        sftp = paramiko.SFTPClient.from_transport(self._transport)</span><br><span class="line">        sftp.put(local_path, renote_path)</span><br><span class="line">        sftp.close()</span><br><span class="line">	<span class="comment"># 关闭</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._transport.close()</span><br><span class="line">	<span class="comment"># 上下文管理 进入时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.open()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">	<span class="comment"># 退出时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        self.close()</span><br></pre></td></tr></table></figure>
<p>这样我们可以用上下文管理器with</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> MySSH(host,port,username,pkey_path) <span class="keyword">as</span> ssh:</span><br><span class="line">    ssh.upload(local_path,renote_path)</span><br><span class="line">    result = ssh.commed(<span class="string">'ls /tmp'</span>)</span><br><span class="line">    print(result.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现轮播图</title>
    <url>/2020/08/10/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目需要移动端实现轮播图,查看文档,总结一下</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/image-20200810235057262.png" alt="image-20200810235057262"></p>
<p>轮播 其实就是让图片排在一排,等鼠标或手指让其显示在视口,可被看见的区域内.</p>
<a id="more"></a>
<h2 id="制作轮播图"><a href="#制作轮播图" class="headerlink" title="制作轮播图"></a>制作轮播图</h2><h3 id="搭建基本dom结构"><a href="#搭建基本dom结构" class="headerlink" title="搭建基本dom结构"></a>搭建基本dom结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>轮播图demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.swiper</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 定义视口 */</span></span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line"><span class="css">            <span class="comment">/* 超出部分隐藏 */</span></span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.slides</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.slides</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 去掉前面的黑点 */</span></span></span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        li img &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"slides"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.url"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    items: [&#123;</span><br><span class="line">                        id: 1,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/1.jpg'</span></span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/2.jpg'</span></span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/3.jpg'</span></span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 4,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/4.jpg'</span></span></span><br><span class="line">                    &#125;, ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/image-20200812185854004.png" alt="image-20200812185854004"></p>
<h3 id="实现简单的轮播"><a href="#实现简单的轮播" class="headerlink" title="实现简单的轮播"></a>实现简单的轮播</h3><p>为了让每张图都填满整个视口,需要设置每个图片的宽度为视口宽度,整个的宽度就是所有图片宽度的总和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;轮播图demo&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .swiper &#123;</span><br><span class="line">            &#x2F;* 定义视口 *&#x2F;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            &#x2F;* 超出部分隐藏 *&#x2F;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .slides &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .slides li &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            &#x2F;* 去掉前面的黑点 *&#x2F;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        li img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper&quot; ref&#x3D;&quot;viewPortRef&quot;&gt;</span><br><span class="line">            &lt;ul class&#x3D;&quot;slides&quot; ref&#x3D;&quot;box&quot; :style&#x3D;&quot;translateStyle&quot;&gt;</span><br><span class="line">                &lt;li :key&#x3D;&quot;index&quot; v-for&#x3D;&quot;(item,index) in items&quot;&gt;</span><br><span class="line">                    &lt;img :src&#x3D;&quot;item.url&quot;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    &#x2F;&#x2F; 定时器</span><br><span class="line">                    timer: null,</span><br><span class="line">                    &#x2F;&#x2F; 当前index</span><br><span class="line">                    currentIndex: 0,</span><br><span class="line">                    &#x2F;&#x2F; 视口</span><br><span class="line">                    viewport: 0,</span><br><span class="line">                    items: [&#123;</span><br><span class="line">                        id: 1,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;1.jpg&#39;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;2.jpg&#39;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;3.jpg&#39;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 4,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;4.jpg&#39;</span><br><span class="line">                    &#125;, ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted() &#123;</span><br><span class="line">                &#x2F;&#x2F; 初始化宽度</span><br><span class="line">                this.init()</span><br><span class="line">                    &#x2F;&#x2F; 自动轮播</span><br><span class="line">                this.autoplay()</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                &#x2F;&#x2F; 初始化</span><br><span class="line">                init() &#123;</span><br><span class="line">                    &#x2F;&#x2F; 获取视口的宽度</span><br><span class="line">                    this.viewport &#x3D; this.$refs.viewPortRef.clientWidth</span><br><span class="line">                        &#x2F;&#x2F; 计算图片外层盒子的大小</span><br><span class="line">                    this.$refs.box.style.width &#x3D; this.items.length * this.viewport + &#39;px&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F; 自动轮播 ,其实就是通过transition 偏移X</span><br><span class="line">                autoplay() &#123;</span><br><span class="line">                    this.timer &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">                        this.currentIndex++</span><br><span class="line">                            if (this.currentIndex &#x3D;&#x3D;&#x3D; this.items.length) &#123;</span><br><span class="line">                                this.currentIndex &#x3D; 0</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;, 2000)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 通过计算属性来获取偏移的X</span><br><span class="line">            computed: &#123;</span><br><span class="line">                translateStyle() &#123;</span><br><span class="line">                    const translate &#x3D; &#96;translateX(-$&#123;this.currentIndex*this.viewport&#125;px)&#96;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        transform: translate</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-23-23.gif" alt="GIF 2020-8-12 19-23-23"></p>
<p>简单实现了轮播的效果,不过有点粗糙,我们加入过渡</p>
<h3 id="加入过渡"><a href="#加入过渡" class="headerlink" title="加入过渡"></a>加入过渡</h3><p>单单在样式中加入过渡,我们会发现轮播到最后一张图片的时候,会转到第一张</p>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-27-02.gif" alt="GIF 2020-8-12 19-27-02"></p>
<p>这样的效果,我们并不希望得到,我们希望他是无缝的,</p>
<p>修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    autoplay() &#123;</span><br><span class="line">        <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.isTransition = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.currentIndex++</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.items.length) &#123;</span><br><span class="line">           <span class="keyword">this</span>.isTransition = <span class="literal">false</span></span><br><span class="line">           <span class="keyword">this</span>.currentIndex = <span class="number">0</span></span><br><span class="line">             &#125;</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-37-15.gif" alt="GIF 2020-8-12 19-37-15"></p>
<p>从最后一张跳到第一张还是有点不舒服,那么我们怎么办呢?</p>
<p>我们需要重新定义一个列表</p>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/image-20200812195232370.png" alt="image-20200812195232370"></p>
<p>然后滚动到4的时候再到1然后再跳转到前面的1(当然最前面的4是为我们做滑动的时候准备的)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;轮播图demo&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .swiper &#123;</span><br><span class="line">            &#x2F;* 定义视口 *&#x2F;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            &#x2F;* 超出部分隐藏 *&#x2F;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .slides &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            height: 100%;</span><br><span class="line">            &#x2F;* 加入过渡 *&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .slides li &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            &#x2F;* 去掉前面的黑点 *&#x2F;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        li img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper&quot; ref&#x3D;&quot;viewPortRef&quot;&gt;</span><br><span class="line">            &lt;ul class&#x3D;&quot;slides&quot; ref&#x3D;&quot;box&quot; :style&#x3D;&quot;translateStyle&quot;&gt;</span><br><span class="line">                &lt;li :key&#x3D;&quot;index&quot; v-for&#x3D;&quot;(item,index) in newList&quot;&gt;</span><br><span class="line">                    &lt;img :src&#x3D;&quot;item.url&quot;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    newList: [],</span><br><span class="line">                    &#x2F;&#x2F; 定时器</span><br><span class="line">                    timer: null,</span><br><span class="line">                    &#x2F;&#x2F; 当前index</span><br><span class="line">                    currentIndex: 0,</span><br><span class="line">                    &#x2F;&#x2F; 视口</span><br><span class="line">                    viewport: 0,</span><br><span class="line">                    isTransition: false,</span><br><span class="line">                    items: [&#123;</span><br><span class="line">                        id: 1,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;1.jpg&#39;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;2.jpg&#39;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;3.jpg&#39;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 4,</span><br><span class="line">                        url: &#39;&#x2F;imgs&#x2F;4.jpg&#39;</span><br><span class="line">                    &#125;, ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted() &#123;</span><br><span class="line">                &#x2F;&#x2F; 初始化宽度</span><br><span class="line">                this.init()</span><br><span class="line">                    &#x2F;&#x2F; 自动轮播</span><br><span class="line">                this.autoplay()</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                &#x2F;&#x2F; 初始化</span><br><span class="line">                init() &#123;</span><br><span class="line">                    const first &#x3D; this.items.slice(0, 1)</span><br><span class="line">                    const last &#x3D; this.items.slice(-1)</span><br><span class="line">                    this.newList &#x3D; [...last, ...this.items, ...first]</span><br><span class="line">                        &#x2F;&#x2F; 获取视口的宽度</span><br><span class="line">                    this.viewport &#x3D; this.$refs.viewPortRef.clientWidth</span><br><span class="line">                        &#x2F;&#x2F; 计算图片外层盒子的大小</span><br><span class="line">                    this.$refs.box.style.width &#x3D; this.newList.length * this.viewport + &#39;px&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F; 自动轮播 ,其实就是通过transition 偏移X</span><br><span class="line">                autoplay() &#123;</span><br><span class="line">                    this.timer &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">                        &#x2F;&#x2F; 加上延时,造成视觉误差</span><br><span class="line">                        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                            this.isTransition &#x3D; true</span><br><span class="line">                            this.currentIndex++</span><br><span class="line">                        &#125;, 40)</span><br><span class="line"></span><br><span class="line">                        if (this.currentIndex &#x3D;&#x3D;&#x3D; this.newList.length - 1) &#123;</span><br><span class="line">                            this.isTransition &#x3D; false</span><br><span class="line">                            this.currentIndex &#x3D; 1</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;, 2000)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 通过计算属性来获取偏移的X</span><br><span class="line">            computed: &#123;</span><br><span class="line">                translateStyle() &#123;</span><br><span class="line">                    const translate &#x3D; &#96;translateX(-$&#123;this.currentIndex*this.viewport&#125;px)&#96;</span><br><span class="line">                    const transition &#x3D; this.isTransition ? &#39;all 1s&#39; : &#39;none&#39;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        transform: translate,</span><br><span class="line">                        transition: transition</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-58-16.gif" alt="GIF 2020-8-12 19-58-16"></p>
<h3 id="鼠标滑动"><a href="#鼠标滑动" class="headerlink" title="鼠标滑动"></a>鼠标滑动</h3><p>滑动有三个事件:</p>
<p><code>touchstart</code> 按住时,<code>touchmove</code> 移动 ,<code>touchend</code> 结束 (当然这三个事件只在移动端有效)</p>
<p>pc端需要<code>mousedown mousemove mouseup</code> 三个事件,这里我用到的是移动端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onTouchStart(e) &#123;</span><br><span class="line">               <span class="comment">// 关闭自动播放</span></span><br><span class="line">               <span class="keyword">this</span>.stopplay()</span><br><span class="line">                   <span class="comment">// 关闭过渡</span></span><br><span class="line">               <span class="keyword">this</span>.isTransition = <span class="literal">false</span></span><br><span class="line">                   <span class="comment">// 当前是0的时候,是最后第二个</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.currentIndex = <span class="keyword">this</span>.newList.length - <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.newList.length - <span class="number">1</span>) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.currentIndex = <span class="number">1</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 获取按住的X坐标位置</span></span><br><span class="line">               <span class="keyword">this</span>.toucheStartX = e.targetTouches[<span class="number">0</span>].clientX;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="keyword">this</span>.toucheStartX);</span><br><span class="line">           &#125;,</span><br><span class="line">           onTouchMove(e) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 获取移动的偏移量</span></span><br><span class="line">               <span class="keyword">this</span>.offsetX = <span class="keyword">this</span>.toucheStartX - e.targetTouches[<span class="number">0</span>].clientX;</span><br><span class="line"></span><br><span class="line">           &#125;,</span><br><span class="line">           onTouchEnd() &#123;</span><br><span class="line">               <span class="comment">// 开启效果</span></span><br><span class="line">               <span class="keyword">this</span>.isTransition = <span class="literal">true</span>;</span><br><span class="line">               <span class="comment">// 四舍五入</span></span><br><span class="line">               <span class="keyword">let</span> currentIndex = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.offsetX / <span class="keyword">this</span>.viewport)</span><br><span class="line">               <span class="keyword">this</span>.currentIndex = currentIndex + <span class="keyword">this</span>.currentIndex</span><br><span class="line">                   <span class="comment">// 重置offsetX</span></span><br><span class="line">               <span class="keyword">this</span>.offsetX = <span class="number">0</span></span><br><span class="line">                   <span class="comment">// 自动播放</span></span><br><span class="line">               <span class="keyword">this</span>.autoplay()</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/C:/Users/Tiger/Desktop/GifCam/GIF%202020-8-12%2021-17-02.gif" alt="GIF 2020-8-12 21-17-02"></p>
<h3 id="底部-小圆点"><a href="#底部-小圆点" class="headerlink" title="底部 小圆点"></a>底部 小圆点</h3><h4 id="添加dom"><a href="#添加dom" class="headerlink" title="添加dom"></a>添加dom</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper"</span> <span class="attr">ref</span>=<span class="string">"viewPortRef"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"slides"</span> <span class="attr">ref</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"translateStyle"</span> @<span class="attr">touchstart</span>=<span class="string">"onTouchStart"</span> @<span class="attr">touchmove</span>=<span class="string">"onTouchMove"</span> @<span class="attr">touchend</span>=<span class="string">"onTouchEnd"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in newList"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.url"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sliderListDot"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sliderDot"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">:class</span>=<span class="string">"&#123;active : activeIndex==index&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="设计样式"><a href="#设计样式" class="headerlink" title="设计样式"></a>设计样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sliderListDot</span> &#123;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-class">.sliderDot</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">          <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-class">.active</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">36px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">          <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加计算属性"><a href="#添加计算属性" class="headerlink" title="添加计算属性"></a>添加计算属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activeIndex() &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">            <span class="comment">// 当currentIndex=0的时候就是列表的最后一个</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="keyword">this</span>.items.length<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当是倒数第二个的时候就是第0个 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.newList.length - <span class="number">1</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其余都是-1 </span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2021-52-25.gif" alt="GIF 2020-8-12 21-52-25"></p>
<h4 id="鼠标移动到小圆点改变轮播"><a href="#鼠标移动到小圆点改变轮播" class="headerlink" title="鼠标移动到小圆点改变轮播"></a>鼠标移动到小圆点改变轮播</h4><p>有两个事件:<code>mouseenter</code> 跟<code>mouseleave</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标进入的时候</span></span><br><span class="line">               enter(index) &#123;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// 停止自动播放</span></span><br><span class="line">                   <span class="keyword">this</span>.stopplay()</span><br><span class="line">                   <span class="keyword">this</span>.currentIndex = index + <span class="number">1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 鼠标离开的时候</span></span><br><span class="line">               leave() &#123;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">this</span>.autoplay()</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>轮播图demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.swiper</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 定义视口 */</span></span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line"><span class="css">            <span class="comment">/* 超出部分隐藏 */</span></span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.slides</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="comment">/* 加入过渡 */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.slides</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="comment">/* 去掉前面的黑点 */</span></span></span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        li img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.sliderListDot</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            bottom: 20px;</span><br><span class="line">            display: flex;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.sliderDot</span> &#123;</span></span><br><span class="line">            width: 14px;</span><br><span class="line">            height: 14px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            margin: 0 10px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">            width: 36px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border-radius: 7px;</span><br><span class="line">            opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper"</span> <span class="attr">ref</span>=<span class="string">"viewPortRef"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"slides"</span> <span class="attr">ref</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"translateStyle"</span> @<span class="attr">touchstart</span>=<span class="string">"onTouchStart"</span> @<span class="attr">touchmove</span>=<span class="string">"onTouchMove"</span> @<span class="attr">touchend</span>=<span class="string">"onTouchEnd"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in newList"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.url"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sliderListDot"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sliderDot"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">:class</span>=<span class="string">"&#123;active : activeIndex==index&#125;"</span> @<span class="attr">mouseenter</span>=<span class="string">"enter(index)"</span> @<span class="attr">mouselevae</span>=<span class="string">"leave"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 获取按住时的X值</span></span></span><br><span class="line">                    toucheStartX: 0,</span><br><span class="line">                    newList: [],</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="actionscript">                    timer: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 当前index</span></span></span><br><span class="line">                    currentIndex: 1,</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 偏移量</span></span></span><br><span class="line">                    offsetX: 0,</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 视口</span></span></span><br><span class="line">                    viewport: 0,</span><br><span class="line"><span class="actionscript">                    isTransition: <span class="literal">false</span>,</span></span><br><span class="line">                    items: [&#123;</span><br><span class="line">                        id: 1,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/1.jpg'</span></span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/2.jpg'</span></span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/3.jpg'</span></span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        id: 4,</span><br><span class="line"><span class="actionscript">                        url: <span class="string">'/imgs/4.jpg'</span></span></span><br><span class="line">                    &#125;, ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted() &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 初始化宽度</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.init()</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 自动轮播</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.autoplay()</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 初始化</span></span></span><br><span class="line">                init() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">const</span> first = <span class="keyword">this</span>.items.slice(<span class="number">0</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">const</span> last = <span class="keyword">this</span>.items.slice(<span class="number">-1</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.newList = [...last, ...this.items, ...first]</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 获取视口的宽度</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.viewport = <span class="keyword">this</span>.$refs.viewPortRef.clientWidth</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 计算图片外层盒子的大小</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.$refs.box.style.width = <span class="keyword">this</span>.newList.length * <span class="keyword">this</span>.viewport + <span class="string">'px'</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 自动轮播 ,其实就是通过transition 偏移X</span></span></span><br><span class="line">                autoplay() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 加上延时,造成视觉误差</span></span></span><br><span class="line"><span class="javascript">                        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.isTransition = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.currentIndex++</span></span><br><span class="line">                        &#125;, 40)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.newList.length - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.isTransition = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.currentIndex = <span class="number">1</span></span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;, 2000)</span><br><span class="line">                &#125;,</span><br><span class="line">                stopplay() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.timer &amp;&amp; clearInterval(<span class="keyword">this</span>.timer)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                onTouchStart(e) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 关闭自动播放</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.stopplay()</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 关闭过渡</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.isTransition = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 当前是0的时候,是最后第二个</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.currentIndex = <span class="keyword">this</span>.newList.length - <span class="number">2</span></span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.newList.length - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.currentIndex = <span class="number">1</span></span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 获取按住的X坐标位置</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.toucheStartX = e.targetTouches[<span class="number">0</span>].clientX;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.toucheStartX);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                onTouchMove(e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 获取移动的偏移量</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.offsetX = <span class="keyword">this</span>.toucheStartX - e.targetTouches[<span class="number">0</span>].clientX;</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                onTouchEnd() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 开启效果</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.isTransition = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 四舍五入</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> currentIndex = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.offsetX / <span class="keyword">this</span>.viewport)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.currentIndex = currentIndex + <span class="keyword">this</span>.currentIndex</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 重置offsetX</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.offsetX = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 自动播放</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.autoplay()</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 鼠标进入的时候</span></span></span><br><span class="line">                enter(index) &#123;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 停止自动播放</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.stopplay()</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.currentIndex = index + <span class="number">1</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 鼠标离开的时候</span></span></span><br><span class="line">                leave() &#123;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.autoplay()</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 通过计算属性来获取偏移的X</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line">                translateStyle() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> translate = <span class="string">`translateX(-<span class="subst">$&#123;<span class="keyword">this</span>.currentIndex*<span class="keyword">this</span>.viewport+<span class="keyword">this</span>.offsetX &#125;</span>px)`</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">const</span> transition = <span class="keyword">this</span>.isTransition ? <span class="string">'all 1s'</span> : <span class="string">'none'</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line">                        transform: translate,</span><br><span class="line">                        transition: transition</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                activeIndex() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> index = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 当currentIndex=0的时候就是列表的最后一个</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        index = <span class="keyword">this</span>.items.length - <span class="number">1</span></span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 当是倒数第二个的时候就是第0个 </span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.newList.length - <span class="number">1</span>) &#123;</span></span><br><span class="line">                        index = 0</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 其余都是-1 </span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> index</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Tigercoll/vue-slideshow" target="_blank" rel="noopener">github地址</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>轮播图</tag>
      </tags>
  </entry>
  <entry>
    <title>各个手机查询是否激活、或真伪的方法和链接</title>
    <url>/2020/11/03/%E5%90%84%E4%B8%AA%E6%89%8B%E6%9C%BA%E6%9F%A5%E8%AF%A2%E6%98%AF%E5%90%A6%E6%BF%80%E6%B4%BB%E3%80%81%E6%88%96%E7%9C%9F%E4%BC%AA%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>以下是各品牌查询是否激活、或真伪的方法和链接。</p>
<ul>
<li><strong>华为手机激活查询：</strong>手机激活后，手机自带APP“服务”查询三包起止时间（部分机型数据更新较慢，可等2-3天）</li>
<li><strong>小米手机防伪查询：</strong><a href="https://link.zhihu.com/?target=https%3A//www.mi.com/service/imei">https://www.mi.com/service/imei</a></li>
<li><strong>OPPO手机真伪查询：</strong><a href="https://link.zhihu.com/?target=http%3A//www.oppo.com/cn/service/phonecheck">http://www.oppo.com/cn/service/phonecheck</a></li>
<li><strong>vivo手机真伪查询：</strong><a href="https://link.zhihu.com/?target=http%3A//www.vivo.com.cn/service/authenticityCheck/index/">http://www.vivo.com.cn/service/authenticityCheck/index/</a></li>
<li><strong>魅族手机真伪查询：</strong><a href="https://link.zhihu.com/?target=https%3A//service.meizu.com/authenticity.html">https://service.meizu.com/authenticity.html</a></li>
<li><strong>苹果序列号查询保障期限：</strong><a href="https://link.zhihu.com/?target=https%3A//checkcoverage.apple.com/cn/zh/">https://checkcoverage.apple.com/cn/zh/</a></li>
<li><strong>三星手机防伪验证：</strong><a href="https://link.zhihu.com/?target=https%3A//support-cn.samsung.com/product_validation/ProductVerification/accessories.html">https://support-cn.samsung.com/product_validation/ProductVerification/accessories.html</a></li>
</ul>
]]></content>
      <categories>
        <category>手机激活</category>
      </categories>
      <tags>
        <tag>手机</tag>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>基本积分公式</title>
    <url>/2020/08/28/%E5%9F%BA%E6%9C%AC%E7%A7%AF%E5%88%86%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<ol>
<li>$\int k\,dx = kx +c$</li>
<li>$\int x^a \,dx = \frac{x^{a+1}}{a+1} + c$</li>
<li>$\int \frac{1}{x}\, dx = \ln|x| + c$</li>
<li>$\frac{1}{x+x^2}\,dx = \arctan x +c$</li>
<li>$\frac{1}{ \sqrt {x+x^2}}dx = \arcsin x +c$</li>
<li>$\int \cos x \,dx = \sin x +c$</li>
<li>$\int \sin x \,dx = -\cos x +c$</li>
<li>$\int \frac{1}{cos^2x} \,dx = \int \sec^2x \,dx=\tan x +c$  </li>
<li>$\int \frac{1}{\sin^2x} \,dx=\int csc^2x\,dx=-\cot x +c$</li>
<li>$\int \sec x \tan x \,dx=\sec x+c$</li>
<li>$\int \csc x \cot x \,dx=-csc x +c$</li>
<li>$\int e^x \,dx=e^x +c$</li>
<li>$\int a^x \, dx = \frac {a^x}{\ln a}+c$</li>
</ol>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>微积分</tag>
        <tag>积分</tag>
      </tags>
  </entry>
  <entry>
    <title>常用几种分布的期望与方差</title>
    <url>/2020/10/21/%E5%B8%B8%E7%94%A8%E5%87%A0%E7%A7%8D%E5%88%86%E5%B8%83%E7%9A%84%E6%9C%9F%E6%9C%9B%E4%B8%8E%E6%96%B9%E5%B7%AE/</url>
    <content><![CDATA[<p>几种常见分布的期望与方差</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">分布</th>
<th style="text-align:center">定义</th>
<th style="text-align:center">EX</th>
<th style="text-align:center">DX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0-1分布</td>
<td style="text-align:center">$p(x=k)=p^{k}(1-p)^{1-k} \quad k=0,1$</td>
<td style="text-align:center">p</td>
<td style="text-align:center">pq</td>
</tr>
<tr>
<td style="text-align:center">二项分布</td>
<td style="text-align:center">$p(x=k)=C_n^k \quad p^{k}(1-p)^{n-k} \quad k=0,1 \cdots n$</td>
<td style="text-align:center">np</td>
<td style="text-align:center">npq</td>
</tr>
<tr>
<td style="text-align:center">几何分布</td>
<td style="text-align:center">$p(x=k)=(1-p)^{k-1}p \quad k=0,1 \cdots n$</td>
<td style="text-align:center">$\frac{1}{p}$</td>
<td style="text-align:center">$\frac{1-p}{p^2}$</td>
</tr>
<tr>
<td style="text-align:center">泊松分布</td>
<td style="text-align:center">$p(x=k)=\frac{k^ \lambda}{k!} e^{- \lambda} \quad k=0,1, \cdots n$</td>
<td style="text-align:center">$\lambda$</td>
<td style="text-align:center">$\lambda$</td>
</tr>
<tr>
<td style="text-align:center">均匀分布</td>
<td style="text-align:center"><script type="math/tex">f(x)=\begin{cases}\frac {1}{b-a} && x \in [a,b]\\0&& else\end{cases}</script></td>
<td style="text-align:center">$\frac {b+a}{2}$</td>
<td style="text-align:center">$\frac {(b-a)^2}{12}$</td>
</tr>
<tr>
<td style="text-align:center">指数分布</td>
<td style="text-align:center"><script type="math/tex">f(x)= \begin{cases} \lambda e^{-\lambda x} && x>0 \\ 0 && else \end{cases}</script></td>
<td style="text-align:center">$\frac{1}{\lambda}$</td>
<td style="text-align:center">$\frac{1}{\lambda^2}$</td>
</tr>
<tr>
<td style="text-align:center">正态分布</td>
<td style="text-align:center">$f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^\frac{(x-\mu)^2}{2\sigma^2}$</td>
<td style="text-align:center">$\mu$</td>
<td style="text-align:center">$\sigma^2$</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>期望</tag>
        <tag>方差</tag>
      </tags>
  </entry>
  <entry>
    <title>导数公式</title>
    <url>/2020/08/27/%E5%AF%BC%E6%95%B0%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="公式"><a href="#公式" class="headerlink" title="公式:"></a>公式:</h3><ol>
<li>$y=x^2    \qquad y \prime=2x$  </li>
<li>$y=c  \qquad y\prime=0$</li>
<li>$y=x^n  \qquad y\prime=nx^{n-1}$</li>
<li>$y=x^a  \qquad y\prime=ax^{a-1}$</li>
<li>$y=\sin x  \qquad y\prime=\cos x$</li>
<li>$y=\cos x  \qquad y\prime=- \sin x$</li>
<li>$y=\log_a x  \qquad y\prime= \frac{1}{x} \log_a e$</li>
<li>$y=\ln x  \qquad y\prime=\frac {1}{x}$</li>
<li>$y=a^x  \qquad y\prime=a^x \ln a$</li>
<li>$y=e^e  \qquad y\prime=e^x$</li>
</ol>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>微积分</tag>
        <tag>导数</tag>
      </tags>
  </entry>
  <entry>
    <title>bisect -数组二分查找算法</title>
    <url>/2020/07/05/%E6%95%B0%E7%BB%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>这个模块对有序列表提供了支持，使得他们可以在插入新数据仍然保持有序。对于长列表，如果其包含元素的比较操作十分昂贵的话，这可以是对更常见方法的改进。这个模块叫做 <a href="https://docs.python.org/zh-cn/3.6/library/bisect.html#module-bisect" target="_blank" rel="noopener"><code>bisect</code></a> 因为其使用了基本的二分（bisection）算法。源代码也可以作为很棒的算法示例（边界判断也做好啦！）</p>
<a id="more"></a>
<p>定义了以下函数：</p>
<ul>
<li><p><code>bisect</code>.<code>bisect_left</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>)</p>
<p>在 <em>a</em> 中找到 <em>x</em> 合适的插入点以维持有序。参数 <em>lo</em> 和 <em>hi</em> 可以被用于确定需要考虑的子集；默认情况下整个列表都会被使用。如果 <em>x</em> 已经在 <em>a</em> 里存在，那么插入点会在已存在元素之前（也就是左边）。如果 <em>a</em> 是列表（list）的话，返回值是可以被放在 <code>list.insert()</code> 的第一个参数的。返回的插入点 <em>i</em> 可以将数组 <em>a</em> 分成两部分。左侧是 <code>all(val &lt; x for val in a[lo:i])</code> ，右侧是 <code>all(val &gt;= x for val in a[i:hi])</code> 。</p>
</li>
<li><p><code>bisect</code>.<code>bisect_right</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>)</p>
</li>
<li><p><code>bisect</code>.<code>bisect</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>)</p>
<p>类似于 <a href="https://docs.python.org/zh-cn/3.6/library/bisect.html#bisect.bisect_left" target="_blank" rel="noopener"><code>bisect_left()</code></a>，但是返回的插入点是 <em>a</em> 中已存在元素 <em>x</em> 的右侧。返回的插入点 <em>i</em> 可以将数组 <em>a</em> 分成两部分。左侧是 <code>all(val &lt;= x for val in a[lo:i])</code>，右侧是 <code>all(val &gt; x for val in a[i:hi])</code> for the right side。</p>
</li>
<li><p><code>bisect</code>.<code>insort_left</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>)</p>
<p>将 <em>x</em> 插入到一个有序序列 <em>a</em> 里，并维持其有序。如果 <em>a</em> 有序的话，这相当于 <code>a.insert(bisect.bisect_left(a, x, lo, hi), x)</code>。要注意搜索是 O(log n) 的，插入却是 O(n) 的。</p>
</li>
<li><p><code>bisect</code>.<code>insort_right</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>)</p>
</li>
<li><p><code>bisect</code>.<code>insort</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>)</p>
<p>类似于 <a href="https://docs.python.org/zh-cn/3.6/library/bisect.html#bisect.insort_left" target="_blank" rel="noopener"><code>insort_left()</code></a>，但是把 <em>x</em> 插入到 <em>a</em> 中已存在元素 <em>x</em> 的右侧。</p>
</li>
</ul>
<p>以上来源于:<a href="https://docs.python.org/zh-cn/3.6/library/bisect.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.6/library/bisect.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">bisect.insort(data,<span class="number">1</span>)</span><br><span class="line">bisect.insort(data,<span class="number">3</span>)</span><br><span class="line">bisect.insort(data,<span class="number">2</span>)</span><br><span class="line">bisect.insort(data,<span class="number">9</span>)</span><br><span class="line">print(data)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是查找右边,与bisect_right一样</span></span><br><span class="line">index = bisect.bisect(data,<span class="number">4</span>)</span><br><span class="line">index_1 = bisect.bisect_right(data,<span class="number">5</span>)</span><br><span class="line">print(index,index_1)</span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 查找左边</span></span><br><span class="line">index = bisect.bisect_left(data,<span class="number">0</span>)</span><br><span class="line">print(index)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>功能很简单,如果之后有遇到需要排序插入的场景,可以用</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>文件管理系统(复制,粘贴,移动)</title>
    <url>/2020/05/25/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(%E5%A4%8D%E5%88%B6,%E7%B2%98%E8%B4%B4,%E7%A7%BB%E5%8A%A8)/</url>
    <content><![CDATA[<p>今天我们来为上次的文件系统新增复制,粘贴,移动功能.</p>
<p>首先需要通过选择文件或文件夹,然后把选择的文件或文件夹记录下来,传递给后端,粘贴跟移动其实差不多,我们可以写在一个API里,通过类型不同来判断.</p>
<a id="more"></a>
<h2 id="前端选择并获取记录"><a href="#前端选择并获取记录" class="headerlink" title="前端选择并获取记录"></a>前端选择并获取记录</h2><p>在前端表格中新增选择列</p>
<p>实现多选非常简单: 手动添加一个<code>el-table-column</code>，设<code>type</code>属性为<code>selection</code>即可；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column type=<span class="string">'selection'</span>&gt;&lt;<span class="regexp">/el-table-column&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/文件管理系统/6.png" alt=""></p>
<p>我们查看element-ui表格文档,有两个事件来获取我们的选择的记录</p>
<p><img src="/images/文件管理系统/7.png" alt=""></p>
<p>在<code>el-table</code>中添加事件,两个事件可以同时绑定一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-table</span><br><span class="line">             :data=<span class="string">"file_list"</span></span><br><span class="line">             stripe</span><br><span class="line">             style=<span class="string">"width: 100%"</span></span><br><span class="line">             @select=<span class="string">'slectHandler'</span></span><br><span class="line">             @select-all=<span class="string">'slectHandler'</span>&gt;</span><br></pre></td></tr></table></figure>
<p>在upload中新加三个按钮,用来控制复制,粘贴,移动,通过<code>v-show</code>在有选择行的时候显示,没有的时间隐藏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px;"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">v-show</span>=<span class="string">'show_copy_btn'</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px;"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"warning"</span> <span class="attr">v-show</span>=<span class="string">'show_copy_btn'</span>&gt;</span>粘贴<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px;"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">v-show</span>=<span class="string">'show_copy_btn'</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取对应的行</span></span><br><span class="line">               slectHandler(selection) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (selection.length === <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.show_copy_btn = <span class="literal">false</span></span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">this</span>.show_copy_btn = <span class="literal">true</span></span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">this</span>.select_data = selection</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="/images/文件管理系统/8.gif" alt=""></p>
<h2 id="在点击复制按钮的时候把数据处理并保存"><a href="#在点击复制按钮的时候把数据处理并保存" class="headerlink" title="在点击复制按钮的时候把数据处理并保存"></a>在点击复制按钮的时候把数据处理并保存</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理数据并保存</span></span><br><span class="line">               copy_data() &#123;</span><br><span class="line">                   <span class="comment">// 因为选中才显示,所以省去了判断是否选中的麻烦</span></span><br><span class="line">                   <span class="keyword">this</span>.item_list = []</span><br><span class="line">                   <span class="keyword">this</span>.select_data.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">                       <span class="keyword">this</span>.item_list.push(<span class="keyword">this</span>.file_path + element.name)</span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">			<span class="comment">//提示用户复制成功</span></span><br><span class="line">			<span class="keyword">this</span>.$message.success(<span class="string">'复制成功'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="移动或粘贴"><a href="#移动或粘贴" class="headerlink" title="移动或粘贴"></a>移动或粘贴</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 粘贴或移动,通过传进来的参数判断</span></span><br><span class="line">           <span class="keyword">async</span> copy_or_move(item_type) &#123;</span><br><span class="line">               <span class="comment">//   先判断是否点击了复制按钮</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.item_list.length === <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.$message.error(<span class="string">'请先点击复制按钮,来确定你需要'</span> + (item_type === <span class="string">'move'</span> ? <span class="string">'移动'</span> : <span class="string">'粘贴'</span>) + <span class="string">'的文件或文件夹'</span>)</span><br><span class="line">                   <span class="keyword">return</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 向后端发送API请求</span></span><br><span class="line">               <span class="keyword">const</span> &#123;</span><br><span class="line">                   data: result</span><br><span class="line">               &#125; = <span class="keyword">await</span> axios.post(<span class="string">'http://127.0.0.1:3000/api/private/v1/moveorcopy/'</span> + <span class="keyword">this</span>.file_path, &#123;</span><br><span class="line">                   item_list: <span class="keyword">this</span>.item_list,</span><br><span class="line">                   item_type: item_type</span><br><span class="line">               &#125;)</span><br><span class="line">               <span class="keyword">if</span> (result.status !== <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.$message.error(result.msg)</span><br><span class="line">                   <span class="keyword">return</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 复制完之后隐藏按钮</span></span><br><span class="line">               <span class="keyword">this</span>.show_copy_btn = <span class="literal">false</span></span><br><span class="line">               <span class="keyword">this</span>.$message.succsee(result.msg)</span><br><span class="line">               <span class="keyword">this</span>.get_file_list(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path)</span><br><span class="line"></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<h2 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="comment"># 移动或者粘贴文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyOrMoveItem</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    item_list:List</span><br><span class="line">    item_type:str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_dir</span><span class="params">(src,dest)</span>:</span></span><br><span class="line">    <span class="comment"># 目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest):</span><br><span class="line">        os.mkdir(dest)</span><br><span class="line">    src_list = os.listdir(src)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> src_list:</span><br><span class="line">        <span class="comment"># 如果是目录就递归</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(os.path.join(src,item)):</span><br><span class="line">            copy_dir(os.path.join(src,item),os.path.join(dest,item))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shutil.copy(os.path.join(src,item),dest)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post('/moveorcopy/&#123;file_path:path&#125;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_or_copy</span><span class="params">(copy_or_move_item:CopyOrMoveItem,file_path:str=None)</span>:</span></span><br><span class="line">    status_date = StatusData()</span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="comment"># 判断是移动还是粘贴</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> copy_or_move_item.item_type==<span class="string">'move'</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> copy_or_move_item.item_list:</span><br><span class="line">                <span class="comment"># 判断文件或文件夹是否已存在</span></span><br><span class="line">                _,file_name = os.path.split(item)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(BASE_FILE_PATH+file_path+file_name):</span><br><span class="line">                <span class="comment"># 存在就报错</span></span><br><span class="line">                    <span class="keyword">raise</span> Exception(file_name+<span class="string">'已存在'</span>)</span><br><span class="line">                shutil.move(BASE_FILE_PATH+item,BASE_FILE_PATH+file_path)</span><br><span class="line">            status_date.msg=<span class="string">'移动成功'</span></span><br><span class="line">        <span class="keyword">elif</span> copy_or_move_item.item_type==<span class="string">'copy'</span>:</span><br><span class="line">            <span class="comment"># 复制分两种,一种是文件,一种是目录</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> copy_or_move_item.item_list:</span><br><span class="line">                _, file_name = os.path.split(item)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(BASE_FILE_PATH  + file_path + file_name):</span><br><span class="line">                    <span class="comment"># 存在就报错</span></span><br><span class="line">                    <span class="keyword">raise</span> Exception(file_name + <span class="string">'已存在'</span>)</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(BASE_FILE_PATH+item):</span><br><span class="line">                    <span class="comment"># 文件就直接复制</span></span><br><span class="line">                    shutil.copy(BASE_FILE_PATH+item,BASE_FILE_PATH+file_path)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 文件的话就要递归复制</span></span><br><span class="line">                    copy_dir(BASE_FILE_PATH+item,BASE_FILE_PATH+file_path+file_name)</span><br><span class="line">            status_date.msg=<span class="string">'粘贴成功'</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(traceback.format_exc())</span><br><span class="line">        status_date.msg=str(e)</span><br><span class="line">        status_date.status=<span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> status_date.to_dict()</span><br></pre></td></tr></table></figure>
<p>演示:</p>
<p><img src="/images/文件管理系统/9.gif" alt=""></p>
<p>代码已更新到<a href="https://github.com/Tigercoll/file_system" target="_blank" rel="noopener">github</a></p>
]]></content>
      <categories>
        <category>前后端项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>文件管理系统</title>
    <url>/2020/05/21/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>此项目为web版文件管理系统,主要提供文件的上传,下载,展示,删除,重命名以及文件夹的新建,重命名</p>
<p>项目为前后端分离项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">后端:提供api接口,返回json数据</span><br><span class="line">	fastAPI框架</span><br><span class="line">	os模块</span><br><span class="line">前端:请求api接口,接收json数据,并做页面的展示</span><br><span class="line">    因为这个项目比较小,所以没有用vue-cli</span><br><span class="line">    vue单页面</span><br><span class="line">    axios 发送请求</span><br><span class="line">    element-ui 展示页面</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="后端结构"><a href="#后端结构" class="headerlink" title="后端结构"></a>后端结构</h2><p>因为只是一个小项目,所以比较简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">api.py:提供API接口,返回json数据</span><br><span class="line">main.py:程序入口,启动python main.py</span><br><span class="line">tool.py:自己写的小功能函数</span><br><span class="line">settings:配置相关</span><br></pre></td></tr></table></figure>
<h2 id="获取根目录文件列表"><a href="#获取根目录文件列表" class="headerlink" title="获取根目录文件列表"></a>获取根目录文件列表</h2><p>通过file_path路径参数,获取目录列表或者子目录列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 封装返回状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusData</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,status=<span class="number">200</span>,msg=<span class="string">'请求成功'</span>,data=None,error=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param status: 请求状态,请求成功 200,创建成功201,删除成功204,请求失败400,创建失败401</span></span><br><span class="line"><span class="string">        :param msg: 信息</span></span><br><span class="line"><span class="string">        :param data: 数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.status=status</span><br><span class="line">        self.msg=msg</span><br><span class="line">        self.data=data</span><br><span class="line">        self.error=error</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取文件列表</span></span><br><span class="line"><span class="meta">@router.get('/files/&#123;file_path:path&#125;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_files_list</span><span class="params">(file_path:str=None)</span>:</span></span><br><span class="line">    status_data = StatusData()</span><br><span class="line">    status_data.data = []</span><br><span class="line">    base_file_path = BASE_FILE_PATH</span><br><span class="line">    <span class="comment"># 如果file_path 为空,则查询根目录</span></span><br><span class="line">    <span class="comment"># 如果用 os.path.join() 会出现可以访问任意盘的问题所以这里改用+号</span></span><br><span class="line">    current_file_path = base_file_path+file_path</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(current_file_path):</span><br><span class="line">            status_data.status=<span class="number">402</span></span><br><span class="line">            status_data.msg = <span class="string">'文件或文件夹不存在'</span></span><br><span class="line">            status_data.error = <span class="string">'路径错误'</span></span><br><span class="line">            <span class="keyword">return</span> status_data.to_dict()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path <span class="keyword">or</span> os.path.isdir(current_file_path):</span><br><span class="line">            base_files_list = os.listdir(current_file_path)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span>  base_files_list:</span><br><span class="line">                <span class="comment"># 拼接成完整路径</span></span><br><span class="line">                path = os.path.join(current_file_path,file)</span><br><span class="line">                <span class="comment"># 判断文件是否为目录</span></span><br><span class="line">                <span class="keyword">if</span>  os.path.isdir(path):</span><br><span class="line">                     <span class="comment"># 把文件夹放在前面</span></span><br><span class="line">                    status_data.data.insert(<span class="number">0</span>,&#123;<span class="string">'name'</span>:file,<span class="string">'file_type'</span>:<span class="string">'dir'</span>,<span class="string">'update_time'</span>:get_update_time(path),<span class="string">'size'</span>:get_dir_size(path)&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    status_data.data.append(&#123;<span class="string">'name'</span>: file, <span class="string">'file_type'</span>: <span class="string">'file'</span>,<span class="string">'update_time'</span>:get_update_time(path),<span class="string">'size'</span>:get_file_size(path)&#125;)</span><br><span class="line">            <span class="keyword">return</span> status_data.to_dict()</span><br><span class="line">        <span class="comment"># 否则为文件 直接返回FileResponse</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> FileResponse(current_file_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        status_data.status=<span class="number">500</span></span><br><span class="line">        status_data.msg=traceback.format_exc()</span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br></pre></td></tr></table></figure>
<h2 id="vue-渲染页面"><a href="#vue-渲染页面" class="headerlink" title="vue 渲染页面"></a>vue 渲染页面</h2><p>截图如下:</p>
<p><img src="/images/文件管理系统/1.png" alt=""></p>
<p>这里主要功能有点击文件夹 打开文件夹下的子目录,点击文件直接提供下载.</p>
<p>点击面包屑回到相应的文件夹位置.</p>
<p>基本代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">               <span class="comment">// 获取文件夹列表</span></span><br><span class="line">               <span class="keyword">async</span> get_file_list(url) &#123;</span><br><span class="line">                   <span class="keyword">const</span> &#123;</span><br><span class="line">                       data: result</span><br><span class="line">                   &#125; = <span class="keyword">await</span> axios.get(url)</span><br><span class="line">                   <span class="keyword">if</span> (result.status !== <span class="number">200</span>) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.$message.error(result.msg)</span><br><span class="line">                       <span class="keyword">return</span></span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">this</span>.file_list = result.data</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 获取新的文件夹列表通过name</span></span><br><span class="line">               get_new_file_list(row) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (row.file_type === <span class="string">'dir'</span>) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.history_list.push(row.name)</span><br><span class="line">                       <span class="keyword">this</span>.file_path = <span class="keyword">this</span>.file_path + row.name + <span class="string">'/'</span></span><br><span class="line">                       <span class="keyword">this</span>.get_file_list(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path)</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="built_in">window</span>.open(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path + row.name)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 返回父文件夹</span></span><br><span class="line">               go_back(index) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.file_path = <span class="keyword">this</span>.history_list.slice(<span class="number">1</span>, index + <span class="number">1</span>).join(<span class="string">'/'</span>) + <span class="string">'/'</span></span><br><span class="line">                   <span class="keyword">this</span>.history_list = <span class="keyword">this</span>.history_list.slice(<span class="number">0</span>, index + <span class="number">1</span>)</span><br><span class="line">                   <span class="keyword">this</span>.get_file_list(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="添加文件夹"><a href="#添加文件夹" class="headerlink" title="添加文件夹"></a>添加文件夹</h2><p>只需传对应的路径,文件夹名称就可以了</p>
<p>后端代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FolderItem</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    name:str</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post('/files/&#123;file_path:path&#125;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_folder</span><span class="params">(folder_item:FolderItem,file_path:str=None)</span>:</span></span><br><span class="line">    status_data = StatusData()</span><br><span class="line">    base_file_path = BASE_FILE_PATH</span><br><span class="line">    current_file_path = base_file_path + file_path</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(current_file_path,folder_item.name)):</span><br><span class="line">            os.mkdir(os.path.join(current_file_path,folder_item.name))</span><br><span class="line">            status_data.status=<span class="number">201</span></span><br><span class="line">            status_data.msg=<span class="string">'创建成功'</span></span><br><span class="line">            <span class="keyword">return</span> status_data.to_dict()</span><br><span class="line">        status_data.status=<span class="number">401</span></span><br><span class="line">        status_data.msg=<span class="string">'文件夹已存在'</span></span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        status_data.status = <span class="number">500</span></span><br><span class="line">        status_data.msg = traceback.format_exc()</span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br></pre></td></tr></table></figure>
<p>前端展示:</p>
<p><img src="/images/文件管理系统/2.png" alt=""></p>
<p>主要代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加文件夹</span></span><br><span class="line">             add_folder() &#123;</span><br><span class="line">                 <span class="keyword">this</span>.$refs.addFormRef.validate(</span><br><span class="line">                     <span class="keyword">async</span> valid =&gt; &#123;</span><br><span class="line">                         <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                             <span class="keyword">return</span></span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="keyword">const</span> &#123;</span><br><span class="line">                             data: result</span><br><span class="line">                         &#125; = <span class="keyword">await</span> axios.post(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path, <span class="keyword">this</span>.addForm)</span><br><span class="line">                         <span class="built_in">console</span>.log(result)</span><br><span class="line">                         <span class="keyword">if</span> (result.status !== <span class="number">201</span>) &#123;</span><br><span class="line">                             <span class="keyword">this</span>.$message.error(result.msg)</span><br><span class="line">                             <span class="keyword">return</span></span><br><span class="line">                         &#125;</span><br><span class="line"></span><br><span class="line">                         <span class="keyword">this</span>.$message.success(result.msg)</span><br><span class="line">                         <span class="keyword">this</span>.get_file_list(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path)</span><br><span class="line">                         <span class="keyword">this</span>.addDialogVisible = <span class="literal">false</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 )</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="comment">// 重置表单 </span></span><br><span class="line">             resetForm() &#123;</span><br><span class="line">                 <span class="keyword">this</span>.$refs.addFormRef.resetFields();</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>其实重命名跟添加文件夹逻辑差不多,只需要再加一个参数就可以了.所以我们复用添加文件夹的代码:</p>
<p>只要判断一下有没有重命名 new_name就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FolderItem</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    name:str</span><br><span class="line">    new_name:str=<span class="literal">None</span></span><br><span class="line"><span class="meta">@router.post('/files/&#123;file_path:path&#125;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_folder</span><span class="params">(folder_item:FolderItem,file_path:str=None)</span>:</span></span><br><span class="line">    status_data = StatusData()</span><br><span class="line">    base_file_path = BASE_FILE_PATH</span><br><span class="line">    current_file_path = base_file_path + file_path</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 判断是否有new_name,有则为重命名</span></span><br><span class="line">        <span class="keyword">if</span> folder_item.new_name:</span><br><span class="line">            <span class="comment"># 判断重命名文件夹是否已存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(current_file_path, folder_item.new_name)):</span><br><span class="line">                os.rename(os.path.join(current_file_path,folder_item.name),os.path.join(current_file_path,folder_item.new_name))</span><br><span class="line">                <span class="comment"># 如果用程序改名的时候不会更新修改时间,这里我们调用os.utime 更改</span></span><br><span class="line">                os.utime(os.path.join(current_file_path,folder_item.new_name),(time.time(),time.time()))</span><br><span class="line">                status_data.status = <span class="number">201</span></span><br><span class="line">                status_data.msg = <span class="string">'重命名成功'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                status_data.status = <span class="number">401</span></span><br><span class="line">                status_data.msg = <span class="string">'文件夹已存在'</span></span><br><span class="line">        <span class="comment"># 判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(current_file_path,folder_item.name)):</span><br><span class="line">                os.mkdir(os.path.join(current_file_path,folder_item.name))</span><br><span class="line">                status_data.status=<span class="number">201</span></span><br><span class="line">                status_data.msg=<span class="string">'创建成功'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                status_data.status=<span class="number">401</span></span><br><span class="line">                status_data.msg=<span class="string">'文件夹已存在'</span></span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        status_data.status = <span class="number">500</span></span><br><span class="line">        status_data.msg = traceback.format_exc()</span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br></pre></td></tr></table></figure>
<p>前端也是公用一个dialog</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加文件夹 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">"is_new_name?'重命名':'添加文件夹'"</span> <span class="attr">:visible.sync</span>=<span class="string">"addDialogVisible"</span> <span class="attr">width</span>=<span class="string">"30%"</span> @<span class="attr">close</span>=<span class="string">'resetForm'</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"addFormRef"</span> <span class="attr">:model</span>=<span class="string">"addForm"</span> <span class="attr">label-width</span>=<span class="string">"80px"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"名称:"</span> <span class="attr">prop</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"addForm.name"</span> <span class="attr">:disabled</span>=<span class="string">"is_new_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"重命名:"</span> <span class="attr">prop</span>=<span class="string">'new_name'</span> <span class="attr">v-if</span>=<span class="string">'is_new_name'</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"addForm.new_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"addDialogVisible = false"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"add_folder"</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重命名</span></span><br><span class="line">    rename(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.addForm.name = name</span><br><span class="line">        <span class="keyword">this</span>.is_new_name = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.addDialogVisible = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/文件管理系统/3.png" alt=""></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>需要安装<code>python-multipart</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line"><span class="meta">@router.post('/upload/&#123;file_path:path&#125;')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_upload</span><span class="params">(file_path:str=None,file:UploadFile=File<span class="params">(...)</span>)</span>:</span></span><br><span class="line">    base_file_path = BASE_FILE_PATH</span><br><span class="line">    status_data = StatusData()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        contents = <span class="keyword">await</span> file.read()</span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(base_file_path,file_path,file.filename), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(contents)</span><br><span class="line">            status_data.status=<span class="number">200</span></span><br><span class="line">            status_data.msg=<span class="string">'上传成功'</span></span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        status_data.status = <span class="number">500</span></span><br><span class="line">        status_data.msg = traceback.format_exc()</span><br><span class="line">    <span class="keyword">return</span> status_data.to_dict()</span><br></pre></td></tr></table></figure>
<p>前端页面:</p>
<p><img src="/images/文件管理系统/4.png" alt=""></p>
<p>前端代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">"upload-demo"</span> <span class="attr">ref</span>=<span class="string">"upload"</span> <span class="attr">:action</span>=<span class="string">" 'http://127.0.0.1:3000/api/private/v1/upload/' + file_path "</span> <span class="attr">multiple</span> <span class="attr">:auto-upload</span>=<span class="string">"false"</span> <span class="attr">:on-success</span>=<span class="string">'handleAvatarSuccess'</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">"trigger"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>选取文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px;"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"success"</span> @<span class="attr">click</span>=<span class="string">"submitUpload"</span>&gt;</span>上传到服务器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意这里需要把路径写在action里面当然有多级 所以不要忘了加file_path</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击上传文件</span></span><br><span class="line">               submitUpload() &#123;</span><br><span class="line">                   <span class="keyword">this</span>.$refs.upload.submit();</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 上传成功钩子函数</span></span><br><span class="line">               handleAvatarSuccess(res, file, fileList) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.$message.error(res.msg)</span><br><span class="line">                       <span class="keyword">return</span></span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">var</span> index = fileList.indexOf(file)</span><br><span class="line">                   fileList.splice(index, <span class="number">1</span>)</span><br><span class="line">                   <span class="keyword">this</span>.$message.success(res.msg)</span><br><span class="line">                   <span class="keyword">this</span>.get_file_list(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path)</span><br><span class="line">               &#125;,</span><br></pre></td></tr></table></figure>
<p>这里的多文件上传,其实还是一个一个向后台发送请求的.</p>
<h2 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h2><p>这里需要计算目录是否为空,为空则可以删除,不为空则不行.</p>
<p>这里提供配置,毕竟删除有可能是重要文件,所以最好找个地方存放一下,就像回收站一样</p>
<p>在settings里配置:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为true时,移动目录,false真正删除,</span></span><br><span class="line">MOVE = <span class="literal">True</span></span><br><span class="line">BAK_FILE_PATH=<span class="string">r'D:/file_test_bak/'</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是你移动到备份空间的时候会有重复,需要判断一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除文件或目录</span></span><br><span class="line"><span class="meta">@router.delete('/files/&#123;file_path:path&#125;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_files</span><span class="params">(file_path:str)</span>:</span></span><br><span class="line">    <span class="comment">#不允许为空,为空则删除跟目录了</span></span><br><span class="line">    status_data = StatusData()</span><br><span class="line">    base_file_path = BASE_FILE_PATH</span><br><span class="line">    current_file_path = base_file_path + file_path</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 如果为目录则计算他的大小</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(current_file_path):</span><br><span class="line">            <span class="keyword">if</span> get_dir_size(current_file_path)==<span class="string">'0.00 B'</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MOVE:</span><br><span class="line">                    shutil.rmtree(current_file_path)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 移动前判断是否存在</span></span><br><span class="line">                    _, file_name = os.path.split(current_file_path)</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(os.path.join(BAK_FILE_PATH,file_name)):</span><br><span class="line">                        bak = <span class="string">f'_<span class="subst">&#123;time.time()&#125;</span>_bak'</span></span><br><span class="line">                        <span class="comment"># 存在则加上.bak</span></span><br><span class="line">                        os.rename(current_file_path,current_file_path+bak)</span><br><span class="line">                        current_file_path=current_file_path+bak</span><br><span class="line">                    shutil.move(current_file_path,BAK_FILE_PATH)</span><br><span class="line">                status_data.status=<span class="number">204</span></span><br><span class="line">                status_data.msg=<span class="string">'删除成功'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                status_data.status=<span class="number">400</span></span><br><span class="line">                status_data.msg=<span class="string">'此目录不为空,不能删除'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> MOVE:</span><br><span class="line">                shutil.rmtree(current_file_path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                _,file_name=os.path.split(current_file_path)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(os.path.join(BAK_FILE_PATH,file_name)):</span><br><span class="line">                    bak = <span class="string">f'_<span class="subst">&#123;time.time()&#125;</span>_bak'</span></span><br><span class="line">                    <span class="comment"># 存在则加上.bak</span></span><br><span class="line">                    os.rename(current_file_path, current_file_path + bak)</span><br><span class="line">                    current_file_path = current_file_path + bak</span><br><span class="line">                shutil.move(current_file_path, BAK_FILE_PATH)</span><br><span class="line">            status_data.status = <span class="number">204</span></span><br><span class="line">            status_data.msg = <span class="string">'删除成功'</span></span><br><span class="line">        <span class="keyword">return</span>  status_data.to_dict()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        status_data.msg=traceback.format_exc()</span><br><span class="line">        status_data.status=<span class="number">500</span></span><br><span class="line">        <span class="keyword">return</span> status_data.to_dict()</span><br></pre></td></tr></table></figure>
<p>前端展示:</p>
<p><img src="/images/文件管理系统/5.png" alt=""></p>
<p>主要代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">del_file(row) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.$confirm(<span class="string">'此操作将永久删除该文件, 是否继续?'</span>, <span class="string">'警告'</span>, &#123;</span><br><span class="line">                       confirmButtonText: <span class="string">'确定'</span>,</span><br><span class="line">                       cancelButtonText: <span class="string">'取消'</span>,</span><br><span class="line">                       type: <span class="string">'warning'</span></span><br><span class="line">                   &#125;).then(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">                       <span class="keyword">if</span> (row.file_type === <span class="string">'dir'</span> &amp;&amp; row.size !== <span class="string">'0.00 B'</span>) &#123;</span><br><span class="line">                           <span class="keyword">throw</span> <span class="string">'文件夹不为空,不能删除'</span></span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">const</span> &#123;</span><br><span class="line">                           data: result</span><br><span class="line">                       &#125; = <span class="keyword">await</span> axios.delete(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path + row.name)</span><br><span class="line">                       <span class="keyword">if</span> (result.status !== <span class="number">204</span>) &#123;</span><br><span class="line">                           <span class="keyword">throw</span> result.msg</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">this</span>.get_file_list(<span class="keyword">this</span>.base_url + <span class="keyword">this</span>.file_path)</span><br><span class="line">                       <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                           type: <span class="string">'success'</span>,</span><br><span class="line">                           message: <span class="string">'删除成功!'</span></span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;).catch(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                           type: <span class="string">'error'</span>,</span><br><span class="line">                           message: msg === <span class="string">'cancel'</span> ? <span class="string">'取消删除'</span> : msg</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>
<p>至此,已全部实现上传,添加文件夹,删除,重命名</p>
<p>接下来后续实现文件,文件夹的移动.</p>
<p>代码存放在 <a href="https://github.com/Tigercoll/file_system" target="_blank" rel="noopener">github</a> 欢迎指正</p>
]]></content>
      <categories>
        <category>前后端项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无穷小替换</title>
    <url>/2020/08/27/%E6%97%A0%E7%A9%B7%E5%B0%8F%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="公式"><a href="#公式" class="headerlink" title="公式:"></a>公式:</h3><p>当$x \to 0$ 时</p>
<ol>
<li>$ \ln(1+x) \sim x$</li>
<li>$e^x-1 \sim x$</li>
<li>$\quad \sqrt[n]{1+x}-1 \sim \frac{1}{n}x$</li>
<li>$a^x-1 \sim x \ln a$</li>
<li>$\sin x \sim x$</li>
<li>$tan x \sim x$</li>
</ol>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>微积分</tag>
        <tag>极限</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章,统计学习以及监督学习概论 笔记</title>
    <url>/2020/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<p>监督学习是从标注数据中学习模型的机器学习问题,是统计学习或机器学习的重要部分.</p>
<a id="more"></a>
<h2 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h2><h3 id="统计学习的特点"><a href="#统计学习的特点" class="headerlink" title="统计学习的特点"></a>统计学习的特点</h3><p>就是用计算机,以数据为研究对象,对数据进行建模,并且应用模型来进行预测与分析</p>
<h3 id="统计学习的对象"><a href="#统计学习的对象" class="headerlink" title="统计学习的对象"></a>统计学习的对象</h3><p>研究的对象是数据,可以是不同的数据,比如:数字,文字,图形,视频,音频等,但是这些数据必须具有一定的规律性</p>
<h3 id="统计学习的目的"><a href="#统计学习的目的" class="headerlink" title="统计学习的目的"></a>统计学习的目的</h3><p>说白了就是通过数据的分析,来预测未来.</p>
<p>通过构建概率模型,预测未知的心数据.</p>
<h3 id="统计学习的方法"><a href="#统计学习的方法" class="headerlink" title="统计学习的方法"></a>统计学习的方法</h3><p>统计学的方法是基于数据构建概率模型从而对数据进行预测与分析.分为有监督学习(supervised learning)和无监督学习(unsupervised learning),强化学习等等</p>
<p>实现统计学习方法的步骤如下:</p>
<ol>
<li>得到一个有限的训练数据集合;</li>
<li>确定包含所有可能的模型的假设空间,即学习模型的集合;</li>
<li>确定模型选择的准则,即学习的策略;</li>
<li>实现求解最优模型的算法,即学习的算法;</li>
<li>通过学习方法选择最优模型;</li>
<li>利用学习的最优模型对数据进行预测或分析</li>
</ol>
<h3 id="统计学习的研究"><a href="#统计学习的研究" class="headerlink" title="统计学习的研究"></a>统计学习的研究</h3><p>三个方面:</p>
<ol>
<li>学习方法:开发新的学习方法;</li>
<li>统计学习理论:探求统计学习方法的有效性和效率,以及统计学习的理论问题;</li>
<li>统计学习应用:应用到实际问题中,解决实际问题.</li>
</ol>
<h3 id="统计学习的重要性"><a href="#统计学习的重要性" class="headerlink" title="统计学习的重要性"></a>统计学习的重要性</h3><p>1).处理海量数据</p>
<p>2).计算机智能化的有效手段</p>
<p>3).计算机科学发展的一个重要组成部分.</p>
<h2 id="统计学习的分类"><a href="#统计学习的分类" class="headerlink" title="统计学习的分类"></a>统计学习的分类</h2><h3 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h3><h4 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h4><p>监督学习是指从标注数据中学习预测模型的机器学习问题.标注数据表示输入输出的对应关系,预测模型对给定输入产生相应的输出.监督学习的本质是学习输入到输出的映射统计规律.</p>
<h5 id="输入空间-特征空间和输出空间"><a href="#输入空间-特征空间和输出空间" class="headerlink" title="输入空间,特征空间和输出空间"></a>输入空间,特征空间和输出空间</h5><p>所有输入输出的可能取值的集合分别称为输入空间与输出空间</p>
<p>每个具体的输入都是一个实例,通常由特征向量表示.所有特征向量所存在的空间,我们称为特征空间.</p>
<p>特征空间的每一维对应于一个特征</p>
<p>习惯上,输入变量写作X,输出变量写作Y.用大写字母表示.</p>
<p>输入变量的取值用x 表示,输出变量的取值用y表示.</p>
<p>变量可以是标量,也可以是向量.</p>
<p>输入实例的特征向量记做</p>
<script type="math/tex; mode=display">
x=(x^{(1)},x^{(2)},...x^{(i)},,...,x^{(n)})^{T}</script><p>监督学习从训练数据集合中学习模型,对测试数据进行预测.训练数据由输入与输出对组成.</p>
<p>测试数据也是由 输入与输出对组成,输入与输出对又称为样本或样本点.</p>
<p>输入变量X 和输出变量Y 又不同类型的,可以是连续的也可以是离散的,人们根据输入输出变量的不同类型,对预测任务给予不同的名称</p>
<p>如:</p>
<p>回归问题:输入与输出均为连续变量的预测问题;</p>
<p>分类问题:输出变量为有限个离散变量的预测问题;</p>
<p>标注问题:输入输出均为变量序列的预测问题.</p>
<h5 id="联合概率分布"><a href="#联合概率分布" class="headerlink" title="联合概率分布"></a>联合概率分布</h5><p>监督学习的前提是假设输入X 与输出Y 具有联合概率分布.</p>
<p>即训练集数据与测试数据被看作是依联合概率分布 $P(X,Y)$ 独立同分布产生的.</p>
<h5 id="假设空间"><a href="#假设空间" class="headerlink" title="假设空间"></a>假设空间</h5><p>监督学习的目的 在于学习一个由输入到输出的映射,这一映射由模型来表示.一句话就是找一个最好的学习模型.</p>
<p>模型属于由输入空间到输出空间的映射的集合.这个集合就是假设空间.假设空间的确定意味着学习范围的确定.</p>
<h5 id="问题的形式化"><a href="#问题的形式化" class="headerlink" title="问题的形式化"></a>问题的形式化</h5><p>监督学习利用训练数据集学习一个模型,再用模型对测试样本集进行预测.由于标注的训练数据集,都是人工给出的,所以称为监督学习.</p>
<p>监督学习分为学习和预测两个过程.由学习系统与预测系统完成.</p>
<p><img src="/images/统计学习以及监督学习概论/监督学习1.1.PNG" alt="监督学习1.1"></p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>监督学习就是通过给定训练集,假设输入X 与输出Y 具有联合概率分布,然后通过学习得到一个模型,然后通过模型来预测 测试集数据.并得到一个误差最小的模型.</p>
<h4 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h4><p>无监督学习是指从无标注数据中学习预测模型的机器学习问题.</p>
<p>无标注数据是自然得到的数据,预测模型表示数据的类别,转换或概率</p>
<p>无监督学习的本质是学习数据中的统计规律或潜在结构.</p>
<p><img src="/images/统计学习以及监督学习概论/无监督学习1.2.png" alt="无监督学习1.2"></p>
<p>无监督学习与有监督学习类似,都是通过数据(有监督是通过标注数据,无监督是通过无标注数据)学习预测模型的机器学习问题.</p>
<h4 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h4><p>强化学习是指只能系统在与环境的连续互动中学习最优行为的策略机器学习问题.(不是很理解,我们先放一下,因为这一章只是介绍学习的分类)</p>
<p>强化学习的本质是学习最优的序贯决策.</p>
<h4 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h4><p>半监督学习是指利用标注数据和未标注数据徐诶预测模型的机器学习问题</p>
<h4 id="主动学习"><a href="#主动学习" class="headerlink" title="主动学习"></a>主动学习</h4><p>主动学习是指机不断主动给出实例让教师进行标注,然后利用标注数据学习预测模型的机器学习问题</p>
<h3 id="按模型分类"><a href="#按模型分类" class="headerlink" title="按模型分类"></a>按模型分类</h3><p>统计学习或机器学习方法可以根据其模型的种类进行分类</p>
<h4 id="概率模型与非概率模型"><a href="#概率模型与非概率模型" class="headerlink" title="概率模型与非概率模型"></a>概率模型与非概率模型</h4><p>统计学习的模型可以分为概率模型和非概率模型或者确定性模型.</p>
<p>决策树,朴素贝叶斯,隐马尔可夫模型,条件随机场,概率潜在语义分析,潜在狄立克雷分配,高斯混合模型是概率模型.</p>
<p>感知机,支持向量机,k近邻,AdaBoost,k均值,潜在语义分析,以及神经网络是非概率模型.逻辑回归既可以看作是概率模型,又可以看作是非概率模型.</p>
<p>条件概率分布最大化后得到函数,函数归一化后得到条件概率分布.(不是很能理解,以后再来填坑)</p>
<p>结论:概率模型和非概率模型的区别不在于输入与输出之间的映射关系,而在于模型的内在结构.</p>
<p>概率模型一定可以表示为联合概率分布形式,其中的变量表示输入,输出,隐变量甚至参数.而针对非概率模型则不一定存在这样的联合概率分布.</p>
<p>概率模型的代表是概率图模型,概率图模型是联合概率分布由有向图或者无向图表示的概率模型,而联合概率分布可以根据图的结构分解为因子乘积的形式.无论模型如何复杂,均可以用最基本的加法规则和乘法规则进行概率推理.</p>
<p><img src="/images/统计学习以及监督学习概论/1.4基本概率公式.jpg" alt="1.4基本概率公式"></p>
<h4 id="线性模型和非线性模型"><a href="#线性模型和非线性模型" class="headerlink" title="线性模型和非线性模型"></a>线性模型和非线性模型</h4><p>统计学习模型,特别是非概率模型,可以分为线性模型和非线性模型.</p>
<p>如果函数 $y=f(x)$或$z=g(x)$ 是线性函数,则称模型是线性模型,否则称模型是非线性模型.</p>
<h4 id="参数模型与非参数模型"><a href="#参数模型与非参数模型" class="headerlink" title="参数模型与非参数模型"></a>参数模型与非参数模型</h4><p>统计学习模型又可以分为参数化模型和非参数化模型.参数化模型假设模型参数的维度固定,模型可以由有限维参数刻画;而非参数化模型假设模型参数的维度不固定或者说无穷大,随着训练数据量的增加而不断增大.</p>
<h3 id="按算法分类"><a href="#按算法分类" class="headerlink" title="按算法分类"></a>按算法分类</h3><p>统计学习根据算法,可以分为在线学习与批量学习.</p>
<p>在线学习是指每次接受一个样本,进行预测,之后学习模型,并不断重复该操作的机器学习.</p>
<p>与之对应,批量学习一次接受所有数据,学习模型,之后进行预测.</p>
<h3 id="按技巧分类"><a href="#按技巧分类" class="headerlink" title="按技巧分类"></a>按技巧分类</h3><p>统计学习方法可以根据其使用的技巧进行分类</p>
<h4 id="贝叶斯学习"><a href="#贝叶斯学习" class="headerlink" title="贝叶斯学习"></a>贝叶斯学习</h4><p>贝叶斯学习,又称为贝叶斯推理,是统计学,机器学习中最重要的方法.其主要想法是,在概率模型的学习和推理中,利用贝叶斯定理,计算在给定数据条件下模型的条件概率,即后验概率,并应用这个原理进行模型的估计,以及对数据的预测.将模型,未观测要素及其参数用变量表示,使用模型的先验分布是贝叶斯学习的特点.</p>
<h4 id="核方法"><a href="#核方法" class="headerlink" title="核方法"></a>核方法</h4><p>核方法是使用核函数表示和学习非线性模型的一种机器学习方法.可以用于监督学习和无监督学习.</p>
<p>有一些线性模型的学习方法基于相似度计算,更具体地,向量内积计算.核方法可以把他们扩展到非线性模型的学习,使其应用范围更广泛.</p>
]]></content>
      <categories>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>统计学习方法</tag>
        <tag>监督学习</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>asyncio</title>
    <url>/2020/06/30/%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li>回调模式编码的复杂度高,</li>
<li>同步编码的并发性不高,</li>
<li>多线程编程需要线程间同步, 通过lock机制,会影响效率,</li>
</ol>
<p>所以我们就需要采用同步的方式去编写异步的代码,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 我们获取网页信息是耗时操作,我们需要在这里等待</span></span><br><span class="line">    html = get_html(url)<span class="comment"># 所以我们希望在这里能跳出函数,去做一下别的事情,等获取到了数据再回来,</span></span><br><span class="line">    parse_html(html)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_next</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>这样我们也就不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p>
<a id="more"></a>
<p>所以就有了协程</p>
<p>协程，又称微线程,也就是一个可以暂停的函数,等有了结果再切换回去,是我们程序员自己来切换的</p>
<p>那有什么办法能暂停函数,然后再回来呢?</p>
<p>我们想到了生成器,所以我们这里再提一下 生成器</p>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p><code>send</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 这里有一个耗时的请求,需要用另一个函数来处理,并把处理好的结果返回回来</span></span><br><span class="line">    html = <span class="keyword">yield</span> <span class="string">'耗时操作'</span></span><br><span class="line">    print(html)</span><br><span class="line">    <span class="comment"># 这里需要加一个yield,不然会报错StopIteration,所以send也会接收到值</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成生成器</span></span><br><span class="line">gen = get_url()</span><br><span class="line"><span class="comment"># 获取值,模拟另一个函数处理,必须先用一次next来启动生成器</span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># 发送值,处理完后把结果发送回去</span></span><br><span class="line">print(gen.send(<span class="string">'返回结果'</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;耗时操作</span><br><span class="line">&gt;&gt;返回结果</span><br><span class="line">&gt;&gt;<span class="number">123</span></span><br></pre></td></tr></table></figure>
<p><code>yield from</code>:允许发送生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># 可以返回或者说发送一个 生成器</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> gen1()</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g2 = gen2()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> g2:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>
<p>案例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们这样一个数据,我们希望获取一个总数,然后跟一个原来的列表</span></span><br><span class="line">items = &#123;</span><br><span class="line">    <span class="string">'小明'</span>:[<span class="number">94</span>,<span class="number">68</span>,<span class="number">46</span>,<span class="number">66</span>],</span><br><span class="line">    <span class="string">'小红'</span>:[<span class="number">99</span>,<span class="number">33</span>,<span class="number">43</span>,<span class="number">66</span>],</span><br><span class="line">    <span class="string">'小白'</span>:[<span class="number">98</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">66</span>],</span><br><span class="line">    <span class="string">'小黑'</span>:[<span class="number">101</span>,<span class="number">64</span>,<span class="number">46</span>,<span class="number">66</span>],</span><br><span class="line">    <span class="string">'小路'</span>:[<span class="number">93</span>,<span class="number">65</span>,<span class="number">46</span>,<span class="number">66</span>],</span><br><span class="line">    <span class="string">'小兰'</span>:[<span class="number">91</span>,<span class="number">66</span>,<span class="number">46</span>,<span class="number">66</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">result = &#123;</span></span><br><span class="line"><span class="string">            总数</span></span><br><span class="line"><span class="string">    '小明': (274, [94, 68, 46, 66]),</span></span><br><span class="line"><span class="string">    '小红': (241, [99, 33, 43, 66]),</span></span><br><span class="line"><span class="string">    '小白': (255, [98, 45, 46, 66]),</span></span><br><span class="line"><span class="string">    '小黑': (277, [101, 64, 46, 66]),</span></span><br><span class="line"><span class="string">    '小路': (270, [93, 65, 46, 66]),</span></span><br><span class="line"><span class="string">    '小兰': (269, [91, 66, 46, 66])</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">result = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span><span class="params">(key)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获得main函数发送过来的数据</span></span><br><span class="line">        a = <span class="keyword">yield</span></span><br><span class="line">        print(key,<span class="string">'传了一个值过来'</span>,a)</span><br><span class="line">        <span class="comment"># 如果发送过来的是None则退出循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total+=a</span><br><span class="line">        temp.append(a)</span><br><span class="line">    <span class="comment"># 返回一个元组</span></span><br><span class="line">    <span class="keyword">return</span> total,temp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">middle</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        result[key] = <span class="keyword">yield</span> <span class="keyword">from</span> computer(key)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> items.items():</span><br><span class="line">        m=middle(k)</span><br><span class="line">        <span class="comment"># 激活生成器</span></span><br><span class="line">        m.send(<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">            m.send(i)</span><br><span class="line">        <span class="comment">#关闭computer生成器</span></span><br><span class="line">        m.send(<span class="literal">None</span>)</span><br><span class="line">main()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<h2 id="asyncio异步模块"><a href="#asyncio异步模块" class="headerlink" title="asyncio异步模块"></a><code>asyncio</code>异步模块</h2><p><code>asyncio</code>是python 用于解决异步IO变成的一整套方案</p>
<p>实现了:</p>
<ul>
<li>包括各种特定系统实现的模块化的事件循环</li>
<li>传输和协议抽象</li>
<li>对<code>TCP,UDP,SSL</code>,子进程,延时调用,以及其他的具体支持</li>
<li>模块futures模块,但适用于事件循环使用的Future类</li>
<li>基于<code>yield from</code> 的协议和任务.可以让你用顺序的方式编写并发代码</li>
<li>必须使用一个将产生阻塞IO的调用时,有接口可以把这个事件转移到线程池</li>
<li>模仿<code>threading</code>模块中的同步原语,可以用在单线程内的协程之间</li>
</ul>
<p>三个要素:事件循环,回调函数(驱动生成器),以及IO多路复用</p>
<h3 id="简单实用"><a href="#简单实用" class="headerlink" title="简单实用"></a>简单实用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 asyncio中 我们用async 表示这个函数是一个异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'start get html'</span>)</span><br><span class="line">    <span class="comment"># 我们用asyncio.sleep(2) 来模拟一个耗时操作,这里我们不用time.sleep</span></span><br><span class="line">    <span class="comment"># 要记住在异步函数内不能使用同步</span></span><br><span class="line">    <span class="comment"># 需要加上await 来表示这是一个 耗时操作</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'end get html'</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="comment"># 我们创建事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 运行我们的异步程序</span></span><br><span class="line">loop.run_until_complete(get_html(<span class="string">'url'</span>))</span><br><span class="line">print(time.time()-start_time)</span><br><span class="line"></span><br><span class="line">&gt;&gt;start get html</span><br><span class="line">&gt;&gt;end get html</span><br><span class="line">&gt;&gt;<span class="number">2.001361608505249</span></span><br></pre></td></tr></table></figure>
<p>这样看我们并不能感受到异步带来的好处,我们接下来创建100个任务来模拟</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 asyncio中 我们用async 表示这个函数是一个异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'start get html'</span>)</span><br><span class="line">    <span class="comment"># 我们用asyncio.sleep(2) 来模拟一个耗时操作,这里我们不用time.sleep</span></span><br><span class="line">    <span class="comment"># 要记住在异步函数内不能使用同步</span></span><br><span class="line">    <span class="comment"># 需要加上await 来表示这是一个 耗时操作</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'end get html'</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="comment"># 我们创建事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 创建一个100个task任务</span></span><br><span class="line">tasks = [get_html(<span class="string">'url'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 运行我们的异步程序</span></span><br><span class="line"><span class="comment"># 这时需要使用asyncio.gather,也可以用wait 推荐实用gather</span></span><br><span class="line"><span class="comment"># loop.run_until_complete(asyncio.wait(tasks))</span></span><br><span class="line">loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line">print(time.time()-start_time)</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">2.0133612155914307</span></span><br><span class="line">大家可以去运行一下 时间还是<span class="number">2</span>s</span><br></pre></td></tr></table></figure>
<h3 id="取消task"><a href="#取消task" class="headerlink" title="取消task"></a>取消task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel_test</span><span class="params">(sleep_time)</span>:</span></span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sleep_time)</span><br><span class="line">    print(sleep_time)</span><br><span class="line">tasks = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    tasks.append(cancel_test(i+<span class="number">1</span>))</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 返回事件循环所运行的未完成的 Task 对象的集合。</span></span><br><span class="line">    <span class="comment"># asyncio.all_tasks() 实测 3.7.3 不会创建loop 需要传当前loop</span></span><br><span class="line">    <span class="comment"># 如果 loop 为 None，则会使用 get_running_loop() 获取当前事件循环。</span></span><br><span class="line">    <span class="comment"># 可以用asyncio.Task.all_tasks():</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> asyncio.all_tasks(loop):</span><br><span class="line">        print(task.cancel())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>
<h3 id="子协程调度"><a href="#子协程调度" class="headerlink" title="子协程调度"></a>子协程调度</h3><h4 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"Compute %s + %s ..."</span> % (x, y))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行print_sum函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 交给子协程</span></span><br><span class="line">    result = <span class="keyword">await</span> compute(x, y)</span><br><span class="line">    print(<span class="string">"%s + %s = %s"</span> % (x, y, result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 创建task事件</span></span><br><span class="line">task = loop.create_task(print_sum(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 放入事件循环</span></span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>
<p>该图在3.6的官方文档中</p>
<p><img src="/images/%E5%8D%8F%E7%A8%8B/tulip_coro-1593686114663.png" alt="tulip_coro"></p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h4><p><img src="/images/%E5%8D%8F%E7%A8%8B/image-20200702193436174.png" alt="image-20200702193436174"> </p>
<h2 id="线程池结合asyncio"><a href="#线程池结合asyncio" class="headerlink" title="线程池结合asyncio"></a>线程池结合asyncio</h2><p>线程池为什么要跟asyncio 结合呢?</p>
<p>由于协程中不能处理阻塞IO 如mysql库是阻塞的,如果我们需要在协程中强行使用,怎么办?asyncio也可以使用多线程下面我们来模拟一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟阻塞的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'*'</span>*<span class="number">10</span>,url)</span><br><span class="line">    <span class="comment"># 模拟阻塞操作</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 生成一个线程池</span></span><br><span class="line">executor = ThreadPoolExecutor(<span class="number">3</span>)</span><br><span class="line">tasks = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    <span class="comment"># 生成任务,用线程池run_in_executor(线程池,函数,参数)</span></span><br><span class="line">    task = loop.run_in_executor(executor,get_url,url)</span><br><span class="line">    <span class="comment"># 添加任务</span></span><br><span class="line">    tasks.append(task)</span><br><span class="line"><span class="comment"># 调用任务</span></span><br><span class="line">loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line">print(<span class="string">'==='</span>*<span class="number">10</span>,time.time()-start_time)</span><br></pre></td></tr></table></figure>
<p>其实就是将阻塞的函数放到线程池中</p>
<p>建议大家不要在协程中调用阻塞方式,如果非要运行的话,建议使用线程池</p>
<h2 id="future-和-task"><a href="#future-和-task" class="headerlink" title="future 和 task"></a>future 和 task</h2><p><code>future</code>是一个结果容器,用来存放结果</p>
<p><code>task</code>是future的子类,主要用作协程与future的桥梁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, coro, *, loop=None)</span>:</span></span><br><span class="line">    super().__init__(loop=loop)</span><br><span class="line">    <span class="keyword">if</span> self._source_traceback:</span><br><span class="line">        <span class="keyword">del</span> self._source_traceback[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> coroutines.iscoroutine(coro):</span><br><span class="line">        <span class="comment"># raise after Future.__init__(), attrs are required for __del__</span></span><br><span class="line">        <span class="comment"># prevent logging for pending task in __del__</span></span><br><span class="line">        self._log_destroy_pending = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">f"a coroutine was expected, got <span class="subst">&#123;coro!r&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    self._must_cancel = <span class="literal">False</span></span><br><span class="line">    self._fut_waiter = <span class="literal">None</span></span><br><span class="line">    self._coro = coro</span><br><span class="line">    self._context = contextvars.copy_context()</span><br><span class="line">	<span class="comment"># 初始化的时候调用自己的_step方法</span></span><br><span class="line">    self._loop.call_soon(self.__step, context=self._context)</span><br><span class="line">    _register_task(self)</span><br></pre></td></tr></table></figure>
<p><code>__step</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__step</span><span class="params">(self, exc=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.done():</span><br><span class="line">        <span class="keyword">raise</span> futures.InvalidStateError(</span><br><span class="line">            <span class="string">f'_step(): already done: <span class="subst">&#123;self!r&#125;</span>, <span class="subst">&#123;exc!r&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> self._must_cancel:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(exc, futures.CancelledError):</span><br><span class="line">            exc = futures.CancelledError()</span><br><span class="line">        self._must_cancel = <span class="literal">False</span></span><br><span class="line">    coro = self._coro</span><br><span class="line">    self._fut_waiter = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    _enter_task(self._loop, self)</span><br><span class="line">    <span class="comment"># Call either coro.throw(exc) or coro.send(None).</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 第一次请求</span></span><br><span class="line">        <span class="keyword">if</span> exc <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># We use the `send` method directly, because coroutines</span></span><br><span class="line">            <span class="comment"># don't have `__iter__` and `__next__` methods.</span></span><br><span class="line">            <span class="comment"># 激活协程</span></span><br><span class="line">            result = coro.send(<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = coro.throw(exc)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="keyword">if</span> self._must_cancel:</span><br><span class="line">            <span class="comment"># Task is cancelled right before coro stops.</span></span><br><span class="line">            self._must_cancel = <span class="literal">False</span></span><br><span class="line">            super().set_exception(futures.CancelledError())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 处理报错 并获取值</span></span><br><span class="line">            super().set_result(exc.value)</span><br><span class="line">   <span class="comment"># 下面还有很多逻辑,做了很多处理</span></span><br></pre></td></tr></table></figure>
<p>协程还是需要很多底层知识的,还是乖乖去看一下 底层原理</p>
]]></content>
      <categories>
        <category>协程</category>
      </categories>
      <tags>
        <tag>python 协程</tag>
      </tags>
  </entry>
  <entry>
    <title>设置SSH 通过密钥登录</title>
    <url>/2020/05/28/%E8%AE%BE%E7%BD%AESSH-%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="设置-SSH-通过密钥登录"><a href="#设置-SSH-通过密钥登录" class="headerlink" title="设置 SSH 通过密钥登录"></a>设置 SSH 通过密钥登录</h1><p>我们一般使用 xshell 等 SSH 客户端来远程管理 Linux 服务器。但是，一般的密码方式登录，容易有密码被暴力破解的问题。所以，一般我们会将 SSH 的端口设置为默认的 22 以外的端口，或者禁用 root 账户登录。其实，有一个更好的办法来保证安全，而且让你可以放心地用 root 账户从远程登录——那就是通过密钥方式登录。</p>
<p>密钥形式登录的原理是：利用密钥生成器制作一对密钥——一只公钥和一只私钥。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这样一来，没有私钥，任何人都无法通过 SSH 暴力破解你的密码来远程登录到系统。此外，如果将公钥复制到其他账户甚至主机，利用私钥也可以登录。</p>
<a id="more"></a>
<h2 id="制作密钥对"><a href="#制作密钥对" class="headerlink" title="制作密钥对"></a>制作密钥对</h2><p>首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]<span class="comment"># ssh-keygen   # 建立密钥对</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):  <span class="comment"># 按回车</span></span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):  	<span class="comment"># 输入密钥密码或者直接回车</span></span><br><span class="line">Enter same passphrase again: 					<span class="comment"># 再次确认密码</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.  <span class="comment"># 私钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.  <span class="comment"># 公钥</span></span><br><span class="line">The key fingerprint is:</span><br><span class="line">6c:ab:06:cf:d1:c5:22:89:2a:89:91:bf:66:e5:79:8e root@10-7-189-100</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">| .   . . .       |</span></span><br><span class="line"><span class="string">|o   . o.. o      |</span></span><br><span class="line"><span class="string">|.+ .   oSo       |</span></span><br><span class="line"><span class="string">|+ o o ....       |</span></span><br><span class="line"><span class="string">| . + = ..        |</span></span><br><span class="line"><span class="string">|  + o.=.         |</span></span><br><span class="line"><span class="string">| o  E+o          |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="在服务器上安装公钥"><a href="#在服务器上安装公钥" class="headerlink" title="在服务器上安装公钥"></a>在服务器上安装公钥</h2><p>键入以下命令，在服务器上安装公钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 ~]# cd .ssh</span><br><span class="line">[root@10-7-189-100 .ssh]# ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br><span class="line">[root@10-7-189-100 .ssh]# cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<p>如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 .ssh]# chmod 600 authorized_keys </span><br><span class="line">[root@10-7-189-100 .ssh]# chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<h2 id="设置SSH-修改配置文件"><a href="#设置SSH-修改配置文件" class="headerlink" title="设置SSH,修改配置文件"></a>设置SSH,修改配置文件</h2><p>编辑 <code>/etc/ssh/sshd_config</code>文件，进行如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10-7-189-100 .ssh]<span class="comment"># vi /etc/ssh/sshd_config </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到这两个去掉 注释即可</span></span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>
<p>另外，请留意 root 用户能否通过 SSH 登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p>重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host .ssh]$ service sshd restart</span><br></pre></td></tr></table></figure>
<p>最后,当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：<font color='red'>切记一定要可以通过密钥登录了之后再取消密码登录</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LINUX</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云发送短信</title>
    <url>/2020/06/01/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/</url>
    <content><![CDATA[<p>通过手机短信发送验证码，是最普遍、最安全验证用户真实身份的方式。目前，短信验证码广泛应用于用户注册、密码找回、登录保护、身份认证、随机密码、交易确认等应用场景。</p>
<h2 id="为什么是腾讯云短信"><a href="#为什么是腾讯云短信" class="headerlink" title="为什么是腾讯云短信?"></a>为什么是腾讯云短信?</h2><p>因为腾讯云短信注册送200条短信,每个月会送你100条短信,对于我们这样的小破站,或者测试一下功能来说,完全是足够了的.</p>
<a id="more"></a>
<h2 id="注册腾讯云"><a href="#注册腾讯云" class="headerlink" title="注册腾讯云"></a>注册腾讯云</h2><p>注册腾讯云就相当简单了,只需要注册过腾讯相关产品扫描二维码即可.</p>
<h2 id="开通云短信"><a href="#开通云短信" class="headerlink" title="开通云短信"></a>开通云短信</h2><p>腾讯云注册成功之后，登录腾讯云并去开通 云短信服务，开通短信服务后才能发短信。</p>
<p>开通地址：<a href="https://console.cloud.tencent.com/smsv2" target="_blank" rel="noopener">https://console.cloud.tencent.com/smsv2</a></p>
<p>根据流程进行开通之后，就可以进入云短信控制台</p>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>创建应用并将应用中生成的 <code>SDK AppID</code>和 <code>App Key</code> 复制下来，之后通过python发送短信时需要用到。</p>
<p><img src="/images/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/image-20200601230018859.png" alt=""></p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>点击控制台→在云产品中搜索短信即可找到短信相关,</p>
<p>想要发送短信需要创建两个东西</p>
<h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p><img src="/images/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/image-20200601223424296.png" alt=""></p>
<p>这里类型可以选四种</p>
<ul>
<li>网站<ul>
<li>需要网站备案的后台截图,可惜我没有,pass</li>
</ul>
</li>
<li>app<ul>
<li>需要应用后台管理截图,我也没有,pass</li>
</ul>
</li>
<li>小程序<ul>
<li>需要小程序设置页面的截图,这个我有,可以.但是我请求了没有通过.</li>
</ul>
</li>
<li>公众号<ul>
<li>需要公众号设置页面截图,这个我也有,这个我申请了,审核通过了.(所以推荐公众号)</li>
</ul>
</li>
</ul>
<h3 id="正文模板"><a href="#正文模板" class="headerlink" title="正文模板"></a>正文模板</h3><p>是你需要发送短信的模板,当然可以自己编辑,也可以使用腾讯提供的</p>
<p><img src="/images/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/image-20200601224211866.png" alt=""></p>
<p>创建完这些后就可以发送短信了.</p>
<h3 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h3><p>发送短信的SDK有两个,3.0跟2.0</p>
<h4 id="SDK3-0"><a href="#SDK3-0" class="headerlink" title="SDK3.0"></a>SDK3.0</h4><p>这个sdk是用类来实现的</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install tencentcloud-sdk-python</span><br></pre></td></tr></table></figure>
<h5 id="发送短信-1"><a href="#发送短信-1" class="headerlink" title="发送短信"></a>发送短信</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> tencentcloud.common <span class="keyword">import</span> credential</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class="keyword">import</span> TencentCloudSDKException</span><br><span class="line"><span class="comment"># 导入 SMS 模块的client models</span></span><br><span class="line"><span class="keyword">from</span> tencentcloud.sms.v20190711 <span class="keyword">import</span> sms_client, models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入可选配置类</span></span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.client_profile <span class="keyword">import</span> ClientProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.http_profile <span class="keyword">import</span> HttpProfile</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 必要步骤：</span></span><br><span class="line">    <span class="comment"># 实例化一个认证对象，入参需要传入腾讯云账户密钥对 secretId 和 secretKey</span></span><br><span class="line">    <span class="comment"># 本示例采用从环境变量读取的方式，需要预先在环境变量中设置这两个值</span></span><br><span class="line">    <span class="comment"># 您也可以直接在代码中写入密钥对，但需谨防泄露，不要将代码复制、上传或者分享给他人</span></span><br><span class="line">    <span class="comment"># CAM 密钥查询：https://console.cloud.tencent.com/cam/capi</span></span><br><span class="line"></span><br><span class="line">    cred = credential.Credential(<span class="string">"secretId"</span>, <span class="string">"secretKey"</span>)</span><br><span class="line">    <span class="comment"># cred = credential.Credential(</span></span><br><span class="line">    <span class="comment">#     os.environ.get(""),</span></span><br><span class="line">    <span class="comment">#     os.environ.get("")</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个 http 选项，可选，无特殊需求时可以跳过</span></span><br><span class="line">    httpProfile = HttpProfile()</span><br><span class="line">    httpProfile.reqMethod = <span class="string">"POST"</span>  <span class="comment"># POST 请求（默认为 POST 请求）</span></span><br><span class="line">    httpProfile.reqTimeout = <span class="number">30</span>    <span class="comment"># 请求超时时间，单位为秒（默认60秒）</span></span><br><span class="line">    httpProfile.endpoint = <span class="string">"sms.tencentcloudapi.com"</span>  <span class="comment"># 指定接入地域域名（默认就近接入）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 非必要步骤:</span></span><br><span class="line">    <span class="comment"># 实例化一个客户端配置对象，可以指定超时时间等配置</span></span><br><span class="line">    clientProfile = ClientProfile()</span><br><span class="line">    clientProfile.signMethod = <span class="string">"TC3-HMAC-SHA256"</span>  <span class="comment"># 指定签名算法</span></span><br><span class="line">    clientProfile.language = <span class="string">"en-US"</span></span><br><span class="line">    clientProfile.httpProfile = httpProfile</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化 SMS 的 client 对象</span></span><br><span class="line">    <span class="comment"># 第二个参数是地域信息，可以直接填写字符串 ap-guangzhou，或者引用预设的常量</span></span><br><span class="line">    client = sms_client.SmsClient(cred, <span class="string">"ap-guangzhou"</span>, clientProfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个请求对象，根据调用的接口和实际情况，可以进一步设置请求参数</span></span><br><span class="line">    <span class="comment"># 您可以直接查询 SDK 源码确定 SendSmsRequest 有哪些属性可以设置</span></span><br><span class="line">    <span class="comment"># 属性可能是基本类型，也可能引用了另一个数据结构</span></span><br><span class="line">    <span class="comment"># 推荐使用 IDE 进行开发，可以方便的跳转查阅各个接口和数据结构的文档说明</span></span><br><span class="line">    req = models.SendSmsRequest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基本类型的设置:</span></span><br><span class="line">    <span class="comment"># SDK 采用的是指针风格指定参数，即使对于基本类型也需要用指针来对参数赋值</span></span><br><span class="line">    <span class="comment"># SDK 提供对基本类型的指针引用封装函数</span></span><br><span class="line">    <span class="comment"># 帮助链接：</span></span><br><span class="line">    <span class="comment"># 短信控制台：https://console.cloud.tencent.com/smsv2</span></span><br><span class="line">    <span class="comment"># sms helper：https://cloud.tencent.com/document/product/382/3773</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 短信应用 ID: 在 [短信控制台] 添加应用后生成的实际 SDKAppID，例如1400006666</span></span><br><span class="line">    req.SmsSdkAppid = <span class="string">"1400787878"</span></span><br><span class="line">    <span class="comment"># 短信签名内容: 使用 UTF-8 编码，必须填写已审核通过的签名，可登录 [短信控制台] 查看签名信息</span></span><br><span class="line">    req.Sign = <span class="string">"xxx"</span></span><br><span class="line">    <span class="comment"># 短信码号扩展号: 默认未开通，如需开通请联系 [sms helper]</span></span><br><span class="line">    req.ExtendCode = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 用户的 session 内容: 可以携带用户侧 ID 等上下文信息，server 会原样返回</span></span><br><span class="line">    req.SessionContext = <span class="string">"xxx"</span></span><br><span class="line">    <span class="comment"># 国际/港澳台短信 senderid: 国内短信填空，默认未开通，如需开通请联系 [sms helper]</span></span><br><span class="line">    req.SenderId = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 下发手机号码，采用 e.164 标准，+[国家或地区码][手机号]</span></span><br><span class="line">    <span class="comment"># 例如+8613711112222， 其中前面有一个+号 ，86为国家码，13711112222为手机号，最多不要超过200个手机号</span></span><br><span class="line">    req.PhoneNumberSet = [<span class="string">"+8613711112222"</span>, <span class="string">"+8613711333222"</span>, <span class="string">"+8613711144422"</span>]</span><br><span class="line">    <span class="comment"># 模板 ID: 必须填写已审核通过的模板 ID，可登录 [短信控制台] 查看模板 ID</span></span><br><span class="line">    req.TemplateID = <span class="string">"449739"</span></span><br><span class="line">    <span class="comment"># 模板参数: 若无模板参数，则设置为空</span></span><br><span class="line">    req.TemplateParamSet = [<span class="string">"666"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过 client 对象调用 SendSms 方法发起请求。注意请求方法名与请求对象是对应的</span></span><br><span class="line">    resp = client.SendSms(req)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出 JSON 格式的字符串回包</span></span><br><span class="line">    print(resp.to_json_string(indent=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> TencentCloudSDKException <span class="keyword">as</span> err:</span><br><span class="line">    print(err)</span><br></pre></td></tr></table></figure>
<h4 id="SDK2-0"><a href="#SDK2-0" class="headerlink" title="SDK2.0"></a>SDK2.0</h4><p>相比于前面的3.0 这个用方法实现的就比较简单了.</p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install qcloudsms_py</span><br></pre></td></tr></table></figure>
<h5 id="必要参数"><a href="#必要参数" class="headerlink" title="必要参数"></a>必要参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 短信应用 SDK AppID</span></span><br><span class="line">appid = <span class="number">1400009099</span>  <span class="comment"># SDK AppID 以1400开头</span></span><br><span class="line"><span class="comment"># 短信应用 SDK AppKey</span></span><br><span class="line">appkey = <span class="string">"9ff91d87c2cd7cd0ea762f141975d1df37481d48700d70ac37470aefc60f9bad"</span></span><br><span class="line"><span class="comment"># 需要发送短信的手机号码</span></span><br><span class="line">phone_numbers = [<span class="string">"21212313123"</span>, <span class="string">"12345678902"</span>, <span class="string">"12345678903"</span>]</span><br><span class="line"><span class="comment"># 短信模板ID，需要在短信控制台中申请</span></span><br><span class="line">template_id = <span class="number">7839</span>  <span class="comment"># <span class="doctag">NOTE:</span> 这里的模板 ID`7839`只是示例，真实的模板 ID 需要在短信控制台中申请</span></span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">sms_sign = <span class="string">"腾讯云"</span>  <span class="comment"># <span class="doctag">NOTE:</span> 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名"腾讯云"只是示例，真实的签名需要在短信控制台中申请</span></span><br></pre></td></tr></table></figure>
<h5 id="指定模板-ID-单发短信"><a href="#指定模板-ID-单发短信" class="headerlink" title="指定模板 ID 单发短信"></a>指定模板 ID 单发短信</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsSingleSender</span><br><span class="line"><span class="keyword">from</span> qcloudsms_py.httpclient <span class="keyword">import</span> HTTPError</span><br><span class="line">ssender = SmsSingleSender(appid, appkey)</span><br><span class="line">params = [<span class="string">"5678"</span>]  <span class="comment"># 当模板没有参数时，`params = []` 当模板中有两个参数时,需要传两参数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  result = ssender.send_with_param(<span class="number">86</span>, phone_numbers[<span class="number">0</span>],</span><br><span class="line">      template_id, params, sign=sms_sign, extend=<span class="string">""</span>, ext=<span class="string">""</span>) </span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">  print(e)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>具体实现可查官方文档   :<a href="https://cloud.tencent.com/document/product/382/11672" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/382/11672</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>send_sms</tag>
      </tags>
  </entry>
  <entry>
    <title>魔方PLL公式</title>
    <url>/2021/03/29/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="顶层排列（PLL）"><a href="#顶层排列（PLL）" class="headerlink" title="顶层排列（PLL）"></a>顶层排列（PLL）</h1><p>PLL 是魔方恢复的最后一个步骤，PLL 共有 (4！X 4！)/2种组合，排除相同情形（经过旋转），共有21种不同的图形，不含镜像的话为13种。</p>
<p><strong>所有打乱公式都是黄底绿前</strong></p>
<p>字母对应表：</p>
<p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/image-20210402212818862.png" alt="image-20210402212818862"></p>
<a id="more"></a>
<h2 id="三角换："><a href="#三角换：" class="headerlink" title="三角换："></a>三角换：</h2><h3 id="顺时针-Aa"><a href="#顺时针-Aa" class="headerlink" title="顺时针(Aa):"></a>顺时针(Aa):</h3><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_04a.png" alt="pll 04" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x R U’ R D2’ R’ U R D2’ R2’ x</strong></p>
<p>公式：</p>
<ol>
<li><strong>x’ R2 D2 R’ U’ R D2 R’ U R’</strong> </li>
<li><strong>y’ x R’ U R’ D2 R U’ R’ D2 R2</strong></li>
<li><strong>y2 R U R’ F’ r U R’ U’ r’ F R2 U’ R’</strong></li>
</ol>
<h3 id="逆时针-Ab"><a href="#逆时针-Ab" class="headerlink" title="逆时针(Ab):"></a>逆时针(Ab):</h3><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_03.png" alt="pll 03" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 y’ x R’ U R’ D2’ R U’ R’ D2’ R2’ x’ y</strong></p>
<p>公式：</p>
<ol>
<li><strong>x’ R U’ R D2 R’ U R D2 R2</strong></li>
<li><strong>y’ x R2 D2 R U R’ D2 R U’ R</strong></li>
</ol>
<h2 id="对角换（E）："><a href="#对角换（E）：" class="headerlink" title="对角换（E）："></a>对角换（E）：</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_07a.png" alt="pll 07" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x U’ R U L’ U’ R’ U r2 U R’ U’ L’ U R U’ x’</strong></p>
<p>公式：</p>
<ol>
<li><p><strong>y x’ R U’ R’ D R U R’ D’ R U R’ D R U’ R’ D’</strong></p>
</li>
<li><p><strong>R2 U R’ U’ y R U R’ U’ R U R’ U’ R U R’ y’ R U’ R2</strong></p>
</li>
<li><p><strong>x U R’ U’ L U R U’ r2’ U’ R U L U’ R’ U</strong></p>
</li>
</ol>
<h2 id="邻角对棱互换（F）："><a href="#邻角对棱互换（F）：" class="headerlink" title="邻角对棱互换（F）："></a>邻角对棱互换（F）：</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_10a.png" alt="pll 10" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 R’ U’ R U’ R’ U R U R2’ F’ R U R U’ R’ F U R</strong></p>
<p>公式：</p>
<ol>
<li><strong>R’ U’ F’ R U R’ U’ R’ F R2 U’ R’ U’ R U R’ U R</strong></li>
<li><strong>y R’ U2 R’ U’ y R’ F’ R2 U’ R’ U R’ F R U’ F</strong></li>
</ol>
<h2 id="三角换-三棱换-Ga"><a href="#三角换-三棱换-Ga" class="headerlink" title="三角换+三棱换(Ga):"></a>三角换+三棱换(Ga):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_19b.png" alt="pll 19" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 y’ R’ U’ R y R2’ u R’ U R U’ R u’ R2’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R2 u R’ U R’ U’ R u’ R2 y’ R’ U R</strong></li>
<li><strong>R2 U R’ U R’ U’ R U’ R2 D U’ R’ U R D’ U</strong></li>
<li><strong>R2 u R’ U R’ U’ R D’ F2 L’ U L</strong></li>
</ol>
<h2 id="三角换-三棱换-Gb"><a href="#三角换-三棱换-Gb" class="headerlink" title="三角换+三棱换(Gb):"></a>三角换+三棱换(Gb):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_18c.png" alt="pll 18" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 y R2’ u R’ U R’ U’ R u’ R2’ y’ R’ U R</strong></p>
<p>公式：</p>
<ol>
<li><strong>R’ U’ R y R2 u R’ U R U’ R u’ R2</strong></li>
<li><strong>y F’ U’ F R2 u R’ U R U’ R u’ R2</strong></li>
</ol>
<h2 id="三角换-三棱换-Gc"><a href="#三角换-三棱换-Gc" class="headerlink" title="三角换+三棱换(Gc):"></a>三角换+三棱换(Gc):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_17b.png" alt="pll 17" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 y R U R’ y’ R2 u’ R U’ R’ U R’ u R2</strong></p>
<p>公式：</p>
<ol>
<li><strong>R2 u’ R U’ R U R’ u R2 y R U’ R’</strong></li>
<li><strong>y2 R2 F2 R U2 R U2 R’ F R U R’ U’ R’ F R2</strong></li>
</ol>
<h2 id="三角换-三棱换-Gd"><a href="#三角换-三棱换-Gd" class="headerlink" title="三角换+三棱换(Gd):"></a>三角换+三棱换(Gd):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_16c.png" alt="pll 16" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 y’ R2’ u’ R U’ R U R’ u R2’ y R U’ R’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R U R’ y’ R2 u’ R U’ R’ U R’ u R2</strong></li>
<li><strong>R U R’ U’ D R2 U’ R U’ R’ U R’ U R2 U D’</strong></li>
</ol>
<h2 id="对棱互换-H"><a href="#对棱互换-H" class="headerlink" title="对棱互换(H):"></a>对棱互换(H):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_06.png" alt="pll 06" style="zoom:80%;" /></p>
<p>打乱公式：<strong>M2 U’ M2 U2 M2 U’ M2</strong></p>
<p>公式：</p>
<ol>
<li><strong>M2 U’ M2 U2 M2 U’ M2</strong></li>
<li><strong>R2 U2 R2 U2 R2 U’ R2 U2 R2 U2 R2 U</strong></li>
<li><strong>R2’ U2’ R U2 R2’ U2’ R2 U2’ R U2’ R2’</strong></li>
</ol>
<h2 id="邻角-邻棱-Ja"><a href="#邻角-邻棱-Ja" class="headerlink" title="邻角+邻棱(Ja):"></a>邻角+邻棱(Ja):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_14a.png" alt="pll 14" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 L U’ R’ U L’ U2’ R U’ R’ U2’ R</strong></p>
<p>公式：</p>
<ol>
<li><strong>x R2 F R F’ R U2 r’ U r U2</strong></li>
<li><strong>R’ U2 R U R’ U2 L U’ R U L’</strong></li>
<li><strong>y’ x’ R2 u’ R’ u R2 x’ y’ R’ U R’ U’ R2</strong></li>
<li><strong>y2 z R’ U’ R D’ R2’ U R’ U’ R2 U D</strong></li>
<li><strong>x U2 r’ U’ r U2 l’ U R’ U’ l2</strong></li>
</ol>
<h2 id="邻角-邻棱-Jb"><a href="#邻角-邻棱-Jb" class="headerlink" title="邻角+邻棱(Jb):"></a>邻角+邻棱(Jb):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_13a.png" alt="pll 12" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 U R U R2’ F’ R U R U’ R’ F R U’ R’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R U R’ F’ R U R’ U’ R’ F R2 U’ R’ U’</strong></li>
<li><strong>R U2 R’ U’ R U2 L’ U R’ U’ L</strong></li>
<li><strong>y2 R’ U2’ R U R’ F’ R U R’ U’ R’ F R2 U’ R’ U R</strong></li>
</ol>
<h2 id="对角对棱-Na"><a href="#对角对棱-Na" class="headerlink" title="对角对棱(Na):"></a>对角对棱(Na):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_21a.png" alt="pll 21" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 R U R’ U R U R’ F’ R U R’ U’ R’ F R2 U’ R’ U2 R U’ R’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R U R’ U R U R’ F’ R U R’ U’ R’ F R2 U’ R’ U2 R U’ R’</strong></li>
<li><strong>L U’ R U2 L’ U R’ L U’ R U2 L’ U R’ U’</strong></li>
</ol>
<h2 id="对角对棱-Nb"><a href="#对角对棱-Nb" class="headerlink" title="对角对棱(Nb):"></a>对角对棱(Nb):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_20.png" alt="pll 20" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 R’ U R’ F R F’ R U’ R’ F’ U F R U R’ U’ R</strong></p>
<p>公式：</p>
<ol>
<li><strong>R’ U R U’ R’ F’ U’ F R U R’ F R’ F’ R U’ R</strong></li>
<li><strong>R’ U L’ U2 R U’ L R’ U L’ U2 R U’ L U</strong></li>
<li><strong>R’ U R U’ R’ F’ U’ F R U R’ U’ R U’ f R f’</strong></li>
</ol>
<h2 id="邻角-邻棱-Ra"><a href="#邻角-邻棱-Ra" class="headerlink" title="邻角+邻棱(Ra):"></a>邻角+邻棱(Ra):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_12b.png" alt="pll 12" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 U’ R2’ B’ R’ U’ R’ U R B R’ U2’ R U2’ R’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R U2 R’ U2 R B’ R’ U’ R U R B R2 U</strong></li>
<li><strong>y’ R U’ R’ U’ R U R D R’ U’ R D’ R’ U2 R’ U’</strong></li>
<li><strong>y’ U R U2 R’ U2 R B’ R’ U’ R U R B R2</strong></li>
<li><strong>R U2 R’ U2 l U’ l’ U’ R U l U R2 F</strong></li>
</ol>
<h2 id="邻角-邻棱-Rb"><a href="#邻角-邻棱-Rb" class="headerlink" title="邻角+邻棱(Rb):"></a>邻角+邻棱(Rb):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_11b.png" alt="pll 11" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 R’ U R U R’ U’ R’ D’ R U R’ D R U2’ R U</strong></p>
<p>公式：</p>
<ol>
<li><strong>y’ R’ U2 R U2 R’ F R U R’ U’ R’ F’ R2 U’</strong></li>
<li><strong>R’ U R U R’ U’ R’ D’ R U R’ D R U2’ R U</strong></li>
</ol>
<h2 id="对棱-邻角-T-："><a href="#对棱-邻角-T-：" class="headerlink" title="对棱+邻角(T)："></a>对棱+邻角(T)：</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_08.png" alt="pll 08" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 F R U’ R’ U R U R2’ F’ R U R U’ R’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R U R’ U’ R’ F R2 U’ R’ U’ R U R’ F’</strong></li>
<li><strong>R2 U R2 U’ R2’ U’ D R2 U’ R2’ U R2 D’</strong></li>
</ol>
<h2 id="三棱换："><a href="#三棱换：" class="headerlink" title="三棱换："></a>三棱换：</h2><h3 id="逆时针-Ua"><a href="#逆时针-Ua" class="headerlink" title="逆时针(Ua):"></a>逆时针(Ua):</h3><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_02.png" alt="img" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 R2’ U R U R’ U’ R’ U’ R’ U R’</strong></p>
<p>公式：</p>
<ol>
<li><strong>R U’ R U R U R U’ R’ U’ R2</strong></li>
<li><strong>y2 R2 U’ R’ U’ R U R U R U’ R</strong></li>
<li><strong>y’ F U R U’ R’ F’ B’ R’ U’ R U B</strong></li>
<li><strong>U2 R U R’ U R’ U’ R2 U’ R’ U R’ U R</strong></li>
<li><strong>L U2 L U L U L U’ L’ U’ L’ U L’</strong></li>
<li><strong>y2 z U R’ U R U R U R’ U’ R’ U2</strong></li>
<li><strong>z’ U L’ U L U L U L’ U’ L’ U2</strong></li>
</ol>
<h3 id="顺时针-Ub"><a href="#顺时针-Ub" class="headerlink" title="顺时针(Ub):"></a>顺时针(Ub):</h3><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_01.png" alt="img" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 R U’ R U R U R U’ R’ U’ R2</strong></p>
<p>公式：</p>
<ol>
<li><strong>R2 U R U R’ U’ R’ U’ R’ U R’</strong></li>
<li><strong>M2 U’ M U2 M’ U’ M2</strong></li>
<li><strong>y’ B’ U’ R’ U R B F R U R’ U’ F’</strong></li>
<li><strong>y2 R’ U R’ U’ R’ U’ R’ U R U R2’</strong></li>
<li><strong>R’ U2 R’ U’ R’ U’ R’ U R U R U’ R</strong></li>
<li><strong>z U’ R U’ R’ U’ R’ U’ R U R U2</strong></li>
<li><strong>y2 z’ U’ L U’ L’ U’ L’ U’ L U L U2</strong></li>
</ol>
<h2 id="邻棱-对角-V"><a href="#邻棱-对角-V" class="headerlink" title="邻棱+对角(V):"></a>邻棱+对角(V):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_09a.png" alt="pll 09" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 F’ R’ F’ R U’ R U R2’ F R d R U’ R</strong></p>
<p>公式：</p>
<ol>
<li><strong>R’ U R’ d’ R’ F’ R2 U’ R’ U R’ F R F</strong></li>
<li><strong>y L’ U R U’ L U L’ U R’ U’ L U2 R U2 R’</strong></li>
<li><strong>R’ U R’ U’ R D’ R’ D R’ U D’ R2 U’ R2 D R2</strong></li>
</ol>
<h2 id="邻棱-对角-Y"><a href="#邻棱-对角-Y" class="headerlink" title="邻棱+对角(Y):"></a>邻棱+对角(Y):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_15a.png" alt="pll 15" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 F R’ F’ R U R U’ R’ F R U’ R’ U R U R’ F’</strong></p>
<p>公式：</p>
<ol>
<li><strong>F R U’ R’ U’ R U R’ F’ R U R’ U’ R’ F R F’</strong></li>
<li><strong>F R’ F’ R U R U’ R’ F R U’ R’ U R U R’ F’</strong></li>
</ol>
<h2 id="邻棱互换-Z"><a href="#邻棱互换-Z" class="headerlink" title="邻棱互换(Z):"></a>邻棱互换(Z):</h2><p><img src="/images/%E9%AD%94%E6%96%B9PLL%E5%85%AC%E5%BC%8F/pllc_05a.png" alt="pll 05" style="zoom:80%;" /></p>
<p>打乱公式：<strong>x2 U2’ M U2’ M2’ U2’ M U M2’ U M2’</strong></p>
<p>公式：</p>
<ol>
<li><strong>M2 U’ M2 U’ M’ U2 M2 U2 M’ U2</strong></li>
<li><strong>R’ U’ R U’ R U R U’ R’ U R U R2 U’ R’ U2</strong></li>
<li><strong>M2 U M U2 M2 U2 M U’ M2</strong></li>
<li><strong>y x’ R U’ R’ U D R’ U’ D R’ U R u2’ B</strong></li>
<li><strong>U2 R’ U’ R U’ R U R U’ R’ U R U R2 U’ R’</strong></li>
</ol>
<p>以上就是21种PLL 公式，大家勤加练习，变成肌肉记忆。</p>
<p>以上所有都出自 <a href="https://maru.tw/solve-cube/algorithm" target="_blank" rel="noopener">小丸号方块屋</a> 如有不便可以通过github联系我删除</p>
]]></content>
      <categories>
        <category>CFOP</category>
      </categories>
      <tags>
        <tag>魔方，CFOP公式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux gcc.sh 10字母病毒删除</title>
    <url>/2021/04/20/Linux-gcc.sh-10%E5%AD%97%E6%AF%8D%E7%97%85%E6%AF%92/</url>
    <content><![CDATA[<p>最近自己的服务器常常连不上，很卡。top查看了一下有个一个奇怪的指令，占据了百分之99的CPU，kill掉之后又会产生一个新的，</p>
<p><img src="/images/Linux-gcc.sh-10%E5%AD%97%E6%AF%8D%E7%97%85%E6%AF%92/123.png" alt="123"></p>
<a id="more"></a>
<h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>用    <code>chkconfig --list</code> 查看服务</p>
<p><img src="/images/Linux-gcc.sh-10%E5%AD%97%E6%AF%8D%E7%97%85%E6%AF%92/image-20210420221016775.png" alt="image-20210420221016775"></p>
<p>有很多自启动的10个字母的服务，全部杀掉后，重启后还是会存在。</p>
<p>所以查看<code>crontab</code>日志</p>
<p><img src="/images/Linux-gcc.sh-10%E5%AD%97%E6%AF%8D%E7%97%85%E6%AF%92/image-20210420223734914.png" alt="image-20210420223734914"></p>
<p>发现每隔三分钟都会执行一下这个脚本。</p>
<p>修改<code>etc/crontab</code>配置文件，删除 <code>*/3 * * * * root /etc/cron.hourly/cron.sh</code> 这行，然后删除脚本。发现还是不行，然后查阅资料得知需要先暂停进程后再进行处理，具体步骤如下</p>
<h2 id="删除10字母病毒流程"><a href="#删除10字母病毒流程" class="headerlink" title="删除10字母病毒流程"></a>删除10字母病毒流程</h2><p>用<code>top</code>命令查看进程ID ，如id为 827，不要直接杀掉进程，否则会生成新的进程，停止这个进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -stop 827</span><br></pre></td></tr></table></figure>
<p>停止<code>crond</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop crond</span><br></pre></td></tr></table></figure>
<p>删除<code>/etc/init.d</code>下的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f 所有奇怪的文件</span><br></pre></td></tr></table></figure>
<p>删除 <code>/usr/bin</code> 下的可疑文件。当然你也可以用<code>ls -lt /usr/bin | head</code> 查看最近变动的文件，如果是病毒也一起删除，其他可疑的其他可疑目录也一样。</p>
<p>现在杀掉病毒进程，就不会重新生成了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 827</span><br></pre></td></tr></table></figure>
<p>删除病毒</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /lib/libudev.so</span><br></pre></td></tr></table></figure>
<p>最后别忘了删除<code>etc/crontab</code>配置文件下的<code>*/3 * * * * root /etc/cron.hourly/cron.sh</code>这行 和 <code>/etc/cron.hourly/gcc.sh</code> 的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /etc/cron.hourly/gcc.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql8.0 主从复制</title>
    <url>/2021/04/21/mysql8.0-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>1.传统方式：<br>基于主库的bin-log将日志事件和事件位置复制到从库，从库再加以应用来达到主从同步的目的。</p>
<p>2.Gtid方式（MySQL&gt;=5.7推荐使用）：<br>基于GTID的复制中，从库会告知主库已经执行的事务的GTID的值，然后主库会将所有未执行的事务的GTID的列表返回给从库，并且可以保证同一个事务只在指定的从库执行一次。</p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>在做主从同步时，如果从机需要主机上原有数据，就要先复制一份到从机。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 收集主机原有数据</span></span><br><span class="line">$ mysqldump -uroot -pmysql --all-databases --lock-all-tables &gt; ~/master_db.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从机复制主机原有数据</span></span><br><span class="line">$ mysql -uroot -p123456 -h127.0.0.1 --port=3306 &lt; ~/master_db.sql</span><br></pre></td></tr></table></figure>
<ul>
<li>别忘了开启3306端口,不然会连不上</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos7以上</span></span><br><span class="line">firewall-cmd --add-port=3306/tcp --permanen <span class="comment"># success 表示成功</span></span><br><span class="line"><span class="comment"># 重新载入配置  </span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><h3 id="master配置"><a href="#master配置" class="headerlink" title="master配置"></a>master配置</h3><h4 id="修改master配置文件"><a href="#修改master配置文件" class="headerlink" title="修改master配置文件"></a>修改master配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##主从数据库配置核心部分</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置同步的binary <span class="built_in">log</span>二进制日志文件名前缀，默认为binlog</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器唯一id，默认为1  主数据库和从数据库的server-id不能重复</span></span><br><span class="line">server-id=1          </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##可选配置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要主从复制的数据库</span></span><br><span class="line">binlog-do-db=test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主从复制的格式（mixed,statement,row，默认格式是statement。建议是设置为row，主从复制时数据更加能够统一）</span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置二进制日志自动删除/过期的天数，避免占用磁盘空间。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>
<h4 id="创建一个用户，用来同步（也可以是root）"><a href="#创建一个用户，用来同步（也可以是root）" class="headerlink" title="创建一个用户，用来同步（也可以是root）"></a>创建一个用户，用来同步（也可以是root）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user 'repl'@'%' identified by '123456'</span><br></pre></td></tr></table></figure>
<h4 id="修改用户权限"><a href="#修改用户权限" class="headerlink" title="修改用户权限"></a>修改用户权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to 'repl'@'%'</span><br></pre></td></tr></table></figure>
<h4 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges</span><br></pre></td></tr></table></figure>
<h4 id="查看日志以及位置"><a href="#查看日志以及位置" class="headerlink" title="查看日志以及位置"></a>查看日志以及位置</h4><p>接着执行命令查看并记下binary log二进制日志文件名 File 以及位置 Position的值，需要在从数据库用到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure>
<p><img src="/images/mysql8.0-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421200137174.png" alt="image-20210421200137174"></p>
<h3 id="slave配置"><a href="#slave配置" class="headerlink" title="slave配置"></a>slave配置</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##主从数据库配置核心部分</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置同步的binary <span class="built_in">log</span>二进制日志文件名前缀，默认是binlog</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器唯一ID  主数据库和从数据库的server-id不能重复</span></span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##可选配置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要主从复制的数据库 </span></span><br><span class="line">replicate-do-db=test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步） </span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存 </span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主从复制的格式（mixed,statement,row，默认格式是statement。建议是设置为row，主从复制时数据更加能够统一） </span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置二进制日志自动删除/过期的天数，避免占用磁盘空间。默认值为0，表示不自动删除。 </span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 </span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"><span class="meta">#</span><span class="bash"> relay_log配置中继日志，默认采用 主机名-relay-bin 的方式保存日志文件 </span></span><br><span class="line">relay_log=replicas-mysql-relay-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class="line">log_slave_updates=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 防止改变数据(只读操作，除了特殊的线程)</span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure>
<h4 id="与master建立联系"><a href="#与master建立联系" class="headerlink" title="与master建立联系"></a>与master建立联系</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to MASTER_HOST='master_ip',MASTER_PORT=master_port,MASTER_USER='repl',MASTER_PASSWORD='123456',MASTER_LOG_FILE='mysql-bin.000001',MASTER_LOG_POS=116990;</span><br></pre></td></tr></table></figure>
<ul>
<li>MASTER_HOST：主数据库的主机ip</li>
<li>MASTER_PORT：主数据库的端口，不设置则默认是3306</li>
<li>MASTER_USER：主数据库被授予同步复制权限的用户名</li>
<li>MASTER_PASSWORD：对应的用户密码</li>
<li>MASTER_LOG_FILE：在主数据库执行命令<code>show master status</code> 查询到的二进制日志文件名称</li>
<li>MASTER_LOG_POS：在主数据库执行命令<code>show master status</code> 查询到的位置 Position的值</li>
</ul>
<h4 id="开启主从复制工作"><a href="#开启主从复制工作" class="headerlink" title="开启主从复制工作"></a>开启主从复制工作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave</span><br></pre></td></tr></table></figure>
<h4 id="查看详细信息"><a href="#查看详细信息" class="headerlink" title="查看详细信息"></a>查看详细信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status \G</span><br></pre></td></tr></table></figure>
<p><img src="/images/mysql8.0-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421201109852.png" alt="image-20210421201109852"></p>
<p>假如显示 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 为 <code>Yes</code> ，以及<code>Slave_IO_State</code> 为 <code>Waiting for master to send event</code>，则证明主从复制成功！</p>
<h4 id="停止主从复制"><a href="#停止主从复制" class="headerlink" title="停止主从复制"></a>停止主从复制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave</span><br></pre></td></tr></table></figure>
<h2 id="基于全局事务标识符（GTID）的方法"><a href="#基于全局事务标识符（GTID）的方法" class="headerlink" title="基于全局事务标识符（GTID）的方法"></a>基于全局事务标识符（GTID）的方法</h2><h3 id="master配置-1"><a href="#master配置-1" class="headerlink" title="master配置"></a>master配置</h3><h4 id="修改master-配置文件"><a href="#修改master-配置文件" class="headerlink" title="修改master 配置文件"></a>修改master 配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###主从数据库配置核心部分</span><br><span class="line"># 设置同步的binary log二进制日志文件名前缀，默认为binlog</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line"># 服务器唯一id，默认为1  主数据库和从数据库的server-id不能重复</span><br><span class="line">server-id&#x3D;1     </span><br><span class="line">     </span><br><span class="line">#开启 GTID</span><br><span class="line">gtid_mode&#x3D;on</span><br><span class="line">enforce_gtid_consistency&#x3D;true</span><br></pre></td></tr></table></figure>
<h4 id="创建同步用户-与上面一样"><a href="#创建同步用户-与上面一样" class="headerlink" title="创建同步用户(与上面一样)"></a>创建同步用户(与上面一样)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user 'repl'@'%' identified by '123456'</span><br></pre></td></tr></table></figure>
<h4 id="授权用户"><a href="#授权用户" class="headerlink" title="授权用户"></a>授权用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to 'repl'@'%'</span><br></pre></td></tr></table></figure>
<h4 id="刷新权限-1"><a href="#刷新权限-1" class="headerlink" title="刷新权限"></a>刷新权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges</span><br></pre></td></tr></table></figure>
<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show master status \G</span><br></pre></td></tr></table></figure>
<p><img src="/images/mysql8.0-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421201724219.png" alt="image-20210421201724219"></p>
<p>对比发现与基于二进制日志文件的方法不同的是<code>Executed_Gtid_Set</code>会有一个具体的全局事务id值</p>
<h3 id="slave配置-1"><a href="#slave配置-1" class="headerlink" title="slave配置"></a>slave配置</h3><h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##主从数据库配置核心部分</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置同步的binary <span class="built_in">log</span>二进制日志文件名前缀，默认是binlog</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器唯一ID  主数据库和从数据库的server-id不能重复</span></span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开启 GTID</span></span><br><span class="line">gtid_mode=on</span><br><span class="line">enforce_gtid_consistency=true</span><br></pre></td></tr></table></figure>
<h4 id="创建关联"><a href="#创建关联" class="headerlink" title="创建关联"></a>创建关联</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to MASTER_HOST='master_ip',MASTER_PORT=master_port,MASTER_USER='repl',MASTER_PASSWORD='123456',MASTER_AUTO_POSITION=1;</span><br></pre></td></tr></table></figure>
<h4 id="查看状态-1"><a href="#查看状态-1" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status</span><br></pre></td></tr></table></figure>
<p><img src="/images/mysql8.0-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421202116234.png" alt="image-20210421202116234"></p>
<p>假如显示 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 为 <code>Yes</code> ，以及<code>Slave_IO_State</code> 为 <code>Waiting for master to send event</code>，则证明主从复制成功！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 AX200 无线网卡驱动安装</title>
    <url>/2021/05/09/CentOS7-AX200-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>最近手痒,把自己的笔记本联想小新重装成centos7,装完之后发现自己升级的网卡AX200 无法识别,只能手动安装驱动了</p>
<a id="more"></a>
<h2 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网卡信息</span></span><br><span class="line">lsusb</span><br><span class="line"><span class="comment"># 确认网卡的版本</span></span><br><span class="line">lspci | grep Network</span><br></pre></td></tr></table></figure>
<h2 id="下载无线驱动"><a href="#下载无线驱动" class="headerlink" title="下载无线驱动"></a>下载无线驱动</h2><p><a href="https://www.intel.cn/content/www/cn/zh/support/articles/000005511/wireless.html" target="_blank" rel="noopener">英特尔官方驱动</a></p>
<p><img src="/images/CentOS7-AX200-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/image-20210508161335874.png" alt="image-20210508161335874"></p>
<font color="red">注意!这边的网卡驱动内核要求需要5.1以上</font>

<h2 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看内核 uname -r</span></span><br><span class="line">3.10.0-514.26.2.el7.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h2><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入elrepo的key</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装7.x版本的ELRepo</span></span><br><span class="line">rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装新版本内核</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel<span class="_">-lt</span> -y</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># cetnos 7.x提供了ml和lt两个版本的内核</span></span><br><span class="line"><span class="comment"># ml为稳定版</span></span><br><span class="line"><span class="comment"># lt为开发版</span></span><br></pre></td></tr></table></figure>
<h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><h4 id="下载内核"><a href="#下载内核" class="headerlink" title="下载内核"></a>下载内核</h4><p>访问网页:<a href="https://elrepo.org/linux/kernel/el7/x86_64/RPMS/" target="_blank" rel="noopener">https://elrepo.org/linux/kernel/el7/x86_64/RPMS/</a></p>
<p><img src="/images/CentOS7-AX200-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/image-20210508154506906.png" alt="image-20210508154506906"></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kernel-ml-5.12.2-1.el7.elrepo.x86_64.rpm</span></span><br><span class="line"><span class="comment"># kernel-ml-devel-5.12.2-1.el7.elrepo.x86_64.rpm</span></span><br><span class="line"><span class="comment"># 将这两个都下了 然后放到任意目录下,只要你找得到就行</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install kernel-ml-5.12.2-1.el7.elrepo.x86_64.rpm</span><br><span class="line">yum -y install kernel-ml-devel-5.12.2-1.el7.elrepo.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="修改内核顺序"><a href="#修改内核顺序" class="headerlink" title="修改内核顺序"></a>修改内核顺序</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看内核顺序</span></span><br><span class="line">awk -F\<span class="string">' '</span><span class="variable">$1</span>==<span class="string">"menuentry "</span> &#123;<span class="built_in">print</span> i++ <span class="string">" : "</span> <span class="variable">$2</span>&#125;<span class="string">' /etc/grub2.cfg</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/CentOS7-AX200-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/image-20210508160125943.png" alt="image-20210508160125943"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们看到我们的内核现在在1的位置,所以我们需要修改内核启动顺序</span></span><br><span class="line">vim /etc/default/grub</span><br></pre></td></tr></table></figure>
<p><img src="/images/CentOS7-AX200-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/image-20210508160253533.png" alt="image-20210508160253533"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过grub2-mkconfig 命令来重建内核配置</span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<p><img src="/images/CentOS7-AX200-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/image-20210508160444635.png" alt="image-20210508160444635"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h2 id="安装网卡驱动"><a href="#安装网卡驱动" class="headerlink" title="安装网卡驱动"></a>安装网卡驱动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载解压</span></span><br><span class="line">tar -zxvf iwlwifi-cc-46.3cfab8da.0.tgz</span><br><span class="line"><span class="built_in">cd</span> iwlwifi-cc-46.3cfab8da.0/</span><br><span class="line"><span class="comment"># 将文件复制到指定目录  /lib/firmware/</span></span><br><span class="line">cp -i iwlwifi-cc-a0-46.ucode /lib/firmware/</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>AX200无线网卡</tag>
      </tags>
  </entry>
  <entry>
    <title>Utunbu安装zsh以及oh-my-zsh插件</title>
    <url>/2021/05/11/Utunbu%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>zsh 是一个强大的 bash 替代，而 <a href="https://link.jianshu.com/?t=https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a> 是 zsh 的一个傻瓜化配置工具。</p>
<p><img src="/images/Utunbu%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/image-20210511223341679.png" alt="image-20210511223341679"></p>
<a id="more"></a>
<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>我们先来查看我们的电脑有哪些shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地有那些shell</span></span><br><span class="line">cat /etc/shells </span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/usr/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/dash</span><br></pre></td></tr></table></figure>
<p>如果你用 Redhat Linux，执行：<code>sudo yum install zsh</code><br>如果你用 Ubuntu Linux，执行：<code>sudo apt install zsh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装zsh shell</span></span><br><span class="line">sudo apt install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 zsh 设置为系统默认 shell</span></span><br><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p>这样我们就安装好了zsh 但是 这样的zsh 还是很丑,我们需要配置他,由于配置zsh太过复杂,所以有人开发了一个插件来简化我们的配置</p>
<h2 id="安装oh-my-zsh插件"><a href="#安装oh-my-zsh插件" class="headerlink" title="安装oh-my-zsh插件"></a>安装oh-my-zsh插件</h2><p>可以通过 curl 或 wget 两种方式来安装，用一条命令即可安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在此之前如果你没有安装过git 会提示你安装git</span></span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl 安装</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wget 安装</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>
<p>安装完后出现下图:</p>
<p><img src="/images/Utunbu%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/image-20210511223341679.png" alt="image-20210511223341679"></p>
<h2 id="配置oh-my-zsh"><a href="#配置oh-my-zsh" class="headerlink" title="配置oh-my-zsh"></a>配置oh-my-zsh</h2><h3 id="安装autojump自动跳转插件"><a href="#安装autojump自动跳转插件" class="headerlink" title="安装autojump自动跳转插件"></a>安装autojump自动跳转插件</h3><p>官网：<a href="https://github.com/wting/autojump" target="_blank" rel="noopener">https://github.com/wting/autojump</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autojump</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">vim  ~/.zshrc</span><br><span class="line"><span class="comment">#在最后一行加入，注意点后面是一个空格</span></span><br><span class="line">. /usr/share/autojump/autojump.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用source 生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="安装zsh-syntax-highlighting语法高亮插件"><a href="#安装zsh-syntax-highlighting语法高亮插件" class="headerlink" title="安装zsh-syntax-highlighting语法高亮插件"></a>安装zsh-syntax-highlighting语法高亮插件</h3><p>官网：<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-syntax-highlighting</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用source 生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="安装zsh-autosuggestions语法历史记录插件"><a href="#安装zsh-autosuggestions语法历史记录插件" class="headerlink" title="安装zsh-autosuggestions语法历史记录插件"></a>安装zsh-autosuggestions语法历史记录插件</h3><p>官网：<a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-autosuggestions</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑  ~/.zshrc 在plugins=(zsh-autosuggestions)加上</span></span><br><span class="line">plugins=(</span><br><span class="line">        git  </span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">		)</span><br></pre></td></tr></table></figure>
<p>然后会发现上面这句话是不会生效的。这里科普一下：在~/.oh-my-zsh/plugins下有很多插件，直接使用plugins=(ant mvn svn git)这样的命令是可以直接加载插件的。</p>
<p>经过研究发现，如果使用plugins去执行插件的，首先要在本机已经安装了这个软件之后才可以使用。且这种方式在Ubuntu下不支持命令去执行，只能放在.zshrc文件下使用，然后再通过source ~/.zshrc使其生效。这个是对于Ubuntu比较吭的地方。</p>
<p>所以上面的plugins要放在~/.zshrc，具体修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 在最后新增一行</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用source 生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>输入命令时，会用浅色字体给出建议的命令，按 → 即可自动补全。</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>主题github地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/robbyrussell/oh-my-zsh/wiki/Themes">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a> oh-my-zsh自带了很多好看的主题，Rocken选择的是<code>ys</code>主题。 我们可以在上方的<a href="https://link.zhihu.com/?target=https%3A//github.com/robbyrussell/oh-my-zsh/wiki/Themes">github地址</a>中选择自己喜欢的主题，然后按照我们下面的步骤进行配置： 编辑<code>.zshrc</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>找到ZSH_THEME修改为你喜欢的主题</p>
<p><img src="/images/Utunbu%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/image-20210511223827207.png" alt="image-20210511223827207"></p>
<p>这里如果使用<code>agnoster</code>主题的话会出现乱码</p>
<p>需要在utunbu中添加字体</p>
<p>打开官网:<a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">https://github.com/powerline/fonts</a></p>
<p><img src="/images/Utunbu%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/image-20210511233801585.png" alt="image-20210511233801585"></p>
<p>我们执行下面的,直接安装的有问题.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clone</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="comment"># install</span></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="comment"># clean-up a bit</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rm -rf fonts</span><br></pre></td></tr></table></figure>
<p>当然安装完千万不要忘记在终端中选择字体</p>
<p><img src="/images/Utunbu%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/image-20210511234158686.png" alt="image-20210511234158686"></p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;uninstall.sh)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Utunbu</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Utunbu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2021/05/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录常用命令</p>
<a id="more"></a>
<h2 id="查看当前使用的shell"><a href="#查看当前使用的shell" class="headerlink" title="查看当前使用的shell"></a>查看当前使用的shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>
<h2 id="查看本机已安装的shell"><a href="#查看本机已安装的shell" class="headerlink" title="查看本机已安装的shell"></a>查看本机已安装的shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<h2 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h2><p>将所有行程以树状图显示，树状图将会以 pid (如果有指定) 或是以 init 这个基本行程为根 (root)，如果有指定使用者 id，则树状图会只显示该使用者所拥有的行程。</p>
<h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat 命令用于显示网络状态。</p>
<p>常用用于显示端口是否被占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep 端口号</span><br><span class="line"></span><br><span class="line"><span class="comment"># -t (tcp) 仅显示tcp相关选项</span></span><br><span class="line"><span class="comment"># -u (udp)仅显示udp相关选项</span></span><br><span class="line"><span class="comment"># -n 拒绝显示别名，能显示数字的全部转化为数字</span></span><br><span class="line"><span class="comment"># -l 仅列出在Listen(监听)的服务状态</span></span><br><span class="line"><span class="comment"># -p 显示建立相关链接的程序名</span></span><br></pre></td></tr></table></figure>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>
<ul>
<li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li>
<li>-f 循环读取</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f filename</span><br><span class="line"><span class="comment"># 但是如果用vim修改后无法获取变化</span></span><br><span class="line"><span class="comment"># 通过inode追踪文件，如果文件的inode发生了变化，将会使tail -f失效。</span></span><br><span class="line"><span class="comment"># 使用tail -F替代tail -f</span></span><br><span class="line"><span class="comment"># 还可以接 grep 过滤</span></span><br></pre></td></tr></table></figure>
<h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><p>处理文本文件的语言，是一个强大的文本分析工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;[pattern] action&#125;'</span> &#123;filenames&#125;   <span class="comment"># 行匹配语句 awk '' 只能用单引号</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 1.txt </span><br><span class="line">1 2 3 4</span><br><span class="line">a b c d </span><br><span class="line">q w e r</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"><span class="comment"># 取出第一列</span></span><br><span class="line">awk <span class="string">'&#123;print $1&#125;'</span> 1.txt</span><br><span class="line">1</span><br><span class="line">a</span><br><span class="line">q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列的话用,号隔开</span></span><br><span class="line">awk <span class="string">'&#123;print $1,$3&#125;'</span> 1.txt</span><br><span class="line">1 3</span><br><span class="line">a c</span><br><span class="line">q e</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F  <span class="comment">#-F相当于内置变量FS, 指定分割字符</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 1.txt </span><br><span class="line">1, 2, 3, 4</span><br><span class="line">a, b, c, d </span><br><span class="line">q, w, e, r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认用空格隔开</span></span><br><span class="line">awk  <span class="string">'&#123;print $1,$3&#125;'</span> 1.txt </span><br><span class="line">1, 3,</span><br><span class="line">a, c,</span><br><span class="line">q, e,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用,号分割</span></span><br><span class="line">awk -F, <span class="string">'&#123;print $1,$3&#125;'</span> 1.txt</span><br><span class="line">1  3</span><br><span class="line">a  c</span><br><span class="line">q  e</span><br></pre></td></tr></table></figure>
<p>这些知识基本使用,如需更高级用法请自行google</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pyenv安装以及问题排查</title>
    <url>/2021/05/19/pyenv%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="Pyenv介绍"><a href="#Pyenv介绍" class="headerlink" title="Pyenv介绍"></a>Pyenv介绍</h2><p>pyenv lets you easily switch between multiple versions of Python. It’s simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.</p>
<h2 id="安装Pyenv的原因"><a href="#安装Pyenv的原因" class="headerlink" title="安装Pyenv的原因"></a>安装Pyenv的原因</h2><p>安装pyenv是由于服务器上的python版本与我们开发的版本不一致，由于服务器很多服务都依赖于服务器上python版本，我们不能轻易的升级，如果升级会导致各种问题，所以我们引入了pyenv</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>你的电脑上肯定安装了<code>git</code>，如果没有的话请先安装。</p>
</li>
<li><p>从官方库中克隆，因为在国内使用curl安装的话会非常慢。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=~/.pyenv/bin:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT=~/.pyenv'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="comment"># 很多教程里是这个，echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc 但是会提示你，所以需要改成下面的，如果没提示就按这个来</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv init --path)"'</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新载入一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install --list <span class="comment"># 列出可安装版本</span></span><br><span class="line">pyenv install &lt;version&gt; <span class="comment"># 安装对应版本</span></span><br><span class="line">pyenv install -v &lt;version&gt; <span class="comment"># 安装对应版本，若发生错误，可以显示详细的错误信息</span></span><br><span class="line">pyenv versions <span class="comment"># 显示当前使用的python版本</span></span><br><span class="line">pyenv <span class="built_in">which</span> python <span class="comment"># 显示当前python安装路径</span></span><br><span class="line">pyenv global &lt;version&gt; <span class="comment"># 设置默认Python版本</span></span><br><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt; <span class="comment"># 当前路径创建一个.python-version, 以后进入这个目录自动切换为该版本</span></span><br></pre></td></tr></table></figure>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>当我们安装时会由于网速的问题，导致安装很慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在~/.pyenv下创建一个cache目录</span></span><br><span class="line">sudo mkdir ~/.pyenv/cache</span><br><span class="line"><span class="comment"># 然后我们从国内源把安装包丢到这个目录下</span></span><br><span class="line">wget https://npm.taobao.org/mirrors/python/3.7.5/Python-3.7.5.tar.xz ~/.pyenv/cache</span><br><span class="line"><span class="comment"># 然后我们就可以安装了</span></span><br><span class="line">pyenv install 3.7.5 -v</span><br></pre></td></tr></table></figure>
<p>如果提示我们缺少必要的库就安装一下就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>版本</tag>
      </tags>
  </entry>
  <entry>
    <title>python-socketio</title>
    <url>/2021/05/27/python-socketio/</url>
    <content><![CDATA[<p>Socket.IO is a transport protocol that enables real-time bidirectional event-based communication between clients (typically, though not always, web browsers) and a server. The official implementations of the client and server components are written in JavaScript. This package provides Python implementations of both, each with standard and asyncio variants.</p>
<p>Socket.IO是一种传输协议,用于 服务器与客户端之间的real-time实时通讯的.是用js写的,python-socketio软件包提供了两种Python的实现方式.一种是异步的一种标准的,但是异步这玩意更新的不完善,有很多坑,所以我们这里还是用标准的.</p>
<p>还有就是版本兼容问题,这个库更新后引入了很多不向后兼容的更改,所以我们这里必须用相对稳定的版本不能用最新版.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line"><span class="comment"># The client is using an unsupported version of the Socket.IO or Engine.IO protocols (further occurrences of this error will be logged with level INFO)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里坑了我好久</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">Flask-SocketIO==<span class="number">4.3</span><span class="number">.1</span></span><br><span class="line">python-engineio==<span class="number">3.13</span><span class="number">.2</span></span><br><span class="line">python-socketio==<span class="number">4.6</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eventlet is a concurrent networking library for Python that allows you to change how you run your code, not how you write it.</span></span><br><span class="line"><span class="comment"># 这段摘自官方文档介绍，Evenlet是一个Python的基于携程的网络库，它改变了你代码运行的方式，但是没有改变你怎么写代码</span></span><br><span class="line"><span class="comment"># eventlet 一个是处理和网络相关的，另一个可以通过协程实现并发</span></span><br><span class="line"><span class="comment"># 随eventlet一起部署的Socket.IO服务器可以访问长轮询和WebSocket传输。</span></span><br><span class="line"><span class="keyword">import</span> eventlet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Eventlet提供的monkey_patch()功能可以用等效的异步版本替换标准库中的所有阻塞功能。尽管python-socketio不需要猴子补丁，但其他类库（例如数据库驱动程序）也可能需要它</span></span><br><span class="line">eventlet.monkey_patch()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化服务器</span></span><br><span class="line"><span class="comment"># cors_allowed_origins 跨域请求</span></span><br><span class="line"><span class="comment"># logger,engineio_logger 日志输出方便查看</span></span><br><span class="line">sio = socketio.Server(logger=<span class="literal">True</span>, engineio_logger=<span class="literal">True</span>,cors_allowed_origins=<span class="string">'*'</span>)</span><br><span class="line"><span class="comment"># 用一个WSGI应用程序封装</span></span><br><span class="line">app = socketio.WSGIApp(sio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect跟disconnect 是特殊的两个事件,连接或断开时会自动调用</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(sid, environ)</span>:</span></span><br><span class="line">    print(<span class="string">'connect '</span>, sid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义事件,有两种方式一种是用函数名另一种就是自定义的</span></span><br><span class="line"><span class="comment"># @sio.on('my custom event')</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message</span><span class="params">(sid, data)</span>:</span></span><br><span class="line">    print(<span class="string">'message '</span>, data)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 接收客户端发来的消息</span></span><br><span class="line"><span class="meta">@sio.on('my response')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(sid,data)</span>:</span></span><br><span class="line">    print(sid)</span><br><span class="line">    print(data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># connect跟disconnect 是特殊的两个事件,连接或断开时会自动调用</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(sid)</span>:</span></span><br><span class="line">    print(<span class="string">'disconnect '</span>, sid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    SERVER_ADDRESS = (<span class="string">'127.0.0.1'</span>,<span class="number">8000</span>)</span><br><span class="line">    sock = eventlet.listen(SERVER_ADDRESS)</span><br><span class="line">    eventlet.wsgi.server(sock, app)</span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">sio = socketio.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认连接时执行</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'connection established'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听事件</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message</span><span class="params">(data)</span>:</span></span><br><span class="line">    print(<span class="string">'message received with '</span>, data)</span><br><span class="line">    <span class="comment"># 发送事件sio.emit(对方事件名,data)</span></span><br><span class="line">    sio.emit(<span class="string">'my response'</span>, &#123;<span class="string">'response'</span>: <span class="string">'my response'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认断开时执行</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'disconnected from server'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">sio.connect(<span class="string">'http://127.0.0.1:8000'</span>)</span><br><span class="line">sio.wait()</span><br></pre></td></tr></table></figure>
<p>客户端跟服务端搭建好了,那么怎么如何通信呢?</p>
<p>我们可以通过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发送事件sio.emit(对方事件名,data,房间号) 服务端房间号不写的话是群发给客户端</span></span><br><span class="line">sio.emit(<span class="string">'my response'</span>, &#123;<span class="string">'response'</span>: <span class="string">'my response'</span>&#125;,room=sid)</span><br><span class="line"><span class="comment"># emit 发送事件</span></span><br><span class="line"><span class="comment"># send 相当于发送一个message事件,而且是群发的</span></span><br></pre></td></tr></table></figure>
<h2 id="使用消息队列"><a href="#使用消息队列" class="headerlink" title="使用消息队列"></a>使用消息队列</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>要使用Redis消息队列，必须安装Python Redis客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># socketio.Server class</span></span><br><span class="line"><span class="comment"># 配置redismanager</span></span><br><span class="line">mgr = socketio.RedisManager(<span class="string">'redis://'</span>)</span><br><span class="line">sio = socketio.Server(client_manager=mgr)</span><br></pre></td></tr></table></figure>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要安装kombu</span></span><br><span class="line">pip install kombu</span><br><span class="line"></span><br><span class="line">mgr = socketio.KombuManager(<span class="string">'amqp://'</span>)</span><br><span class="line">sio = socketio.Server(client_manager=mgr)</span><br></pre></td></tr></table></figure>
<h3 id="从外部发送消息"><a href="#从外部发送消息" class="headerlink" title="从外部发送消息"></a>从外部发送消息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># connect to the redis queue as an external process</span></span><br><span class="line"></span><br><span class="line">external_sio = socketio.RedisManager(<span class="string">'redis://'</span>, write_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># emit an event</span></span><br><span class="line">external_sio.emit(<span class="string">'my event'</span>, data=&#123;<span class="string">'foo'</span>: <span class="string">'bar'</span>&#125;, room=<span class="string">'my room'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="消息队列示例"><a href="#消息队列示例" class="headerlink" title="消息队列示例"></a>消息队列示例</h2><p>这里我们用redis</p>
<h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端其实就起到一个将客户端加入房间的作用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> eventlet</span><br><span class="line">eventlet.monkey_patch()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"></span><br><span class="line">mgr = socketio.RedisManager(<span class="string">'redis://127.0.0.1:6379/0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化服务器</span></span><br><span class="line">sio = socketio.Server(client_manager=mgr, logger=<span class="literal">True</span>, engineio_logger=<span class="literal">True</span>,cors_allowed_origins=<span class="string">'*'</span>)</span><br><span class="line"><span class="comment"># 用一个WSGI应用程序封装</span></span><br><span class="line">app = socketio.WSGIApp(sio)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect跟disconnect 是特殊的两个事件,连接或断开时会自动调用</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(sid, environ)</span>:</span></span><br><span class="line">    print(<span class="string">'connect '</span>, sid)</span><br><span class="line">    <span class="comment"># 当客户端连接时将客户端放入指定房间</span></span><br><span class="line">    <span class="comment"># 当然 你也可以从environ 中获取客户端传过来的room_id</span></span><br><span class="line">    sio.enter_room(sid,room=<span class="string">'user_1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(sid)</span>:</span></span><br><span class="line">    print(<span class="string">'disconnect '</span>, sid)</span><br><span class="line">    <span class="comment"># 当客户端离开时,我们就删除这个房间</span></span><br><span class="line">    rooms = sio.rooms(sid)</span><br><span class="line">    <span class="keyword">for</span> room <span class="keyword">in</span> rooms:</span><br><span class="line">        sio.leave_room(sid, room)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    SERVER_ADDRESS = (<span class="string">''</span>, <span class="number">8000</span>)</span><br><span class="line">    sock = eventlet.listen(SERVER_ADDRESS)</span><br><span class="line">    eventlet.wsgi.server(sock, app)</span><br></pre></td></tr></table></figure>
<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"></span><br><span class="line">sio = socketio.Client()</span><br><span class="line"></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'connection established'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收外部用户发送的消息</span></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mgr_tst</span><span class="params">(data)</span>:</span></span><br><span class="line">    print(<span class="string">'message received with '</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'disconnected from server'</span>)</span><br><span class="line"></span><br><span class="line">sio.connect(<span class="string">'http://127.0.0.1:8000'</span>)</span><br><span class="line">sio.wait()</span><br></pre></td></tr></table></figure>
<h3 id="模拟外部发送消息"><a href="#模拟外部发送消息" class="headerlink" title="模拟外部发送消息"></a>模拟外部发送消息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"></span><br><span class="line">mgr = socketio.RedisManager(<span class="string">'redis://127.0.0.1:6379/0'</span>,write_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里其实是发送给客户端</span></span><br><span class="line"><span class="comment"># 这里坑了我好久,一开始我以为是发送给服务端然后服务端再转发给客户端,其实不是,是直接通过房间发送给指定客户端</span></span><br><span class="line">mgr.emit(<span class="string">'mgr_tst'</span>,data=<span class="string">'client Msg'</span>,room=<span class="string">'user_1'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实时通讯</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch</title>
    <url>/2021/05/30/elasticsearch/</url>
    <content><![CDATA[<p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况</p>
<a id="more"></a>
<h2 id="docker安装es"><a href="#docker安装es" class="headerlink" title="docker安装es"></a>docker安装es</h2><p>因为elasticsearch是java写的需要安装java虚拟机，所以我们这里推荐用docker进行安装。</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里我们拉取7.12.1</span></span><br><span class="line">docker pull elasticsearch:7.12.1</span><br></pre></td></tr></table></figure>
<p><img src="/images/elasticsearch/image-20210530143835569.png" alt="image-20210530143835569"></p>
<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" b0e9f9f047e6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d: 在后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name: 别名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p: 映射端口号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e:discovery.type=single-node：单机运行</span></span><br></pre></td></tr></table></figure>
<p>然后就可以在浏览器中查看，我们键入127.0.0.1:9200</p>
<p><img src="/images/elasticsearch/image-20210530145904787.png" alt="image-20210530145904787"></p>
<p><img src="/images/elasticsearch/image-20210530145944925.png" alt="image-20210530145944925"></p>
<h3 id="配置跨域"><a href="#配置跨域" class="headerlink" title="配置跨域"></a>配置跨域</h3><p>我们进入es的docker容器中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it es /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到配置文件</span></span><br><span class="line">[root@e0cfd719797d elasticsearch]# vi config/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在末尾添加如下两行，注意冒号后面需要加上空格</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: "*"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存退出</span></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启es容器</span></span><br><span class="line">docker restart es</span><br></pre></td></tr></table></figure>
<p><img src="/images/elasticsearch/image-20210530150640434.png" alt="image-20210530150640434"></p>
<h3 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。首先进入到plugins目录中下载分词器，下载完成后然后解压，再重启es即可。具体步骤如下:<br><strong>注意：</strong>elasticsearch的版本和ik分词器的版本需要保持一致，不然在重启的时候会失败。可以在这查看所有版本，选择合适自己版本的右键复制链接地址即可。<a href="https://aichh.com/redirect/aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXM=" target="_blank" rel="noopener">点击这里</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker exec -it es /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入plugins目录</span></span><br><span class="line">cd /usr/share/elasticsearch/plugins/ </span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行</span></span><br><span class="line">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip </span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">docker restart es</span><br></pre></td></tr></table></figure>
<p>我们可以用postman 试一下</p>
<p><img src="/images/elasticsearch/image-20210530151905035.png" alt="image-20210530151905035"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tokens"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"测"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"试"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"一"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"下"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"中"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"文"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"分"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">6</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"词"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"&lt;IDEOGRAPHIC&gt;"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不加ik分词的话是把每个词都分开了。然后我们加上中文分词</p>
<p><img src="/images/elasticsearch/image-20210530152041731.png" alt="image-20210530152041731"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tokens"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"测试"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"试一下"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"一下"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"一"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"TYPE_CNUM"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"下"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"COUNT"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"中文"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"分词"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到效果对比很明显。</p>
<h3 id="kibana安装"><a href="#kibana安装" class="headerlink" title="kibana安装"></a>kibana安装</h3><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p>
<p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p>
<p>搭建 Kibana 非常简单。您可以分分钟完成 Kibana 的安装并开始探索 Elasticsearch 的索引数据 — 没有代码、不需要额外的基础设施。</p>
<p>这里一定要注意！！！！</p>
<p>Kibana 的版本需要和 Elasticsearch 的版本一致。这是官方支持的配置。</p>
<h4 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker 安装</span></span><br><span class="line">docker pull docker.elastic.co/kibana/kibana:7.12.1</span><br></pre></td></tr></table></figure>
<p>配置kibana.yml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件目录</span></span><br><span class="line">mkdir -p ~/docker/kibana/config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入该目录</span></span><br><span class="line">cd ~/docker/kibana/config/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并写入配置文件 </span></span><br><span class="line">vim kibana.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ** THIS IS AN AUTO-GENERATED FILE **</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default Kibana configuration <span class="keyword">for</span> docker target</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kibana的服务名称</span></span><br><span class="line">server.name: kibana</span><br><span class="line"><span class="meta">#</span><span class="bash"> kibana的主机地址</span></span><br><span class="line">server.host: "0"</span><br><span class="line"><span class="meta">#</span><span class="bash"> elasticsearch的主机IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里填入你的外网地址，因为是在docker容器里面，如果填回环地址的话就有问题</span></span><br><span class="line">elasticsearch.hosts: [ "http://es_ip:9200" ]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置中文</span></span><br><span class="line">i18n.locale: "zh-CN"</span><br></pre></td></tr></table></figure>
<h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=kibana \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -p 5601:5601 \</span><br><span class="line">  -v ~/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml \</span><br><span class="line">  kibana:7.12.1</span><br></pre></td></tr></table></figure>
<h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:5601&#x2F;</span><br></pre></td></tr></table></figure>
<p>我们可以使用kibana来给es发送restfulAPI了</p>
<p><img src="/images/elasticsearch/image-20210530195642885.png" alt="image-20210530195642885"></p>
<p>具体es如何操作，这里我推荐一下这个为老哥的ElasticSerach 7 教程 <a href="https://github.com/xr2117/ElasticSearch7" target="_blank" rel="noopener">github</a></p>
]]></content>
      <categories>
        <category>search</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>‘es’</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocol Buffers</title>
    <url>/2022/03/05/Protocol-Buffers/</url>
    <content><![CDATA[<p>Protocol Buffers 是一种与语言无关，平台无关的可扩展机制，用于序列化结构化数据。使用Protocol Buffers 可以一次定义结构化的数据，然后可以使用特殊生成的源代码轻松地在各种数据流中使用各种语言编写和读取结构化数据。</p>
<p>现在有许多框架等在使用Protocol Buffers。gRPC也是基于Protocol Buffers。 Protocol Buffers 目前有2和3两个版本号。</p>
<p><strong>在gRPC中推荐使用proto3版本。</strong></p>
<h2 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h2><h3 id="Protocol-Buffers版本"><a href="#Protocol-Buffers版本" class="headerlink" title="Protocol Buffers版本"></a>Protocol Buffers版本</h3><p>Protocol Buffers文档的第一行非注释行，为版本申明，不填写的话默认为版本2。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line">或者</span><br><span class="line">syntax &#x3D; &quot;proto2&quot;;</span><br></pre></td></tr></table></figure>
<h3 id="Package包"><a href="#Package包" class="headerlink" title="Package包"></a>Package包</h3><p>Protocol Buffers 可以声明package，来防止命名冲突。 Packages是可选的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package foo.bar;</span><br><span class="line">message Open &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>使用的时候，也要加上命名空间，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message Foo &#123;</span><br><span class="line">  ...</span><br><span class="line">  foo.bar.Open open &#x3D; 1;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：对于Python而言，<code>package</code>会被忽略处理，因为Python中的包是以文件目录来定义的。</strong></p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>Protocol Buffers 中可以导入其它文件消息等，与Python的import类似。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import “myproject&#x2F;other_protos.proto”;</span><br></pre></td></tr></table></figure>
<h3 id="定义各种消息和服务"><a href="#定义各种消息和服务" class="headerlink" title="定义各种消息和服务"></a>定义各种消息和服务</h3><p>消息messge是用来定义数据的，服务service是用来gRPC的方法的。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Protocol Buffers 提供以下两种注释方式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">多行注释 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">.proto</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">Python</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left"></td>
<td style="text-align:left">float</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left"></td>
<td style="text-align:left">float</td>
</tr>
<tr>
<td style="text-align:left">int32</td>
<td style="text-align:left">使用变长编码，对负数编码效率低， 如果你的变量可能是负数，可以使用sint32</td>
<td style="text-align:left">int</td>
</tr>
<tr>
<td style="text-align:left">int64</td>
<td style="text-align:left">使用变长编码，对负数编码效率低，如果你的变量可能是负数，可以使用sint64</td>
<td style="text-align:left">int/long</td>
</tr>
<tr>
<td style="text-align:left">uint32</td>
<td style="text-align:left">使用变长编码</td>
<td style="text-align:left">int/long</td>
</tr>
<tr>
<td style="text-align:left">uint64</td>
<td style="text-align:left">使用变长编码</td>
<td style="text-align:left">int/long</td>
</tr>
<tr>
<td style="text-align:left">sint32</td>
<td style="text-align:left">使用变长编码，带符号的int类型，对负数编码比int32高效</td>
<td style="text-align:left">int</td>
</tr>
<tr>
<td style="text-align:left">sint64</td>
<td style="text-align:left">使用变长编码，带符号的int类型，对负数编码比int64高效</td>
<td style="text-align:left">int/long</td>
</tr>
<tr>
<td style="text-align:left">fixed32</td>
<td style="text-align:left">4字节编码， 如果变量经常大于2^{28} 的话，会比uint32高效</td>
<td style="text-align:left">int</td>
</tr>
<tr>
<td style="text-align:left">fixed64</td>
<td style="text-align:left">8字节编码， 如果变量经常大于2^{56} 的话，会比uint64高效</td>
<td style="text-align:left">int/long</td>
</tr>
<tr>
<td style="text-align:left">sfixed32</td>
<td style="text-align:left">4字节编码</td>
<td style="text-align:left">int</td>
</tr>
<tr>
<td style="text-align:left">sfixed64</td>
<td style="text-align:left">8字节编码</td>
<td style="text-align:left">int/long</td>
</tr>
<tr>
<td style="text-align:left">bool</td>
<td style="text-align:left"></td>
<td style="text-align:left">bool</td>
</tr>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left">必须包含utf-8编码或者7-bit ASCII text</td>
<td style="text-align:left">str</td>
</tr>
<tr>
<td style="text-align:left">bytes</td>
<td style="text-align:left">任意的字节序列</td>
<td style="text-align:left">str</td>
</tr>
</tbody>
</table>
</div>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>在 Proto Buffers 中，我们可以定义枚举和枚举类型，</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Corpus</span> </span>&#123;</span><br><span class="line">    UNIVERSAL = <span class="number">0</span>;</span><br><span class="line">    WEB = <span class="number">1</span>;</span><br><span class="line">    IMAGES = <span class="number">2</span>;</span><br><span class="line">    LOCAL = <span class="number">3</span>;</span><br><span class="line">    NEWS = <span class="number">4</span>;</span><br><span class="line">    PRODUCTS = <span class="number">5</span>;</span><br><span class="line">    VIDEO = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">Corpus corpus = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<p>枚举定义在一个消息内部或消息外部都是可以的，如果枚举是 定义在 message 内部，而其他 message 又想使用，那么可以通过 MessageType.EnumType 的方式引用。</p>
<p><strong>定义枚举的时候，我们要保证第一个枚举值必须是0，枚举值不能重复，除非使用 option allow_alias = true 选项来开启别名。</strong></p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumAllowingAlias</span> </span>&#123;</span><br><span class="line">    <span class="keyword">option</span> allow_alias = <span class="literal">true</span>;</span><br><span class="line">    UNKNOWN = <span class="number">0</span>;</span><br><span class="line">    STARTED = <span class="number">1</span>;</span><br><span class="line">    RUNNING = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举值的范围是32-bit integer，但因为枚举值使用变长编码，所以不推荐使用负数作为枚举值，因为这会带来效率问题。</p>
<h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><p>Protocol Buffers使用message定义消息数据。在Protocol Buffers中使用的数据都是通过message消息数据封装基本类型数据或其他消息数据，对应Python中的类。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字段编号"><a href="#字段编号" class="headerlink" title="字段编号"></a>字段编号</h3><p>消息定义中的每个字段都有唯一的编号。<strong>这些字段编号用于以消息二进制格式标识字段，并且在使用消息类型后不应更改。</strong> 请注意，<strong>1到15范围内的字段编号需要一个字节进行编码，包括字段编号和字段类型</strong>。<strong>16到2047范围内的字段编号占用两个字节</strong>。因此，您应该为非常频繁出现的消息元素保留数字1到15。请记住为将来可能添加的常用元素留出一些空间。</p>
<p>最小的标识号可以从1开始，最大到2^29 - 1,或 536,870,911。不可以使用其中的[19000－19999]的标识号， Protobuf协议实现中对这些进行了预留。如果非要在.proto文件中使用这些预留标识号，编译时就会报警。同样你也不能使用早期保留的标识号。</p>
<h3 id="指定字段规则"><a href="#指定字段规则" class="headerlink" title="指定字段规则"></a>指定字段规则</h3><p>消息字段可以是以下之一：</p>
<ul>
<li><p>singular：格式良好的消息可以包含该字段中的零个或一个（但不超过一个）。</p>
</li>
<li><p>repeated：此字段可以在格式良好的消息中重复任意次数（包括零）。将保留重复值的顺序。对应Python的列表。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="添加更多消息类型"><a href="#添加更多消息类型" class="headerlink" title="添加更多消息类型"></a>添加更多消息类型</h3><p>可以在单个.proto文件中定义多个消息类型。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h3><p>保留变量不被使用</p>
<p>如果通过完全删除字段或将其注释来更新消息类型，则未来用户可以在对类型进行自己的更新时重用字段编号。如果以后加载相同的旧版本，这可能会导致严重问题，包括数据损坏，隐私错误等。确保不会发生这种情况的一种方法是<strong>指定已删除字段的字段编号（或名称）reserved</strong>。如果将来的任何用户尝试使用这些字段标识符，protobuf编译器将会报错。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>;</span><br><span class="line">  reserved <span class="string">"foo"</span>, <span class="string">"bar"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>解析消息时，如果编码消息不包含特定的单数元素，则解析对象中的相应字段将设置为该字段的默认值。这些默认值是特定于类型的：</p>
<ul>
<li>对于字符串，默认值为空字符串。</li>
<li>对于字节，默认值为空字节。</li>
<li>对于bools，默认值为false。</li>
<li>对于数字类型，默认值为零。</li>
<li>对于枚举，默认值是第一个定义的枚举值，该值必须为0。</li>
<li>对于消息字段，未设置该字段。它的确切值取决于语言。</li>
<li>重复字段的默认值为空（通常是相应语言的空列表）。</li>
</ul>
<h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要在其父消息类型之外重用此消息类型，使用</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">SearchResponse.Result</span><br></pre></td></tr></table></figure>
<h2 id="map映射"><a href="#map映射" class="headerlink" title="map映射"></a>map映射</h2><p>如果要在数据定义中创建关联映射，Protocol Buffers提供了一种方便的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map&lt; key_type, value_type&gt; map_field &#x3D; N ;</span><br></pre></td></tr></table></figure>
<p>其中key_type可以是任何整数或字符串类型。请注意，枚举不是有效的key_type。value_type可以是除map映射类型外的任何类型。</p>
<p>例如，如果要创建项目映射，其中每条Project消息都与字符串键相关联，则可以像下面这样定义它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map&lt;string, Project&gt; projects &#x3D; 3 ;</span><br></pre></td></tr></table></figure>
<ul>
<li>map的字段可以是repeated。</li>
<li>序列化后的顺序和map迭代器的顺序是不确定的，所以你不要期望以固定顺序处理map</li>
<li>当为.proto文件产生生成文本格式的时候，map会按照key 的顺序排序，数值化的key会按照数值排序。</li>
<li>从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用，当从文本格式中解析map时，如果存在重复的key，则解析可能会失败。</li>
<li>如果为映射字段提供键但没有值，则字段序列化时的行为取决于语言。在Python中，使用类型的默认值。</li>
</ul>
<h2 id="oneof"><a href="#oneof" class="headerlink" title="oneof"></a>oneof</h2><p>如果你的消息中有很多可选字段， 并且同时至多一个字段会被设置， 你可以加强这个行为，使用oneof特性节省内存。</p>
<p>为了在.proto定义oneof字段， 你需要在名字前面加上oneof关键字, 比如下面例子的test_oneof:</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SampleMessage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">oneof</span> test_oneof &#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">4</span>;</span><br><span class="line">    SubMessage sub_message = <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后你可以增加oneof字段到 oneof 定义中. 你可以增加任意类型的字段, 但是不能使用repeated 关键字。</p>
<h2 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h2><p>Protocol Buffers使用service定义RPC服务。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> greeting = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloResponse</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> reply = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloResponse) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：一个service中可定义多个方法。</strong></p>
]]></content>
      <categories>
        <category>PRC</category>
      </categories>
      <tags>
        <tag>PRC</tag>
      </tags>
  </entry>
</search>
